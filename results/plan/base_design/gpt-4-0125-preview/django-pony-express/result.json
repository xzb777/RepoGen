{
    "implementation": [
        {
            "key_id": 1,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/__init__",
            "imports": [
                "from typing import Union, Optional",
                "from django.db.models.query import QuerySet"
            ],
            "code": "def __init__(self, recipient_email_list: Union[list, tuple, QuerySet] = None, **kwargs) -> None:\n    self._errors = []\n    self.service_class = None\n    if recipient_email_list is None:\n        self.recipient_email_list = []\n    else:\n        self.recipient_email_list = recipient_email_list\n    for key, value in kwargs.items():\n        setattr(self, key, value)"
        },
        {
            "key_id": 9,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/__init__",
            "imports": [
                "from typing import Union, Optional, List, Dict"
            ],
            "code": "def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[Dict] = None, attachment_list: Optional[List] = None, **kwargs) -> None:\n    self.SUBJECT_PREFIX = None\n    self.FROM_EMAIL = None\n    self.REPLY_TO_ADDRESS = []\n    self._errors = []\n    self.subject = None\n    self.template_name = None\n    self.template_txt_name = None\n    if isinstance(recipient_email_list, (list, tuple, str)):\n        self.recipient_email_list = recipient_email_list if isinstance(recipient_email_list, (list, tuple)) else [recipient_email_list]\n    else:\n        self.recipient_email_list = []\n    self.cc_email_list = []\n    self.bcc_email_list = []\n    self.attachment_list = attachment_list if attachment_list is not None else []\n    self.context_data = context_data if context_data is not None else {}\n    for key, value in kwargs.items():\n        setattr(self, key, value)"
        },
        {
            "key_id": 0,
            "fqn": "manage.py/main",
            "imports": [
                "import sys",
                "from django.core.management import execute_from_command_line"
            ],
            "code": "def main():\n    try:\n        execute_from_command_line(sys.argv)\n    except Exception as e:\n        print(f'Error executing command: {e}', file=sys.stderr)\n        sys.exit(1)"
        },
        {
            "key_id": 2,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/is_valid",
            "imports": [
                "from typing import List"
            ],
            "code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.service_class:\n        if raise_exception:\n            raise ValueError('Service class not defined')\n        return False\n    if not isinstance(self.recipient_email_list, List) or not self.recipient_email_list:\n        if raise_exception:\n            raise ValueError('Recipient email list is not defined or empty')\n        return False\n    return True"
        },
        {
            "key_id": 3,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list",
            "imports": [],
            "code": "def get_recipient_list(self) -> list:\n    return self.recipient_email_list"
        },
        {
            "key_id": 4,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_email_from_recipient",
            "imports": [],
            "code": "def get_email_from_recipient(self, recipient) -> str:\n    if hasattr(recipient, 'email'):\n        return recipient.email\n    elif isinstance(recipient, str):\n        return recipient\n    else:\n        raise ValueError('Invalid recipient type')"
        },
        {
            "key_id": 5,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_context_data",
            "imports": [],
            "code": "def get_context_data(self) -> dict:\n    context = {}\n    for recipient in self.recipient_email_list:\n        email = self.get_email_from_recipient(recipient)\n        context[email] = {'email': email}\n    return context"
        },
        {
            "key_id": 6,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/has_errors",
            "imports": [
                "from typing import List"
            ],
            "code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0"
        },
        {
            "key_id": 7,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/errors",
            "imports": [
                "from typing import List"
            ],
            "code": "def errors(self) -> List[str]:\n    return self._errors"
        },
        {
            "key_id": 8,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/process",
            "imports": [
                "from django.core.mail import send_mail",
                "from django.template.loader import render_to_string",
                "from django.utils.html import strip_tags"
            ],
            "code": "def process(self, raise_exception: bool = True) -> int:\n    if not self.is_valid(raise_exception):\n        if raise_exception:\n            raise ValueError('Invalid email configuration')\n        else:\n            return 0\n    sent_emails = 0\n    for recipient in self.get_recipient_list():\n        context = self.get_context_data()\n        subject = self.service_class.get_subject(self)\n        from_email = self.service_class.get_from_email(self)\n        html_message = render_to_string(self.service_class.template_name, context)\n        plain_message = strip_tags(html_message)\n        send_mail(subject, plain_message, from_email, [recipient], html_message=html_message)\n        sent_emails += 1\n    return sent_emails"
        },
        {
            "key_id": 10,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_get_logger",
            "imports": [
                "import logging"
            ],
            "code": "def _get_logger(self) -> logging.Logger:\n    if not hasattr(self, '_logger'):\n        self._logger = logging.getLogger(__name__)\n    return self._logger"
        },
        {
            "key_id": 11,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_context_data",
            "imports": [],
            "code": "def get_context_data(self) -> dict:\n    data = self.context_data.copy()\n    data.update({'subject': self.get_subject(), 'from_email': self.get_from_email(), 'reply_to': self.get_reply_to_emails(), 'cc': self.get_cc_emails(), 'bcc': self.get_bcc_emails(), 'attachments': self.get_attachments()})\n    return data"
        },
        {
            "key_id": 12,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_subject",
            "imports": [
                "from django.utils.translation import gettext_lazy as _"
            ],
            "code": "def get_subject(self) -> str:\n    if self.SUBJECT_PREFIX is not None:\n        return f'{self.SUBJECT_PREFIX} {_(self.subject)}'\n    return _(self.subject)"
        },
        {
            "key_id": 13,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_from_email",
            "imports": [
                "from django.conf import settings"
            ],
            "code": "def get_from_email(self) -> str:\n    if self.FROM_EMAIL is not None:\n        return self.FROM_EMAIL\n    return settings.DEFAULT_FROM_EMAIL"
        },
        {
            "key_id": 14,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_cc_emails",
            "imports": [],
            "code": "def get_cc_emails(self) -> list:\n    return self.cc_email_list"
        },
        {
            "key_id": 15,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_bcc_emails",
            "imports": [],
            "code": "def get_bcc_emails(self) -> list:\n    return self.bcc_email_list"
        },
        {
            "key_id": 16,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_reply_to_emails",
            "imports": [],
            "code": "def get_reply_to_emails(self) -> list:\n    if self.REPLY_TO_ADDRESS:\n        return self.REPLY_TO_ADDRESS\n    return []"
        },
        {
            "key_id": 17,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_translation",
            "imports": [
                "from django.utils.translation import gettext_lazy as _",
                "from typing import Union"
            ],
            "code": "def get_translation(self) -> Union[str, None]:\n    if hasattr(self, 'subject') and self.subject:\n        return _(self.subject)\n    return None"
        },
        {
            "key_id": 18,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_attachments",
            "imports": [
                "from typing import List"
            ],
            "code": "def get_attachments(self) -> List:\n    if not hasattr(self, 'attachment_list') or not self.attachment_list:\n        return []\n    return self.attachment_list"
        },
        {
            "key_id": 19,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_add_attachments",
            "imports": [
                "from django.core.mail.message import EmailMultiAlternatives"
            ],
            "code": "def _add_attachments(self, msg: EmailMultiAlternatives):\n    for attachment in self.get_attachments():\n        if isinstance(attachment, dict):\n            msg.attach(attachment.get('filename'), attachment.get('content'), attachment.get('mimetype'))\n        else:\n            msg.attach_file(attachment)"
        },
        {
            "key_id": 20,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "from django.utils.html import strip_tags"
            ],
            "code": "def _build_mail_object(self) -> EmailMultiAlternatives:\n    subject = self.get_translation() or self.subject\n    from_email = self.FROM_EMAIL or 'no-reply@example.com'\n    if self.template_name:\n        html_content = render_to_string(self.template_name, self.get_context_data())\n        text_content = strip_tags(html_content)\n    else:\n        html_content = text_content = 'This is an auto-generated email.'\n    msg = EmailMultiAlternatives(subject, text_content, from_email, self.recipient_email_list, cc=self.cc_email_list, bcc=self.bcc_email_list, reply_to=self.REPLY_TO_ADDRESS)\n    msg.attach_alternative(html_content, 'text/html')\n    self._add_attachments(msg)\n    return msg"
        },
        {
            "key_id": 21,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/is_valid",
            "imports": [],
            "code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.recipient_email_list:\n        if raise_exception:\n            raise ValueError('Recipient email list cannot be empty.')\n        return False\n    if not self.subject or not self.template_name:\n        if raise_exception:\n            raise ValueError('Subject and template name are required fields.')\n        return False\n    return True"
        },
        {
            "key_id": 22,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/has_errors",
            "imports": [
                "from typing import List"
            ],
            "code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0"
        },
        {
            "key_id": 23,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/errors",
            "imports": [],
            "code": "def errors(self) -> List[str]:\n    return self._errors"
        },
        {
            "key_id": 24,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "import logging"
            ],
            "code": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:\n    try:\n        msg.send()\n        logging.getLogger(__name__).info(f'Email sent to {msg.to}')\n        return True\n    except Exception as e:\n        self._errors.append(str(e))\n        logging.getLogger(__name__).error(f'Failed to send email to {msg.to}: {e}')\n        return False"
        },
        {
            "key_id": 25,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/process",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "from django.utils.html import strip_tags"
            ],
            "code": "def process(self, raise_exception: bool = True) -> bool:\n    if not self.is_valid(raise_exception=raise_exception):\n        if raise_exception:\n            raise ValueError('Invalid email configuration')\n        else:\n            return False\n    context = self.get_context_data()\n    html_content = render_to_string(self.template_name, context)\n    text_content = strip_tags(html_content)\n    msg = EmailMultiAlternatives(self.get_subject(), text_content, self.get_from_email(), self.recipient_email_list, cc=self.cc_email_list, bcc=self.bcc_email_list, reply_to=self.get_reply_to_emails())\n    msg.attach_alternative(html_content, 'text/html')\n    for attachment in self.get_attachments():\n        msg.attach_file(attachment)\n    return self._send_and_log_email(msg)"
        },
        {
            "key_id": 26,
            "fqn": "django_pony_express/services/asynchronous/thread.py/ThreadEmailService/process",
            "imports": [
                "from threading import Thread",
                "from django_pony_express.services.base import BaseEmailService"
            ],
            "code": "def process(self, raise_exception: bool = True) -> None:\n    thread = Thread(target=super().process, args=(raise_exception,))\n    thread.start()"
        }
    ]
}