{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/__init__",
            "imports": [
                "from argparse import ArgumentParser, Namespace"
            ],
            "code": "class ReverseArgumentParser:\n    def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):\n        self.parser = parser\n        self.namespace = namespace\n        self.indent = indent\n        self.arguments = []\n        self._unparse_args()"
        },
        {
            "key_id": 1,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
            "imports": [],
            "code": "def _unparse_args(self) -> None:\n        for action in self.parser._actions:\n            self._unparse_action(action)"
        },
        {
            "key_id": 2,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_action(self, action: Action) -> None:\n        if isinstance(action, argparse._StoreAction):\n            self._unparse_store_action(action)\n        elif isinstance(action, argparse._StoreTrueAction) or isinstance(action, argparse._StoreFalseAction):\n            self._unparse_store_true_false_action(action)\n        elif isinstance(action, argparse._AppendAction):\n            self._unparse_append_action(action)\n        elif isinstance(action, argparse._CountAction):\n            self._unparse_count_action(action)\n        else:\n            raise NotImplementedError(f'Unparsing for {type(action).__name__} not implemented')"
        },
        {
            "key_id": 3,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n        if action.help is argparse.SUPPRESS:\n            if getattr(self.namespace, action.dest, None) == action.default:\n                return True\n        return False"
        },
        {
            "key_id": 4,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
            "imports": [],
            "code": "def get_effective_command_line_invocation(self) -> str:\n        cmd_line = ' '.join(self.arguments)\n        return cmd_line"
        },
        {
            "key_id": 5,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
            "imports": [],
            "code": "def get_pretty_command_line_invocation(self) -> str:\n        pretty_cmd_line = '\\n'.join(self.arguments)\n        return pretty_cmd_line"
        },
        {
            "key_id": 1,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_args(self) -> None:\n    for action in self.parser._get_positional_actions():\n        self._unparse_action(action)\n    for action in self.parser._get_optional_actions():\n        self._unparse_action(action)"
        },
        {
            "key_id": 2,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
            "imports": [
                "from argparse import _StoreAction, _StoreConstAction, _StoreTrueAction, _StoreFalseAction, _AppendAction, _AppendConstAction, _CountAction, _SubParsersAction, _ExtendAction, BooleanOptionalAction"
            ],
            "code": "def _unparse_action(self, action: Action) -> None:\n    if isinstance(action, _StoreAction):\n        self._unparse_store_action(action)\n    elif isinstance(action, _StoreConstAction):\n        self._unparse_store_const_action(action)\n    elif isinstance(action, _StoreTrueAction) or isinstance(action, _StoreFalseAction):\n        self._unparse_store_true_action(action) if isinstance(action, _StoreTrueAction) else self._unparse_store_false_action(action)\n    elif isinstance(action, _AppendAction):\n        self._unparse_append_action(action)\n    elif isinstance(action, _AppendConstAction):\n        self._unparse_append_const_action(action)\n    elif isinstance(action, _CountAction):\n        self._unparse_count_action(action)\n    elif isinstance(action, _SubParsersAction):\n        self._unparse_sub_parsers_action(action)\n    elif isinstance(action, _ExtendAction):\n        self._unparse_extend_action(action)\n    elif isinstance(action, BooleanOptionalAction):\n        self._unparse_boolean_optional_action(action)\n    else:\n        raise NotImplementedError(f'Unparsing for action type {type(action).__name__} is not implemented')"
        },
        {
            "key_id": 3,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
            "imports": [],
            "code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n    if action.help is argparse.SUPPRESS:\n        if getattr(action, 'default', None) is not None:\n            if getattr(self.namespace, action.dest, None) == action.default:\n                return True\n    return False"
        },
        {
            "key_id": 4,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
            "imports": [],
            "code": "def get_effective_command_line_invocation(self) -> str:\n    self._unparse_args()\n    return ' '.join(self.arguments)"
        },
        {
            "key_id": 5,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
            "imports": [],
            "code": "def get_pretty_command_line_invocation(self) -> str:\n    self._unparse_args()\n    pretty_cmd_line = '\\n'.join(self.arguments)\n    return pretty_cmd_line"
        },
        {
            "key_id": 6,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
            "imports": [
                "from typing import List, Sequence"
            ],
            "code": "def _get_long_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    return [opt for opt in option_strings if opt.startswith('--')]"
        },
        {
            "key_id": 7,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
            "imports": [
                "from typing import List, Sequence"
            ],
            "code": "def _get_short_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    return [opt for opt in option_strings if opt.startswith('-') and not opt.startswith('--')]"
        },
        {
            "key_id": 8,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:\n    if prefer_short:\n        options = self._get_short_option_strings(action.option_strings) + self._get_long_option_strings(action.option_strings)\n    else:\n        options = self._get_long_option_strings(action.option_strings) + self._get_short_option_strings(action.option_strings)\n    return options[0] if options else ''"
        },
        {
            "key_id": 9,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
            "imports": [
                "from typing import List"
            ],
            "code": "def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:\n    for arg_list in args:\n        self._append_list_of_args(arg_list)"
        },
        {
            "key_id": 10,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_args",
            "imports": [
                "from typing import List"
            ],
            "code": "def _append_list_of_args(self, args: List[str]) -> None:\n    for arg in args:\n        self._append_arg(arg)"
        },
        {
            "key_id": 12,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_indent_str",
            "imports": [],
            "code": "def _indent_str(self) -> str:\n    return ' ' * self.indent"
        },
        {
            "key_id": 11,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_arg",
            "imports": [],
            "code": "def _append_arg(self, arg: str) -> None:\n    indented_line = self._indent_str() + arg\n    self.arguments.append(indented_line)"
        },
        {
            "key_id": 13,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_action",
            "imports": [
                "from shlex import quote"
            ],
            "code": "def _unparse_store_action(self, action) -> None:\n    if getattr(action, 'option_strings', None):\n        option_string = self._get_option_string(action)\n        value = getattr(self.namespace, action.dest, None)\n        if value is not None:\n            self._append_arg(f'{option_string} {quote(str(value))}')"
        },
        {
            "key_id": 14,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_const_action",
            "imports": [
                "from shlex import quote"
            ],
            "code": "def _unparse_store_const_action(self, action) -> None:\n    if getattr(action, 'option_strings', None) and getattr(self.namespace, action.dest, None) == action.const:\n        option_string = self._get_option_string(action)\n        self._append_arg(f'{option_string}')"
        },
        {
            "key_id": 15,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_true_action",
            "imports": [
                "from shlex import quote"
            ],
            "code": "def _unparse_store_true_action(self, action) -> None:\n    if getattr(action, 'option_strings', None) and getattr(self.namespace, action.dest, False) is True:\n        option_string = self._get_option_string(action, prefer_short=True)\n        self._append_arg(f'{option_string}')"
        },
        {
            "key_id": 16,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_false_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_store_false_action(self, action: Action) -> None:\n    if not action.default:\n        option_string = self._get_option_string(action, prefer_short=True)\n        self._append_arg(option_string)"
        },
        {
            "key_id": 17,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_append_action(self, action: Action) -> None:\n    values = getattr(self.namespace, action.dest, None)\n    if values is not None:\n        for value in values:\n            option_string = self._get_option_string(action, prefer_short=False)\n            self._append_arg(option_string)\n            self._append_arg(str(value))"
        },
        {
            "key_id": 18,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_const_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_append_const_action(self, action: Action) -> None:\n    if getattr(self.namespace, action.dest, None) is not None:\n        option_string = self._get_option_string(action, prefer_short=False)\n        self._append_arg(option_string)"
        },
        {
            "key_id": 19,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_count_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_count_action(self, action: Action) -> None:\n    count = getattr(self.namespace, action.dest, 0)\n    if count > 0:\n        option_string = self._get_option_string(action, prefer_short=True)\n        for _ in range(count):\n            self._append_arg(option_string)"
        },
        {
            "key_id": 20,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_sub_parsers_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_sub_parsers_action(self, action: Action) -> None:\n    subparser_name = getattr(self.namespace, action.dest, None)\n    if subparser_name is not None:\n        self._append_arg(subparser_name)\n        subparser = action.choices[subparser_name]\n        for sub_action in subparser._actions:\n            self._unparse_action(sub_action)"
        },
        {
            "key_id": 21,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_extend_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_extend_action(self, action: Action) -> None:\n        if action.dest is not None:\n            values = getattr(self.namespace, action.dest, None)\n            if values is not None:\n                for value in values:\n                    self._append_arg(f'--{action.dest}={value}')"
        },
        {
            "key_id": 22,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_boolean_optional_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_boolean_optional_action(self, action: Action) -> None:\n        value = getattr(self.namespace, action.dest, None)\n        if value is True:\n            self._append_arg(f'--{action.dest}')\n        elif value is False:\n            self._append_arg(f'--no-{action.dest}')"
        },
        {
            "key_id": 23,
            "fqn": "reverse_argparse/reverse_argparse.py/quote_arg_if_necessary",
            "imports": [],
            "code": "def quote_arg_if_necessary(arg: str) -> str:\n        if ' ' in arg:\n            return f'\\'{arg}\\''\n        return arg"
        }
    ]
}