{
    "implementation": [
        {
            "key_id": 2,
            "fqn": "ufomerge/layout.py/LayoutSubsetVisitor/__init__",
            "imports": [
                "from typing import Set"
            ],
            "code": "class LayoutSubsetVisitor:\n    def __init__(self, glyphset: Set[str]):\n        self.glyphset = glyphset\n        self.logger = logging.getLogger('ufomerge.layout')\n        self.logger.debug(f'Initializing LayoutSubsetVisitor with glyphset: {glyphset}')"
        },
        {
            "key_id": 25,
            "fqn": "ufomerge/layout.py/LayoutClosureVisitor/__init__",
            "imports": [
                "from typing import Dict, Set"
            ],
            "code": "class LayoutClosureVisitor:\n    def __init__(self, incoming_glyphset: Dict[str, bool], glyphset: Set[str]):\n        self.incoming_glyphset = incoming_glyphset\n        self.glyphset = glyphset\n        self.logger = logging.getLogger('ufomerge.layout')\n        self.logger.debug(f'Initializing LayoutClosureVisitor with incoming_glyphset: {incoming_glyphset} and glyphset: {glyphset}')"
        },
        {
            "key_id": 32,
            "fqn": "ufomerge/utils.py/filter_sequence",
            "imports": [
                "from typing import Iterable, Set, Optional, List, Dict"
            ],
            "code": "def filter_sequence(slots: Iterable, glyphset: Set[str], class_name_references: Optional[Dict[str, List[str]]] = None) -> List[List[str]]:\n    filtered_sequence = []\n    for slot in slots:\n        if isinstance(slot, str) and slot in glyphset:\n            filtered_sequence.append([slot])\n        elif isinstance(slot, list):\n            filtered_slot = [glyph for glyph in slot if glyph in glyphset]\n            if filtered_slot:\n                filtered_sequence.append(filtered_slot)\n    return filtered_sequence"
        },
        {
            "key_id": 33,
            "fqn": "ufomerge/utils.py/filter_glyph_container",
            "imports": [
                "from typing import Any, Set, Optional, Dict, List"
            ],
            "code": "def filter_glyph_container(container: Any, glyphset: Set[str], class_name_references: Optional[Dict[str, List[str]]] = None) -> Any:\n    if isinstance(container, list):\n        return [item for item in container if item in glyphset]\n    elif isinstance(container, dict):\n        return {key: value for key, value in container.items() if key in glyphset or (class_name_references and key in class_name_references)}\n    return container"
        },
        {
            "key_id": 34,
            "fqn": "ufomerge/utils.py/has_any_empty_slots",
            "imports": [
                "from typing import List"
            ],
            "code": "def has_any_empty_slots(sequence: List) -> bool:\n    for slot in sequence:\n        if not slot:\n            return True\n    return False"
        },
        {
            "key_id": 30,
            "fqn": "ufomerge/utils.py/filter_glyphs",
            "imports": [
                "from typing import Iterable, Set, List"
            ],
            "code": "def filter_glyphs(glyphs: Iterable[str], glyphset: Set[str]) -> List[str]:\n    return [glyph for glyph in glyphs if glyph in glyphset]"
        },
        {
            "key_id": 31,
            "fqn": "ufomerge/utils.py/filter_glyph_mapping",
            "imports": [
                "from typing import Mapping, Any, Set, Dict"
            ],
            "code": "def filter_glyph_mapping(glyphs: Mapping[str, Any], glyphset: Set[str]) -> Dict[str, Any]:\n    return {glyph: details for glyph, details in glyphs.items() if glyph in glyphset}"
        },
        {
            "key_id": 0,
            "fqn": "ufomerge/layout.py/_deduplicate_class_defs",
            "imports": [
                "from fontTools.feaLib import ast"
            ],
            "code": "def _deduplicate_class_defs(class_name_references: dict[str, list[ast.GlyphClassName]]) -> list[ast.GlyphClassDefinition]:\n    seen = {}\n    result = []\n    for class_name, glyph_classes in class_name_references.items():\n        deduped = []\n        for glyph_class in glyph_classes:\n            glyphs_set = frozenset(glyph_class.glyphs)\n            if glyphs_set not in seen:\n                seen[glyphs_set] = glyph_class\n                deduped.append(glyph_class)\n            else:\n                seen[glyphs_set].glyphs.extend(glyph_class.glyphs)\n        result.extend(deduped)\n    return [ast.GlyphClassDefinition(class_name, seen[glyphs_set].glyphs) for glyphs_set, class_name in seen.items()]"
        },
        {
            "key_id": 1,
            "fqn": "ufomerge/layout.py/LayoutSubsetter/subset",
            "imports": [
                "from fontTools.feaLib import ast",
                "from ufomerge.layout import LayoutSubsetVisitor",
                "from ufomerge.layout import LayoutClosureVisitor",
                "from ufomerge.layout import _ignore_pos_sub"
            ],
            "code": "def subset(self, fea: ast.FeatureFile):\n    visitor = LayoutSubsetVisitor(self.glyphset)\n    fea.accept(visitor)\n    if self.layout_handling == 'ignore':\n        _ignore_pos_sub(visitor, fea)\n    elif self.layout_handling == 'closure':\n        closure_visitor = LayoutClosureVisitor(self.incoming_glyphset, self.glyphset)\n        fea.accept(closure_visitor)"
        },
        {
            "key_id": 14,
            "fqn": "ufomerge/layout.py/_ignore_pos_sub",
            "imports": [
                "from fontTools.feaLib import ast"
            ],
            "code": "def _ignore_pos_sub(visitor, st, *args, **kwargs):\n    if isinstance(st, (ast.PositioningSubtable, ast.SubstitutionSubtable)):\n        return True\n    return False"
        },
        {
            "key_id": 3,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "from fontTools.feaLib import ast"
            ],
            "code": "def visit(visitor, mcd, *args, **kwargs):\n    if hasattr(mcd, 'accept'):\n        mcd.accept(visitor)"
        },
        {
            "key_id": 4,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [],
            "code": "def visit(visitor, st, *args, **kwargs):\n    if hasattr(st, 'accept'):\n        st.accept(visitor)"
        },
        {
            "key_id": 5,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 6,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 7,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 8,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 9,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 10,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}', exc_info=True)\n        raise"
        },
        {
            "key_id": 11,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}', exc_info=True)\n        raise"
        },
        {
            "key_id": 12,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}', exc_info=True)\n        raise"
        },
        {
            "key_id": 13,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}', exc_info=True)\n        raise"
        },
        {
            "key_id": 15,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}', exc_info=True)\n        raise"
        },
        {
            "key_id": 16,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}')\n        raise"
        },
        {
            "key_id": 17,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, block, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(block).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(block, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(block).__name__}: {e}')\n        raise"
        },
        {
            "key_id": 18,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}')\n        raise"
        },
        {
            "key_id": 19,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}')\n        raise"
        },
        {
            "key_id": 20,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(_visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(_visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {e}')\n        raise"
        },
        {
            "key_id": 21,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(_visitor, st, *args, **kwargs):\n    logger.debug(f'Visiting {st} with {_visitor}')\n    if hasattr(_visitor, 'visit_' + type(st).__name__):\n        return getattr(_visitor, 'visit_' + type(st).__name__)(st, *args, **kwargs)\n    elif hasattr(_visitor, 'generic_visit'):\n        return _visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {type(st).__name__} on {_visitor}')"
        },
        {
            "key_id": 22,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(_visitor, st, *args, **kwargs):\n    logger.debug(f'Visiting {st} with {_visitor}')\n    if hasattr(_visitor, 'visit_' + type(st).__name__):\n        return getattr(_visitor, 'visit_' + type(st).__name__)(st, *args, **kwargs)\n    elif hasattr(_visitor, 'generic_visit'):\n        return _visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {type(st).__name__} on {_visitor}')"
        },
        {
            "key_id": 23,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(_visitor, st, *args, **kwargs):\n    logger.debug(f'Visiting {st} with {_visitor}')\n    if hasattr(_visitor, 'visit_' + type(st).__name__):\n        return getattr(_visitor, 'visit_' + type(st).__name__)(st, *args, **kwargs)\n    elif hasattr(_visitor, 'generic_visit'):\n        return _visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {type(st).__name__} on {_visitor}')"
        },
        {
            "key_id": 24,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(_visitor, st, *args, **kwargs):\n    logger.debug(f'Visiting {st} with {_visitor}')\n    if hasattr(_visitor, 'visit_' + type(st).__name__):\n        return getattr(_visitor, 'visit_' + type(st).__name__)(st, *args, **kwargs)\n    elif hasattr(_visitor, 'generic_visit'):\n        return _visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {type(st).__name__} on {_visitor}')"
        },
        {
            "key_id": 26,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging",
                "from typing import Dict, Set"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\nclass LayoutClosureVisitor:\n    def __init__(self, incoming_glyphset: Dict[str, bool], glyphset: Set[str]):\n        self.incoming_glyphset = incoming_glyphset\n        self.glyphset = glyphset\n        logger.info('Initialized LayoutClosureVisitor with glyphsets')\n\ndef visit(visitor, st, *args, **kwargs):\n    logger.debug(f'Visiting {st} with {visitor}')\n    if hasattr(visitor, 'visit_' + type(st).__name__):\n        return getattr(visitor, 'visit_' + type(st).__name__)(st, *args, **kwargs)\n    elif hasattr(visitor, 'generic_visit'):\n        return visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {type(st).__name__} on {visitor}')"
        },
        {
            "key_id": 27,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(visitor, st, *args, **kwargs):\n    if hasattr(visitor, 'visit_' + st.__class__.__name__):\n        return getattr(visitor, 'visit_' + st.__class__.__name__)(st, *args, **kwargs)\n    elif hasattr(visitor, 'generic_visit'):\n        return visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {st.__class__.__name__} on {visitor.__class__.__name__}')"
        },
        {
            "key_id": 28,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(visitor, st, *args, **kwargs):\n    if hasattr(visitor, 'visit_' + st.__class__.__name__):\n        return getattr(visitor, 'visit_' + st.__class__.__name__)(st, *args, **kwargs)\n    elif hasattr(visitor, 'generic_visit'):\n        return visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {st.__class__.__name__} on {visitor.__class__.__name__}')"
        },
        {
            "key_id": 29,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "logger = logging.getLogger('ufomerge.layout')\n\ndef visit(visitor, st, *args, **kwargs):\n    if hasattr(visitor, 'visit_' + st.__class__.__name__):\n        return getattr(visitor, 'visit_' + st.__class__.__name__)(st, *args, **kwargs)\n    elif hasattr(visitor, 'generic_visit'):\n        return visitor.generic_visit(st, *args, **kwargs)\n    else:\n        logger.warning(f'No visit method for {st.__class__.__name__} on {visitor.__class__.__name__}')"
        },
        {
            "key_id": 35,
            "fqn": "ufomerge/__init__.py/UFOMerger/__post_init__",
            "imports": [
                "import logging",
                "from dataclasses import field",
                "from typing import Set, Dict, Iterable, Tuple, Path"
            ],
            "code": "logger = logging.getLogger('ufomerge')\n\nclass UFOMerger:\n    def __init__(self, ufo1: Font, ufo2: Font, glyphs: Iterable[str] = field(default_factory=list), exclude_glyphs: Iterable[str] = field(default_factory=list), codepoints: Iterable[int] = field(default_factory=list), layout_handling: str = 'subset', existing_handling: str = 'replace', include_dir: Path | None = None, original_glyphlist: Iterable[str] | None = None):\n        self.ufo1 = ufo1\n        self.ufo2 = ufo2\n        self.glyphs = glyphs\n        self.exclude_glyphs = exclude_glyphs\n        self.codepoints = codepoints\n        self.layout_handling = layout_handling\n        self.existing_handling = existing_handling\n        self.include_dir = include_dir\n        self.original_glyphlist = original_glyphlist\n        self.incoming_glyphset = dict()\n        self.final_glyphset = set()\n        self.blacklisted = set()\n        self.ufo2_features = None\n        self.ufo2_languagesystems = list()"
        },
        {
            "key_id": 36,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge",
            "imports": [
                "import logging",
                "from fontTools.feaLib import ast",
                "from ufoLib2 import Font",
                "from typing import Iterable, Set, Dict, Tuple, Path",
                "from ufomerge.utils import filter_glyphs, filter_glyph_mapping, filter_sequence, filter_glyph_container, has_any_empty_slots"
            ],
            "code": "logger = logging.getLogger('ufomerge')\n\ndef merge(self):\n    self.incoming_glyphset = {glyph: True for glyph in self.glyphs}\n    self.final_glyphset = set(self.ufo1.keys())\n    self.blacklisted = set(self.exclude_glyphs)\n\n    # Filter glyphs to be included\n    filtered_glyphs = filter_glyphs(self.glyphs, self.final_glyphset)\n    glyph_mapping = filter_glyph_mapping(self.ufo2, self.final_glyphset)\n\n    # Handle components and dependencies\n    for glyph in filtered_glyphs:\n        self.close_components(glyph)\n\n    # Merge language systems\n    self.add_language_systems(self.ufo2_languagesystems)\n\n    # Merge kerning\n    self.merge_kerning()\n\n    # Merge sets and dictionaries\n    for name, glyph in glyph_mapping.items():\n        if name not in self.final_glyphset or self.existing_handling == 'replace':\n            self.merge_set(name, glyph)\n            self.merge_dict(name, glyph)\n\n    # Handle layout features\n    if self.layout_handling != 'ignore_layout':\n        if self.layout_handling == 'subset_layout':\n            # Subset layout rules\n            pass\n        elif self.layout_handling == 'layout_closure':\n            # Add necessary glyphs to support layout closure\n            pass"
        },
        {
            "key_id": 37,
            "fqn": "ufomerge/__init__.py/UFOMerger/close_components",
            "imports": [
                "from ufoLib2.objects import Component"
            ],
            "code": "def close_components(self, glyph: str):\n    if glyph in self.ufo1 and glyph not in self.blacklisted:\n        return\n    if glyph in self.ufo2:\n        glyph_obj = self.ufo2[glyph]\n        for component in glyph_obj.components:\n            self.close_components(component.baseGlyph)\n        if glyph not in self.ufo1:\n            self.ufo1.addGlyph(glyph_obj)\n        self.final_glyphset.add(glyph)"
        },
        {
            "key_id": 38,
            "fqn": "ufomerge/__init__.py/UFOMerger/filter_glyphs_incoming",
            "imports": [
                "from ufomerge.utils import filter_glyphs"
            ],
            "code": "def filter_glyphs_incoming(self, glyphs: Iterable[str]) -> list[str]:\n    self.incoming_glyphset = {glyph: True for glyph in glyphs}\n    filtered_glyphs = filter_glyphs(glyphs, set(self.ufo2.keys()))\n    self.final_glyphset.update(filtered_glyphs)\n    return filtered_glyphs"
        },
        {
            "key_id": 39,
            "fqn": "ufomerge/__init__.py/UFOMerger/add_language_systems",
            "imports": [],
            "code": "def add_language_systems(self, incoming_languagesystems):\n    if not hasattr(self.ufo1.features, 'text'):\n        self.ufo1.features.text = ''\n    for langsys in incoming_languagesystems:\n        if f'languagesystem {langsys[0]} {langsys[1]};' not in self.ufo1.features.text:\n            self.ufo1.features.text += f'\\nlanguagesystem {langsys[0]} {langsys[1]};'"
        },
        {
            "key_id": 40,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge_kerning",
            "imports": [],
            "code": "def merge_kerning(self):\n    for left, right in self.ufo2.kerning.items():\n        if left in self.final_glyphset and right in self.final_glyphset:\n            if left not in self.ufo1.kerning:\n                self.ufo1.kerning[left] = {}\n            self.ufo1.kerning[left].update(right)"
        },
        {
            "key_id": 41,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge_set",
            "imports": [],
            "code": "def merge_set(self, name, glyph, create_if_not_in_ufo1 = False):\n    if name not in self.ufo1.groups:\n        if create_if_not_in_ufo1:\n            self.ufo1.groups[name] = []\n        else:\n            return\n    if glyph in self.final_glyphset and glyph not in self.ufo1.groups[name]:\n        self.ufo1.groups[name].append(glyph)"
        },
        {
            "key_id": 42,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge_dict",
            "imports": [
                "from typing import Any, Dict, Set"
            ],
            "code": "def merge_dict(self, name: str, glyph: str, create_if_not_in_ufo1: bool = False) -> None:\n    if name not in self.ufo1.lib:\n        if create_if_not_in_ufo1:\n            self.ufo1.lib[name] = {}\n        else:\n            return\n    if name not in self.ufo2.lib:\n        return\n    dict1 = self.ufo1.lib[name]\n    dict2 = self.ufo2.lib[name]\n    for key, value in dict2.items():\n        if key in dict1 and isinstance(dict1[key], dict) and isinstance(value, dict):\n            dict1[key].update(value)\n        else:\n            dict1[key] = value"
        },
        {
            "key_id": 43,
            "fqn": "ufomerge/__init__.py/merge_ufos",
            "imports": [
                "from pathlib import Path",
                "from typing import Iterable, Optional",
                "from ufoLib2 import Font",
                "from fontTools.feaLib.ast import FeatureFile"
            ],
            "code": "def merge_ufos(ufo1: Font, ufo2: Font, glyphs: Optional[Iterable[str]] = None, exclude_glyphs: Optional[Iterable[str]] = None, codepoints: Optional[Iterable[int]] = None, layout_handling: str = 'subset', existing_handling: str = 'replace', include_dir: Optional[Path] = None, original_glyphlist: Optional[Iterable[str]] = None) -> None:\n    merger = UFOMerger(ufo1, ufo2, glyphs, exclude_glyphs, codepoints, layout_handling, existing_handling, include_dir, original_glyphlist)\n    merger.merge()"
        },
        {
            "key_id": 44,
            "fqn": "ufomerge/__init__.py/subset_ufo",
            "imports": [
                "from pathlib import Path",
                "from typing import Iterable, Optional",
                "from ufoLib2 import Font",
                "from fontTools.feaLib.ast import FeatureFile"
            ],
            "code": "def subset_ufo(ufo: Font, glyphs: Optional[Iterable[str]] = None, exclude_glyphs: Optional[Iterable[str]] = None, codepoints: Optional[Iterable[int]] = None, layout_handling: str = 'subset', include_dir: Optional[Path] = None, original_glyphlist: Optional[Iterable[str]] = None) -> Font:\n    new_ufo = ufo.__class__()\n    subsetter = UFOMerger(new_ufo, ufo, glyphs, exclude_glyphs, codepoints, layout_handling, 'replace', include_dir, original_glyphlist)\n    subsetter.merge()\n    return new_ufo"
        }
    ]
}