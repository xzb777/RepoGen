{
    "implementation": [
        {
            "key_id": 14,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/__init__",
            "imports": [
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n    self.logger = logging.getLogger(__name__)\n    self.grammar = Grammar(\n        r\"\"\"\n        maccarone = human_source maccarone_chunk*\n        maccarone_chunk = snippet human_source?\n\n        snippet = snippet_open (ai_source snippet_close)?\n        snippet_open = snippet_open_single / snippet_open_multi\n        snippet_open_single = guidance_open guidance_inner \">>\" nl\n        snippet_open_multi = guidance_open nl guidance_lines guidance_close\n        snippet_close = ws \"#<</>>\" nl\n\n        guidance_open = ws \"#<<\"\n        guidance_close = ws \"#>>\" nl\n        guidance_line = ws \"#\" guidance_inner nl\n        guidance_lines = guidance_line+\n        guidance_inner = ~\"((?!>>).)*\"\n\n        human_source = source_line*\n        ai_source = source_line*\n        source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n        ws = ~\"[ \\t]*\"\n        nl = ws ~\"[\\r\\n]\"\n        \"\"\"\n    )"
        },
        {
            "key_id": 3,
            "fqn": "examples/todo.py/Todo/__init__",
            "imports": [
                "from examples.todo import load_todos"
            ],
            "code": "def __init__(self, description, status = 'not done', id = None):\n    self.description = description\n    self.status = status\n    self.id = id\n    self.todos = load_todos()"
        },
        {
            "key_id": 11,
            "fqn": "src/maccarone/preprocessor.py/MissingPiece/get_line_pos",
            "imports": [
                "from typing import Tuple"
            ],
            "code": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:\n    lines = raw_source.split('\\n')\n    for i, line in enumerate(lines):\n        if '#<<' in line or '#<</>>' in line:\n            return (i, lines.index(line))\n    return (-1, -1)"
        },
        {
            "key_id": 12,
            "fqn": "src/maccarone/preprocessor.py/MissingPiece/complete",
            "imports": [
                "from typing import Optional"
            ],
            "code": "def complete(self, replacement: Optional[str]) -> str:\n    if replacement is None:\n        return 'Completion not available.'\n    else:\n        return replacement"
        },
        {
            "key_id": 13,
            "fqn": "src/maccarone/preprocessor.py/find_line_number",
            "imports": [],
            "code": "def find_line_number(text: str, pos: int):\n    return text.count('\\n', 0, pos) + 1"
        },
        {
            "key_id": 15,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/generic_visit",
            "imports": [
                "from parsimonious.grammar import Grammar",
                "from parsimonious.nodes import Node",
                "from typing import List",
                "import logging"
            ],
            "code": "def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n    self.logger = logging.getLogger(__name__)\n    self.grammar = Grammar(\n        r\"\"\"\n        maccarone = human_source maccarone_chunk*\n        maccarone_chunk = snippet human_source?\n\n        snippet = snippet_open (ai_source snippet_close)?\n        snippet_open = snippet_open_single / snippet_open_multi\n        snippet_open_single = guidance_open guidance_inner \">>\" nl\n        snippet_open_multi = guidance_open nl guidance_lines guidance_close\n        snippet_close = ws \"#<</>>\" nl\n\n        guidance_open = ws \"#<<\"\n        guidance_close = ws \"#>>\" nl\n        guidance_line = ws \"#\" guidance_inner nl\n        guidance_lines = guidance_line+\n        guidance_inner = ~\"((?!>>).)*\"\n\n        human_source = source_line*\n        ai_source = source_line*\n        source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n        ws = ~\"[ \\t]*\"\n        nl = ws ~\"[\\r\\n]\"\n        \"\"\"\n    )\n\ndef generic_visit(self, node: Node, visited_children: List[Node]):\n    self.logger.debug('Visiting node: %s', node.expr_name)\n    # Implementation for generic visit\n    return visited_children"
        },
        {
            "key_id": 16,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone",
            "imports": [
                "from parsimonious.nodes import Node",
                "import logging"
            ],
            "code": "def visit_maccarone(self, node: Node, visited_children: list):\n    self.logger.debug('Visiting maccarone node')\n    # Implementation for visiting maccarone node\n    return visited_children"
        },
        {
            "key_id": 17,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone_chunk",
            "imports": [
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "def visit_maccarone_chunk(self, node, visited_children):\n    self.logger.debug('Visiting maccarone chunk')\n    # Assuming the grammar has been defined to parse maccarone chunks\n    # This method would handle the logic of processing each maccarone chunk encountered in the source\n    chunks = []\n    for child in visited_children:\n        if isinstance(child, list):  # This checks if the child is a list of nodes\n            chunks.extend(child)\n        else:\n            chunks.append(child)\n    return chunks"
        },
        {
            "key_id": 18,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet",
            "imports": [
                "import logging"
            ],
            "code": "def visit_snippet(self, node, visited_children):\n    self.logger.debug('Visiting snippet')\n    # Process the snippet node here\n    # Snippets are parts of the code that are either to be filled by AI or already filled\n    snippet_content = ''\n    for child in visited_children:\n        if hasattr(child, 'text'):\n            snippet_content += child.text\n    return snippet_content"
        },
        {
            "key_id": 19,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open",
            "imports": [
                "import logging"
            ],
            "code": "def visit_snippet_open(self, node, visited_children):\n    self.logger.debug('Visiting snippet open')\n    # This method would handle the opening tag of a snippet\n    # It might involve setting up some state or preparing for the snippet's content\n    return 'Snippet Open'"
        },
        {
            "key_id": 20,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_single",
            "imports": [
                "import logging"
            ],
            "code": "def visit_snippet_open_single(self, node, visited_children):\n    self.logger.debug('Visiting single snippet open')\n    # Handle single-line snippet openings\n    # This might involve specific logic for single-line snippets, such as trimming or formatting\n    return 'Single Snippet Open'"
        },
        {
            "key_id": 21,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_multi",
            "imports": [
                "import logging"
            ],
            "code": "def visit_snippet_open_multi(self, node, visited_children):\n    self.logger.debug('Visiting multi snippet open')\n    # Handle multi-line snippet openings\n    # This could involve more complex state management or setup than single-line snippets\n    return 'Multi Snippet Open'"
        },
        {
            "key_id": 22,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_open",
            "imports": [
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "def visit_guidance_open(self, node, visited_children):\n    self.logger.debug('Visiting guidance open')\n    # Extract the guidance content without the opening '#<<'\n    guidance_content = node.text.strip()[2:].strip()\n    return {'type': 'guidance_open', 'content': guidance_content}"
        },
        {
            "key_id": 23,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_line",
            "imports": [
                "import logging"
            ],
            "code": "def visit_guidance_line(self, node, visited_children):\n    self.logger.debug('Visiting guidance line')\n    # Extract the guidance line content, ignoring the leading '#' and whitespace\n    guidance_content = node.text.lstrip('#').strip()\n    return {'type': 'guidance_line', 'content': guidance_content}"
        },
        {
            "key_id": 24,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_lines",
            "imports": [
                "import logging"
            ],
            "code": "def visit_guidance_lines(self, node, visited_children):\n    self.logger.debug('Visiting guidance lines')\n    # Collect all guidance line contents into a list\n    guidance_contents = [child['content'] for child in visited_children if child.get('type') == 'guidance_line']\n    return {'type': 'guidance_lines', 'contents': guidance_contents}"
        },
        {
            "key_id": 25,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_inner",
            "imports": [
                "import logging"
            ],
            "code": "def visit_guidance_inner(self, node, visited_children):\n    self.logger.debug('Visiting guidance inner')\n    # The inner guidance is simply the text of the node, as it's already been processed by visit_guidance_line(s)\n    return {'type': 'guidance_inner', 'content': node.text.strip()}"
        },
        {
            "key_id": 26,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_human_source",
            "imports": [
                "import logging"
            ],
            "code": "def visit_human_source(self, node, visited_children):\n    self.logger.debug('Visiting human source')\n    # Human source code is collected as is, without modification\n    source_code = node.text\n    return {'type': 'human_source', 'content': source_code}"
        },
        {
            "key_id": 27,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_ai_source",
            "imports": [
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "class RawSourceVisitor:\n    def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n        self.logger = logging.getLogger(__name__)\n        self.grammar = Grammar(\n            r\"\"\"\n            maccarone = human_source maccarone_chunk*\n            maccarone_chunk = snippet human_source?\n\n            snippet = snippet_open (ai_source snippet_close)?\n            snippet_open = snippet_open_single / snippet_open_multi\n            snippet_open_single = guidance_open guidance_inner \">>\" nl\n            snippet_open_multi = guidance_open nl guidance_lines guidance_close\n            snippet_close = ws \"#<</>>\" nl\n\n            guidance_open = ws \"#<<\"\n            guidance_close = ws \"#>>\" nl\n            guidance_line = ws \"#\" guidance_inner nl\n            guidance_lines = guidance_line+\n            guidance_inner = ~\"((?!>>).)*\"\n\n            human_source = source_line*\n            ai_source = source_line*\n            source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n            ws = ~\"[ \\t]*\"\n            nl = ws ~\"[\\r\\n]\"\n            \"\"\"\n        )\n\n    def visit_ai_source(self, node: Node, visited_children: list):\n        # Placeholder for actual implementation\n        pass"
        },
        {
            "key_id": 28,
            "fqn": "src/maccarone/preprocessor.py/raw_source_to_pieces",
            "imports": [
                "from typing import List, Optional",
                "from parsimonious.nodes import Node"
            ],
            "code": "def raw_source_to_pieces(input: str, block_at_line: Optional[int] = None) -> List['Piece']:\n    pass  # Placeholder for actual implementation"
        },
        {
            "key_id": 29,
            "fqn": "src/maccarone/preprocessor.py/raw_pieces_to_tagged_input",
            "imports": [
                "from typing import List"
            ],
            "code": "def raw_pieces_to_tagged_input(raw_pieces: List['Piece']) -> str:\n    pass  # Placeholder for actual implementation"
        },
        {
            "key_id": 30,
            "fqn": "src/maccarone/preprocessor.py/tagged_input_to_tagged_output",
            "imports": [
                "from typing import Callable"
            ],
            "code": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: 'ChatAPI') -> str:\n    pass  # Placeholder for actual implementation"
        },
        {
            "key_id": 31,
            "fqn": "src/maccarone/preprocessor.py/tagged_output_to_completed_pieces",
            "imports": [
                "from typing import Dict"
            ],
            "code": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:\n    pass  # Placeholder for actual implementation"
        },
        {
            "key_id": 32,
            "fqn": "src/maccarone/preprocessor.py/pieces_to_final_source",
            "imports": [
                "from typing import List, Dict"
            ],
            "code": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:\n    final_source = ''\n    for piece in raw_pieces:\n        if piece.line_number in completed_pieces:\n            final_source += completed_pieces[piece.line_number]\n        else:\n            final_source += piece.content\n    return final_source"
        },
        {
            "key_id": 33,
            "fqn": "src/maccarone/preprocessor.py/preprocess_maccarone",
            "imports": [
                "from typing import Optional",
                "from .openai import ChatAPI"
            ],
            "code": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int] = None) -> str:\n    raw_pieces = raw_source_to_pieces(raw_source, block_at_line)\n    tagged_input = raw_pieces_to_tagged_input(raw_pieces)\n    tagged_output = tagged_input_to_tagged_output(tagged_input, chat_api)\n    completed_pieces = tagged_output_to_completed_pieces(tagged_output)\n    final_source = pieces_to_final_source(raw_pieces, completed_pieces)\n    return final_source"
        },
        {
            "key_id": 34,
            "fqn": "src/maccarone/openai.py/complete_chat",
            "imports": [
                "from typing import List, Dict, Callable"
            ],
            "code": "def complete_chat(messages: List[Dict[str, str]], model = 'gpt-4', on_token: Callable[[int], None] = lambda p: None) -> str:\n    # Assuming there's a predefined function to send messages to the OpenAI API\n    response = send_to_openai_api(messages, model=model)\n    on_token(len(response))\n    return response"
        },
        {
            "key_id": 35,
            "fqn": "src/maccarone/openai.py/ChatAPI/complete_chat",
            "imports": [
                "from typing import List, Dict"
            ],
            "code": "class ChatAPI:\n    def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model = 'gpt-4') -> str:\n        # Assuming there's a method to handle chat completion\n        return complete_chat(messages, model=model)"
        },
        {
            "key_id": 38,
            "fqn": "src/maccarone/scripts/preprocess.py/parse_args",
            "imports": [
                "import argparse"
            ],
            "code": "def parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--path', type=str, help='Path to the file or directory to preprocess')\n    parser.add_argument('--print', action='store_true', help='Print the output instead of rewriting files')\n    parser.add_argument('--rewrite', action='store_true', help='Rewrite the source files with processed content')\n    parser.add_argument('--suffix', type=str, default='.py', help='File suffix to process when a directory is given')\n    parser.add_argument('--block-at-line', type=int, default=None, help='Block number to specifically target for processing')\n    return parser.parse_args()"
        },
        {
            "key_id": 36,
            "fqn": "src/maccarone/scripts/preprocess.py/preprocess",
            "imports": [
                "import logging",
                "from src.maccarone.preprocessor import preprocess_maccarone"
            ],
            "code": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:\n    logger = logging.getLogger(__name__)\n    try:\n        processed_source = preprocess_maccarone(mn_path, None, block_at_line)\n        if print_:\n            print(processed_source)\n        if rewrite:\n            with open(mn_path, 'w') as file:\n                file.write(processed_source)\n    except Exception as e:\n        logger.error(f'Error processing {mn_path}: {e}')"
        },
        {
            "key_id": 37,
            "fqn": "src/maccarone/scripts/preprocess.py/main",
            "imports": [
                "import argparse",
                "import logging",
                "from src.maccarone.scripts.preprocess import preprocess"
            ],
            "code": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int] = None) -> None:\n    logger = logging.getLogger(__name__)\n    logger.info('Starting preprocessing...')\n    preprocess(path, print_, rewrite, block_at_line)\n    logger.info('Preprocessing completed.')"
        },
        {
            "key_id": 39,
            "fqn": "src/maccarone/scripts/preprocess.py/script_main",
            "imports": [
                "import logging",
                "from src.maccarone.scripts.preprocess import main",
                "from src.maccarone.scripts.preprocess import parse_args"
            ],
            "code": "def script_main():\n    logger = logging.getLogger(__name__)\n    args = parse_args()\n    try:\n        main(args.path, args.print_, args.rewrite, args.suffix, args.block_at_line)\n    except Exception as e:\n        logger.error(f'Failed to execute script main with error: {e}')"
        },
        {
            "key_id": 4,
            "fqn": "examples/todo.py/load_todos",
            "imports": [
                "import json",
                "from dataclasses import asdict",
                "from examples.todo import Todo"
            ],
            "code": "def load_todos() -> list[Todo]:\n    try:\n        with open('todos.json', 'r') as file:\n            todos_data = json.load(file)\n            return [Todo(**todo) for todo in todos_data]\n    except FileNotFoundError:\n        return []"
        },
        {
            "key_id": 5,
            "fqn": "examples/todo.py/save_todos",
            "imports": [
                "import json",
                "from dataclasses import asdict"
            ],
            "code": "def save_todos(todos: list[Todo]) -> None:\n    with open('todos.json', 'w') as file:\n        json.dump([asdict(todo) for todo in todos], file)"
        },
        {
            "key_id": 6,
            "fqn": "examples/todo.py/add_todo",
            "imports": [
                "from examples.todo import load_todos",
                "from examples.todo import save_todos",
                "from examples.todo import Todo"
            ],
            "code": "def add_todo(description):\n    todos = load_todos()\n    new_todo = Todo(description=description)\n    todos.append(new_todo)\n    save_todos(todos)"
        },
        {
            "key_id": 7,
            "fqn": "examples/todo.py/remove_todo",
            "imports": [
                "from examples.todo import load_todos",
                "from examples.todo import save_todos"
            ],
            "code": "def remove_todo(id):\n    todos = load_todos()\n    todos = [todo for todo in todos if todo.id != id]\n    save_todos(todos)"
        },
        {
            "key_id": 8,
            "fqn": "examples/todo.py/print_todos",
            "imports": [
                "from examples.todo import load_todos"
            ],
            "code": "def print_todos():\n    todos = load_todos()\n    for todo in todos:\n        print(f'{todo.id}: {todo.description} - {todo.status}')"
        },
        {
            "key_id": 9,
            "fqn": "examples/todo.py/main",
            "imports": [
                "import argparse",
                "from examples.todo import add_todo",
                "from examples.todo import remove_todo",
                "from examples.todo import print_todos",
                "from examples.todo import load_todos",
                "from examples.todo import save_todos"
            ],
            "code": "def main():\n    parser = argparse.ArgumentParser(description='Manage your todos.')\n    parser.add_argument('--add', type=str, help='Add a new todo')\n    parser.add_argument('--remove', type=int, help='Remove a todo by id')\n    parser.add_argument('--print', action='store_true', help='Print all todos')\n    args = parser.parse_args()\n\n    if args.add:\n        add_todo(args.add)\n    elif args.remove is not None:\n        remove_todo(args.remove)\n    elif args.print:\n        print_todos()\n    else:\n        print('No action specified.')"
        },
        {
            "key_id": 0,
            "fqn": "examples/file_sizes_ext.py/main",
            "imports": [
                "import argparse",
                "import os"
            ],
            "code": "def main(path: str, extension: str | None = None):\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    if extension:\n        filenames = [f for f in filenames if f.endswith(extension)]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(f'{fn} - Size: {size} bytes')\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='List files and their sizes.')\n    parser.add_argument('path', type=str, help='Path to directory')\n    parser.add_argument('--extension', type=str, help='Filter files by extension')\n    args = parser.parse_args()\n    main(args.path, args.extension)"
        },
        {
            "key_id": 10,
            "fqn": "examples/file_sizes.py/main",
            "imports": [
                "import argparse",
                "import os"
            ],
            "code": "def main(path: str):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('path', type=str, help='Path to list files from')\n    args = parser.parse_args()\n\n    filenames = [f for f in os.listdir(args.path) if os.path.isfile(os.path.join(args.path, f))]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(args.path, fn))\n        print(fn, size)"
        },
        {
            "key_id": 1,
            "fqn": "examples/add.py/add_two_numbers",
            "imports": [
                "import argparse"
            ],
            "code": "def add_two_numbers(x, y):\n    return x + y\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('x', type=int, help='First number')\n    parser.add_argument('y', type=int, help='Second number')\n    args = parser.parse_args()\n    result = add_two_numbers(args.x, args.y)\n    print(f'The sum of {args.x} and {args.y} is {result}')"
        },
        {
            "key_id": 2,
            "fqn": "examples/fizzbuzz.py/main",
            "imports": [
                "import argparse"
            ],
            "code": "def main(n: int):\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('n', type=int, help='Number to run FizzBuzz up to')\n    args = parser.parse_args()\n    main(args.n)"
        }
    ]
}