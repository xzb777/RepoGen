{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/__init__",
            "class": "santorinai/board.py.Board",
            "signature": "def __init__(self, number_of_players: int):",
            "comment": "Initializes a new instance of the Board class.\n\nArgs:\n    number_of_players (int): The number of players in the game.",
            "comment_free_code": "def __init__(self, number_of_players: int):\n    \n    self.pawns: List[Pawn] = []\n    self.nb_players = number_of_players\n    self.nb_pawns = number_of_players * 2\n    for pawn_number in range(1, self.nb_pawns + 1):\n        player_number = (pawn_number - 1) % number_of_players + 1\n        pawn_order = (pawn_number - 1) // number_of_players + 1\n        self.pawns.append(Pawn(pawn_number, pawn_order, player_number))\n    self.board_size = 5\n    self.board = [[0 for _ in range(self.board_size)] for _ in range(self.board_size)]\n    self.winner_player_number = None\n    self.turn_number = 1\n    self.player_turn = 1",
            "start_lineno": 29,
            "end_lineno": 72,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 0,
            "gen_code": "def __init__(self, number_of_players: int):\n    if number_of_players not in [2, 3]:\n        raise ValueError(\"Number of players must be 2 or 3\")\n    self.nb_players = number_of_players\n    self.nb_pawns = 4 if number_of_players == 2 else 6\n    self.board = [[0 for _ in range(5)] for _ in range(5)]\n    self.pawns: List[Pawn] = []\n    for player in range(1, number_of_players + 1):\n        for i in range(1, 3):\n            self.pawns.append(Pawn(number=len(self.pawns) + 1, order=i, player_number=player))\n    self.player_turn = 1\n    self.turn_number = 0\n    self.winner_player_number = None",
            "gen_import": [
                "from typing import List, Tuple",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_move_possible",
            "class": "santorinai/board.py.Board",
            "signature": "def is_move_possible(self, start_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[bool, str]:",
            "comment": "Checks if a move from the start position to the end position is possible.\n\nArgs:\n    start_pos (tuple): The starting position [x, y] of the pawn.\n    end_pos (tuple): The ending position [x, y] of the pawn.\n\nReturns:\n    bool: True if the move is possible, False otherwise.\n    str: A string describing why the move is not possible.",
            "comment_free_code": "def is_move_possible(self, start_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[bool, str]:\n    \n    if not self.is_position_within_board(start_pos):\n        return (False, 'It is not possible to move from outside the board.')\n    if not self.is_position_within_board(end_pos):\n        return (False, 'It is not possible to move outside the board: ' + str(end_pos))\n    if start_pos == end_pos:\n        return (False, 'It is not possible to move to the same position.')\n    start_level = self.board[start_pos[0]][start_pos[1]]\n    end_level = self.board[end_pos[0]][end_pos[1]]\n    if end_level == 4:\n        return (False, 'It is not possible to move on a terminated tower.')\n    if end_level - start_level > 1:\n        return (False, 'It is not possible to move two levels in one move.')\n    if not self.is_position_adjacent(start_pos, end_pos):\n        return (False, 'It is not possible to move that far.')\n    if self.is_pawn_on_position(end_pos):\n        return (False, 'It is not possible to move on another pawn.')\n    return (True, 'The move is possible.')",
            "start_lineno": 74,
            "end_lineno": 119,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                4,
                6,
                7
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/is_position_within_board",
                    "santorinai/board.py/Board/is_position_adjacent",
                    "santorinai/board.py/Board/is_pawn_on_position"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 1,
            "gen_code": "def is_move_possible(self, start_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[bool, str]:\n    if not self.is_position_within_board(start_pos):\n        return False, \"Start position is not within the board\"\n    if not self.is_position_within_board(end_pos):\n        return False, \"End position is not within the board\"\n    if not self.is_position_adjacent(start_pos, end_pos):\n        return False, \"End position is not adjacent to start position\"\n    if self.is_pawn_on_position(end_pos):\n        return False, \"End position is occupied by another pawn\"\n    start_height = self.board[start_pos[0]][start_pos[1]]\n    end_height = self.board[end_pos[0]][end_pos[1]]\n    if end_height > start_height + 1:\n        return False, \"Height difference is too large\"\n    if end_height == 4:\n        return False, \"Cannot move to a dome\"\n    return True, \"\"",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_position_within_board",
            "class": "santorinai/board.py.Board",
            "signature": "def is_position_within_board(self, position: Tuple[int, int]):",
            "comment": "Checks if a position is within the bounds of the game board.\n\nArgs:\n    position (tuple): The position [x, y] to check.\n\nReturns:\n    bool: True if the position is within the board bounds, False otherwise.",
            "comment_free_code": "def is_position_within_board(self, position: Tuple[int, int]):\n    \n    (x, y) = position\n    return 0 <= x < self.board_size and 0 <= y < self.board_size",
            "start_lineno": 121,
            "end_lineno": 132,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 2,
            "gen_code": "def is_position_within_board(self, position: Tuple[int, int]):\n    x, y = position\n    return 0 <= x < 5 and 0 <= y < 5",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_position_adjacent",
            "class": "santorinai/board.py.Board",
            "signature": "def is_position_adjacent(self, position1: Tuple[int, int], position2: Tuple[int, int]):",
            "comment": "Checks if two positions are adjacent to each other.\n\nArgs:\n    position1 (tuple): The first position [x1, y1].\n    position2 (tuple): The second position [x2, y2].\n\nReturns:\n    bool: True if the positions are adjacent, False otherwise.",
            "comment_free_code": "def is_position_adjacent(self, position1: Tuple[int, int], position2: Tuple[int, int]):\n    \n    (x1, y1) = position1\n    (x2, y2) = position2\n    return abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1 and (x1 != x2 or y1 != y2)",
            "start_lineno": 134,
            "end_lineno": 149,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 3,
            "gen_code": "def is_position_adjacent(self, position1: Tuple[int, int], position2: Tuple[int, int]):\n    if not self.is_position_within_board(position1) or not self.is_position_within_board(position2):\n        return False\n    x1, y1 = position1\n    x2, y2 = position2\n    return abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1 and (x1, y1) != (x2, y2)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_pawn_on_position",
            "class": "santorinai/board.py.Board",
            "signature": "def is_pawn_on_position(self, position: Tuple[int, int]):",
            "comment": "Checks if a pawn is on a position.\n\nArgs:\n    position (tuple): The position [x, y] to check.\n\nReturns:\n    bool: True if a pawn is on the position, False otherwise.",
            "comment_free_code": "def is_pawn_on_position(self, position: Tuple[int, int]):\n    \n    for pawn in self.pawns:\n        if pawn.pos == position:\n            return True\n    return False",
            "start_lineno": 151,
            "end_lineno": 164,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 4,
            "gen_code": "def is_pawn_on_position(self, position: Tuple[int, int]):\n    return any(pawn.pos == position for pawn in self.pawns)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_build_possible",
            "class": "santorinai/board.py.Board",
            "signature": "def is_build_possible(self, builder_position: Tuple[int, int], build_position: Tuple[int, int]):",
            "comment": "Checks if a build from the builder position is possible.\n\nArgs:\n    builder_position (tuple): The position [x, y] of the builder pawn.\n    build_position (tuple): The position [x, y] of the build.\n\nReturns:\n    bool: True if the build is possible, False otherwise.\n    str: A string describing why the build is not possible.",
            "comment_free_code": "def is_build_possible(self, builder_position: Tuple[int, int], build_position: Tuple[int, int]):\n    \n    if not self.is_position_within_board(builder_position):\n        return (False, 'It is not possible to build from outside the board.')\n    if not self.is_position_within_board(build_position):\n        return (False, 'It is not possible to build outside the board.')\n    if builder_position == build_position:\n        return (False, 'It is not possible to build where you are standing.')\n    if self.board[build_position[0]][build_position[1]] == 4:\n        return (False, 'It is not possible to build on a terminated tower.')\n    if not self.is_position_adjacent(builder_position, build_position):\n        return (False, 'It is not possible to build that far.')\n    if self.is_pawn_on_position(build_position):\n        return (False, 'It is not possible to build on another pawn.')\n    return (True, 'The build is possible.')",
            "start_lineno": 166,
            "end_lineno": 204,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                4,
                6,
                7
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/is_position_within_board",
                    "santorinai/board.py/Board/is_position_adjacent",
                    "santorinai/board.py/Board/is_pawn_on_position"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 5,
            "gen_code": "def is_build_possible(self, builder_position: Tuple[int, int], build_position: Tuple[int, int]):\n    if not self.is_position_within_board(builder_position):\n        return False, \"Builder position is not within the board\"\n    if not self.is_position_within_board(build_position):\n        return False, \"Build position is not within the board\"\n    if not self.is_position_adjacent(builder_position, build_position):\n        return False, \"Build position is not adjacent to builder position\"\n    if self.is_pawn_on_position(build_position):\n        return False, \"Cannot build on a position occupied by a pawn\"\n    if self.board[build_position[0]][build_position[1]] == 4:\n        return False, \"Cannot build on a dome\"\n    return True, \"\"",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_player_pawns",
            "class": "santorinai/board.py.Board",
            "signature": "def get_player_pawns(self, player_number: int) -> List[Pawn]:",
            "comment": "Gets the pawns of a player.\n\nArgs:\n    player_number (int): The number of the player\n\nReturns:\n    Pawn: The pawn of the current player.",
            "comment_free_code": "def get_player_pawns(self, player_number: int) -> List[Pawn]:\n    \n    pawns = []\n    for pawn in self.pawns:\n        if pawn.player_number == player_number:\n            pawns.append(pawn)\n    return pawns",
            "start_lineno": 206,
            "end_lineno": 221,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 6,
            "gen_code": "def get_player_pawns(self, player_number: int) -> List[Pawn]:\n    return [pawn for pawn in self.pawns if pawn.player_number == player_number]",
            "gen_import": [
                "from typing import List",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_player_pawn",
            "class": "santorinai/board.py.Board",
            "signature": "def get_player_pawn(self, player_number: int, pawn_number: int) -> Pawn:",
            "comment": "Gets a pawn of a player.\n\nArgs:\n    player_number (int): The number of the player\n    pawn_number (int): The number of the pawn to retrieve, 1 or 2.\n\nReturns:\n    Pawn: The pawn of the current player.",
            "comment_free_code": "def get_player_pawn(self, player_number: int, pawn_number: int) -> Pawn:\n    \n    return self.get_player_pawns(player_number)[pawn_number - 1]",
            "start_lineno": 223,
            "end_lineno": 235,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                34
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/get_player_pawns"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 7,
            "gen_code": "def get_player_pawn(self, player_number: int, pawn_number: int) -> Pawn:\n    player_pawns = self.get_player_pawns(player_number)\n    for pawn in player_pawns:\n        if pawn.order == pawn_number:\n            return pawn\n    raise ValueError(f\"No pawn found for player {player_number} with number {pawn_number}\")",
            "gen_import": [
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_playing_pawn",
            "class": "santorinai/board.py.Board",
            "signature": "def get_playing_pawn(self, pawn_number: int) -> Pawn:",
            "comment": "Gets the pawns of the current player.\n\nArgs:\n    pawn_number int: The number of pawns to retrieve, 1 or 2.\n\nReturns:\n    Pawn: The selected pawn of the playing player,\n    None if the given pawn number is invalid.",
            "comment_free_code": "def get_playing_pawn(self, pawn_number: int) -> Pawn:\n    \n    if pawn_number < 1 or pawn_number > 2:\n        return None\n    return self.get_player_pawns(self.player_turn)[pawn_number - 1]",
            "start_lineno": 237,
            "end_lineno": 254,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                34
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/get_player_pawns"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 8,
            "gen_code": "def get_playing_pawn(self, pawn_number: int) -> Pawn:\n    return self.get_player_pawn(self.player_turn, pawn_number)",
            "gen_import": [
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_first_unplaced_player_pawn",
            "class": "santorinai/board.py.Board",
            "signature": "def get_first_unplaced_player_pawn(self, player_number: int) -> Pawn:",
            "comment": "Gets the first unplaced pawn of a player.\n\nArgs:\n    player_number (int): The player number.\n\nReturns:\n    Pawn: The first unplaced pawn of the player.",
            "comment_free_code": "def get_first_unplaced_player_pawn(self, player_number: int) -> Pawn:\n    \n    for pawn in self.pawns:\n        if pawn.player_number == player_number and (pawn.pos[0] is None or pawn.pos[1] is None):\n            return pawn",
            "start_lineno": 256,
            "end_lineno": 270,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 9,
            "gen_code": "def get_first_unplaced_player_pawn(self, player_number: int) -> Pawn:\n    player_pawns = self.get_player_pawns(player_number)\n    for pawn in player_pawns:\n        if pawn.pos == (None, None):\n            return pawn\n    raise ValueError(f\"All pawns for player {player_number} are already placed\")",
            "gen_import": [
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_possible_movement_positions",
            "class": "santorinai/board.py.Board",
            "signature": "def get_possible_movement_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:",
            "comment": "Gets all the possible moves for a given pawn.\n\nArgs:\n    pawn (Pawn): The pawn for which to get the possible moves.\n\nReturns:\n    list: A list of all the possible moves for the given pawn.",
            "comment_free_code": "def get_possible_movement_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:\n    \n    possible_moves = []\n    if pawn.pos[0] is None or pawn.pos[1] is None:\n        for x in range(self.board_size):\n            for y in range(self.board_size):\n                if self.board[x][y] != 4 and (not self.is_pawn_on_position((x, y))):\n                    possible_moves.append((x, y))\n        return possible_moves\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if x == 0 and y == 0:\n                continue\n            new_pawn_pos = (pawn.pos[0] + x, pawn.pos[1] + y)\n            (move_possible, _) = self.is_move_possible(pawn.pos, new_pawn_pos)\n            if move_possible:\n                possible_moves.append((pawn.pos[0] + x, pawn.pos[1] + y))\n    return possible_moves",
            "start_lineno": 272,
            "end_lineno": 308,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                8,
                32,
                7
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/is_move_possible",
                    "santorinai/board.py/Board/is_pawn_on_position"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 10,
            "gen_code": "def get_possible_movement_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:\n    if pawn.pos == (None, None):\n        return []\n    possible_positions = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            new_x, new_y = pawn.pos[0] + dx, pawn.pos[1] + dy\n            if self.is_position_within_board((new_x, new_y)):\n                is_possible, _ = self.is_move_possible(pawn.pos, (new_x, new_y))\n                if is_possible:\n                    possible_positions.append((new_x, new_y))\n    return possible_positions",
            "gen_import": [
                "from typing import List, Tuple",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_possible_building_positions",
            "class": "santorinai/board.py.Board",
            "signature": "def get_possible_building_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:",
            "comment": "Gets all the possible builds for a given pawn, supposing it has already moved.\n\nArgs:\n    pawn (Pawn): The pawn for which to get the possible builds.\n\nReturns:\n    list: A list of all the possible builds for the given pawn.",
            "comment_free_code": "def get_possible_building_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:\n    \n    if pawn.pos[0] is None or pawn.pos[1] is None:\n        return []\n    possible_builds = []\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if x == 0 and y == 0:\n                continue\n            (build_possible, _) = self.is_build_possible(pawn.pos, (pawn.pos[0] + x, pawn.pos[1] + y))\n            if build_possible:\n                possible_builds.append((pawn.pos[0] + x, pawn.pos[1] + y))\n    return possible_builds",
            "start_lineno": 310,
            "end_lineno": 337,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                10
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/is_build_possible"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 11,
            "gen_code": "def get_possible_building_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:\n    possible_positions = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            build_pos = (pawn.pos[0] + dx, pawn.pos[1] + dy)\n            if self.is_build_possible(pawn.pos, build_pos):\n                possible_positions.append(build_pos)\n    return possible_positions",
            "gen_import": [
                "from typing import List, Tuple",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/get_possible_movement_and_building_positions",
            "class": "santorinai/board.py.Board",
            "signature": "def get_possible_movement_and_building_positions(self, pawn: Pawn):",
            "comment": "Gets all the possible moves and builds for a given pawn.\n:param pawn: The pawn for which to get the possible moves and builds.\n:return: A list of all the possible moves and builds for the given pawn.\n[(move_position, build_position), ...]",
            "comment_free_code": "def get_possible_movement_and_building_positions(self, pawn: Pawn):\n    \n    if pawn.pos[0] is None or pawn.pos[1] is None:\n        possible_spawn_positions = self.get_possible_movement_positions(pawn)\n        return [(position, None) for position in possible_spawn_positions]\n    possible_moves_and_builds = []\n    original_position = (pawn.pos[0], pawn.pos[1])\n    possible_moves = self.get_possible_movement_positions(pawn)\n    for move in possible_moves:\n        pawn.move(move)\n        possible_builds = self.get_possible_building_positions(pawn)\n        for build in possible_builds:\n            possible_moves_and_builds.append((move, build))\n    pawn.move(original_position)\n    return possible_moves_and_builds",
            "start_lineno": 339,
            "end_lineno": 365,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                19,
                38,
                39
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_positions",
                    "santorinai/board.py/Board/get_possible_building_positions"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/pawn.py/Pawn/move"
                ],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 12,
            "gen_code": "def get_possible_movement_and_building_positions(self, pawn: Pawn) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:\n    possible_moves = self.get_possible_movement_positions(pawn)\n    possible_moves_and_builds = []\n    for move in possible_moves:\n        temp_pawn = pawn.copy()\n        temp_pawn.move(move)\n        possible_builds = self.get_possible_building_positions(temp_pawn)\n        for build in possible_builds:\n            possible_moves_and_builds.append((move, build))\n    return possible_moves_and_builds",
            "gen_import": [
                "from typing import List, Tuple",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/place_pawn",
            "class": "santorinai/board.py.Board",
            "signature": "def place_pawn(self, position: Tuple[int, int]) -> Tuple[bool, str]:",
            "comment": "Places a pawn on the board.\n\nArgs:\n    position (tuple): The position [x, y] to place the pawn.\n\nReturns:\n    bool: True if the pawn was placed, False otherwise.\n    str: A string describing why the pawn was not placed.",
            "comment_free_code": "def place_pawn(self, position: Tuple[int, int]) -> Tuple[bool, str]:\n    \n    if self.is_game_over():\n        return (False, 'The game is over.')\n    unplaced_pawns = self.get_first_unplaced_player_pawn(self.player_turn)\n    if unplaced_pawns is None:\n        return (False, 'All the pawns have already been placed.')\n    (ok, msg) = self.is_position_valid(position)\n    if not ok:\n        return (False, msg)\n    if self.is_pawn_on_position(position):\n        return (False, 'The position is already occupied by another pawn.')\n    unplaced_pawns.pos = position\n    self.next_turn()\n    return (True, 'The pawn was placed.')",
            "start_lineno": 367,
            "end_lineno": 402,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                37,
                7,
                42,
                12,
                13
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/get_first_unplaced_player_pawn",
                    "santorinai/board.py/Board/is_pawn_on_position",
                    "santorinai/board.py/Board/is_game_over",
                    "santorinai/board.py/Board/is_position_valid",
                    "santorinai/board.py/Board/next_turn"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 13,
            "gen_code": "def place_pawn(self, position: Tuple[int, int]) -> Tuple[bool, str]:\n    if not self.is_position_valid(position):\n        return False, \"Invalid position\"\n    \n    pawn = self.get_first_unplaced_player_pawn(self.player_turn)\n    if pawn is None:\n        return False, \"No unplaced pawns for the current player\"\n    \n    if self.is_pawn_on_position(position):\n        return False, \"Position already occupied by another pawn\"\n    \n    pawn.move(position)\n    self.next_turn()\n    return True, \"Pawn placed successfully\"",
            "gen_import": [
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/play_move",
            "class": "santorinai/board.py.Board",
            "signature": "def play_move(self, pawn_number: int, move_position: Tuple[int, int], build_position: Tuple[int, int]) -> Tuple[bool, str]:",
            "comment": "Plays a move on the board with the chosen playing pawn.\n\nArgs:\n    pawn_number (int): Number of the pawn to play with (1 or 2).\n    move_position (tuple): The position (x, y) to move the pawn to.\n    build_position (tuple): The position (x, y) to build a tower on.\n\nReturns:\n    bool: True if the move was played, False otherwise.\n    str: A string describing why the move was not played.",
            "comment_free_code": "def play_move(self, pawn_number: int, move_position: Tuple[int, int], build_position: Tuple[int, int]) -> Tuple[bool, str]:\n    \n    if not isinstance(pawn_number, int):\n        return (False, 'The pawn number is not an integer.')\n    if pawn_number < 1 or pawn_number > 2:\n        return (False, 'The pawn number is invalid (must be 1 or 2).')\n    unplaced_pawns = self.get_first_unplaced_player_pawn(self.player_turn)\n    if unplaced_pawns is not None:\n        return (False, 'All the pawns have not been placed yet.')\n    pawn = self.get_playing_pawn(pawn_number)\n    if self.is_game_over():\n        return (False, 'The game is over.')\n    possible_moves = self.get_possible_movement_positions(pawn)\n    if len(possible_moves) == 0:\n        return (False, 'The selected pawn is stuck.')\n    (position_valid, reason) = self.is_position_valid(move_position)\n    if not position_valid:\n        return (False, reason)\n    (move_possible, reason) = self.is_move_possible(pawn.pos, move_position)\n    if not move_possible:\n        return (False, reason)\n    initial_pos = pawn.pos\n    pawn.move(move_position)\n    if self.board[pawn.pos[0]][pawn.pos[1]] == 3:\n        self.winner_player_number = pawn.player_number\n        return (True, 'The player pawn reached the top of a tower.')\n    (position_valid, reason) = self.is_position_valid(build_position)\n    if not position_valid:\n        pawn.move(initial_pos)\n        return (False, reason)\n    (build_possible, reason) = self.is_build_possible(pawn.pos, build_position)\n    if not build_possible:\n        pawn.move(initial_pos)\n        return (False, reason)\n    self.board[build_position[0]][build_position[1]] += 1\n    if self.is_everyone_stuck():\n        self.winner_player_number = pawn.player_number\n        return (True, 'No one can play, the game is over.')\n    self.next_turn()\n    next_player_pawns = self.get_player_pawns(self.player_turn)\n    next_player_stuck = True\n    for p in next_player_pawns:\n        if len(self.get_possible_movement_positions(p)) > 0:\n            next_player_stuck = False\n            break\n    if next_player_stuck:\n        self.winner_player_number = pawn.player_number\n        return (True, 'The next player is stuck, the game is over.')\n    return (True, 'The move was played.')",
            "start_lineno": 404,
            "end_lineno": 510,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                36,
                37,
                38,
                8,
                41,
                10,
                42,
                12,
                13,
                19
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/get_player_pawns",
                    "santorinai/board.py/Board/get_playing_pawn",
                    "santorinai/board.py/Board/get_first_unplaced_player_pawn",
                    "santorinai/board.py/Board/get_possible_movement_positions",
                    "santorinai/board.py/Board/is_move_possible",
                    "santorinai/board.py/Board/is_everyone_stuck",
                    "santorinai/board.py/Board/is_build_possible",
                    "santorinai/board.py/Board/is_game_over",
                    "santorinai/board.py/Board/is_position_valid",
                    "santorinai/board.py/Board/next_turn"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/pawn.py/Pawn/move"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 14,
            "gen_code": "def play_move(self, pawn_number: int, move_position: Tuple[int, int], build_position: Tuple[int, int]) -> Tuple[bool, str]:\n    pawn = self.get_playing_pawn(pawn_number)\n    if pawn is None:\n        return False, \"Invalid pawn number\"\n    \n    move_possible, move_message = self.is_move_possible(pawn.pos, move_position)\n    if not move_possible:\n        return False, move_message\n    \n    if not self.is_build_possible(move_position, build_position):\n        return False, \"Invalid build position\"\n    \n    old_pos = pawn.pos\n    pawn.move(move_position)\n    self.board[old_pos[0]][old_pos[1]] = 0\n    self.board[build_position[0]][build_position[1]] += 1\n    \n    if self.board[move_position[0]][move_position[1]] == 3:\n        self.winner_player_number = self.player_turn\n    \n    self.next_turn()\n    return True, \"Move played successfully\"",
            "gen_import": [
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_position_valid",
            "class": "santorinai/board.py.Board",
            "signature": "def is_position_valid(self, pos: Tuple[int, int]):",
            "comment": "Checks if a pos is valid.\n\nArgs:\n    pos (tuple): The position to check.\n\nReturns:\n    bool: True if the position is valid, False otherwise.\n    str: A string describing why the pos is not valid.",
            "comment_free_code": "def is_position_valid(self, pos: Tuple[int, int]):\n    \n    if not isinstance(pos, tuple):\n        return (False, 'The position is not a tuple, but a {}.'.format(type(pos)))\n    if len(pos) != 2:\n        return (False, 'The position is not a coordinate, it but has {} dim.'.format(len(pos)))\n    if not isinstance(pos[0], int) or not isinstance(pos[1], int):\n        return (False, 'Not all the coordinates are integers: {}.'.format(pos))\n    if not self.is_position_within_board(pos):\n        return (False, 'The position is not within the board bounds.')\n    return (True, 'The position is valid.')",
            "start_lineno": 512,
            "end_lineno": 541,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                4
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/is_position_within_board"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 15,
            "gen_code": "def is_position_valid(self, pos: Tuple[int, int]) -> bool:\n    if not self.is_position_within_board(pos):\n        return False\n    x, y = pos\n    return self.board[x][y] < 4",
            "gen_import": [
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_game_over",
            "class": "santorinai/board.py.Board",
            "signature": "def is_game_over(self):",
            "comment": "Checks if the game is over.\n\nReturns:\n    bool: True if the game is over, False otherwise.",
            "comment_free_code": "def is_game_over(self):\n    \n    if self.winner_player_number is not None:\n        return True\n    if self.is_everyone_stuck():\n        return True",
            "start_lineno": 543,
            "end_lineno": 554,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                41
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/is_everyone_stuck"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 16,
            "gen_code": "def is_game_over(self):\n    # Check if any pawn has reached the top of a tower\n    for pawn in self.pawns:\n        if pawn.pos and self.board[pawn.pos[0]][pawn.pos[1]] == 3:\n            self.winner_player_number = pawn.player_number\n            return True\n    \n    # Check if all players are stuck\n    if self.is_everyone_stuck():\n        # The winner is the last player who was able to move\n        self.winner_player_number = self.player_turn - 1 if self.player_turn > 1 else self.nb_players\n        return True\n    \n    return False",
            "gen_import": [
                "from typing import List, Tuple",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/is_everyone_stuck",
            "class": "santorinai/board.py.Board",
            "signature": "def is_everyone_stuck(self):",
            "comment": "Checks if everyone is stuck.\n\nReturns:\n    bool: True if everyone is stuck, False otherwise.",
            "comment_free_code": "def is_everyone_stuck(self):\n    \n    for pawn in self.pawns:\n        if len(self.get_possible_movement_positions(pawn)) > 0:\n            return False\n    return True",
            "start_lineno": 556,
            "end_lineno": 567,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                38
            ],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_positions"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 17,
            "gen_code": "def is_everyone_stuck(self):\n    for player in range(1, self.nb_players + 1):\n        player_pawns = self.get_player_pawns(player)\n        for pawn in player_pawns:\n            if pawn.pos and self.get_possible_movement_positions(pawn):\n                return False\n    return True",
            "gen_import": [
                "from typing import List",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/next_turn",
            "class": "santorinai/board.py.Board",
            "signature": "def next_turn(self):",
            "comment": "Changes the turn.",
            "comment_free_code": "def next_turn(self):\n    \n    self.player_turn += 1\n    if self.player_turn > self.nb_players:\n        self.player_turn = 1\n    self.turn_number += 1",
            "start_lineno": 569,
            "end_lineno": 577,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 18,
            "gen_code": "def next_turn(self):\n    self.player_turn = (self.player_turn % self.nb_players) + 1\n    self.turn_number += 1",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/copy",
            "class": "santorinai/board.py.Board",
            "signature": "def copy(self) -> \"Board\":",
            "comment": "Creates a copy of the board.\n\nReturns:\n    Board: A copy of the board.",
            "comment_free_code": "def copy(self) -> 'Board':\n    \n    board_copy = Board(self.nb_players)\n    for x in range(self.board_size):\n        for y in range(self.board_size):\n            board_copy.board[x][y] = self.board[x][y]\n    board_copy.pawns = [pawn.copy() for pawn in self.pawns]\n    board_copy.turn_number = self.turn_number\n    board_copy.winner_player_number = self.winner_player_number\n    return board_copy",
            "start_lineno": 579,
            "end_lineno": 601,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 19,
            "gen_code": "def copy(self) -> \"Board\":\n    new_board = Board(self.nb_players)\n    new_board.board = deepcopy(self.board)\n    new_board.pawns = [pawn.copy() for pawn in self.pawns]\n    new_board.player_turn = self.player_turn\n    new_board.turn_number = self.turn_number\n    new_board.winner_player_number = self.winner_player_number\n    return new_board",
            "gen_import": [
                "from copy import deepcopy",
                "from santorinai.pawn import Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board.py",
            "relative_path": "santorinai/board.py",
            "fqn_list": "santorinai/board.py/Board/__repr__",
            "class": "santorinai/board.py.Board",
            "signature": "def __repr__(self) -> str:",
            "comment": "Returns a string representation of the board.\n\nReturns:\n    str: A string representation of the board.",
            "comment_free_code": "def __repr__(self) -> str:\n    \n    output = '\\n'\n    for y in range(self.board_size - 1, -1, -1):\n        for x in range(self.board_size):\n            pawn = None\n            for p in self.pawns:\n                if p.pos == (x, y):\n                    pawn = p\n                    break\n            pawn_number = str(pawn.number) if pawn is not None else '_'\n            output += pawn_number + str(self.board[x][y]) + ' '\n        output += '\\n'\n    return output",
            "start_lineno": 603,
            "end_lineno": 624,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "santorinai/board.py",
                    "from typing import List",
                    "typing.List"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 20,
            "gen_code": "def __repr__(self) -> str:\n    board_str = \"\"\n    for row in self.board:\n        board_str += \" \".join(str(cell) for cell in row) + \"\\n\"\n    \n    pawn_positions = {(pawn.pos[0], pawn.pos[1]): f\"P{pawn.player_number}\" for pawn in self.pawns if pawn.pos}\n    \n    for i, row in enumerate(self.board):\n        row_str = \"\"\n        for j, cell in enumerate(row):\n            if (i, j) in pawn_positions:\n                row_str += f\"{pawn_positions[(i, j)]:2} \"\n            else:\n                row_str += f\"{cell:2} \"\n        board_str += row_str + \"\\n\"\n    \n    return f\"Board State:\\n{board_str}\\nPlayer Turn: {self.player_turn}\\nTurn Number: {self.turn_number}\"",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player.py",
            "relative_path": "santorinai/player.py",
            "fqn_list": "santorinai/player.py/Player/__init__",
            "class": "santorinai/player.py.Player",
            "signature": "def __init__(self, player_number: int, log_level = 0) -> None:",
            "comment": null,
            "comment_free_code": "def __init__(self, player_number: int, log_level=0) -> None:\n    self.log_level = log_level\n    self.player_number = player_number",
            "start_lineno": 13,
            "end_lineno": 15,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "santorinai/player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 21,
            "gen_code": "def __init__(self, player_number: int, log_level = 0) -> None:\n    self.player_number = player_number\n    self.log_level = log_level",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player.py",
            "relative_path": "santorinai/player.py",
            "fqn_list": "santorinai/player.py/Player/name",
            "class": "santorinai/player.py.Player",
            "signature": "def name(self):",
            "comment": "The name of the player",
            "comment_free_code": "@abstractmethod\ndef name(self):\n    \n    pass",
            "start_lineno": 18,
            "end_lineno": 22,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "santorinai/player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 22,
            "gen_code": "def name(self):\n    return self.player_name",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player.py",
            "relative_path": "santorinai/player.py",
            "fqn_list": "santorinai/player.py/Player/place_pawn",
            "class": "santorinai/player.py.Player",
            "signature": "def place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:",
            "comment": "Place a pawn given a board\n:param board: the board\n:param pawn: the pawn that needs to be placed\n:return: a position of the form (x, y)\n\nReturn example: (2, 2) means that the player wants to place\nhis pawn at the center of the board",
            "comment_free_code": "@abstractmethod\ndef place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:\n    \n    pass",
            "start_lineno": 25,
            "end_lineno": 35,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                45
            ],
            "local_import": [
                [
                    "santorinai/player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "santorinai/player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn",
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 23,
            "gen_code": "def place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:\n    possible_positions = board.get_possible_movement_positions(pawn)\n    if not possible_positions:\n        raise ValueError(\"No valid positions available for pawn placement.\")\n    chosen_position = possible_positions[0]  # Choose the first available position\n    success, message = board.place_pawn(chosen_position)\n    if not success:\n        raise ValueError(f\"Failed to place pawn: {message}\")\n    return chosen_position",
            "gen_import": [
                "from typing import Tuple",
                "from santorinai import Board, Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player.py",
            "relative_path": "santorinai/player.py",
            "fqn_list": "santorinai/player.py/Player/play_move",
            "class": "santorinai/player.py.Player",
            "signature": "def play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:",
            "comment": "Choose a pawn and play a move given a board\n:param board: the board\n:return: two positions of the form (x1, y1), (x2, y2)\n\nThe first coordinate corresponds to the new position of the pawn\nThe second coordinate corresponds to the position of the construction\nof the tower\n\nReturn example: (2, 2), (2, 3) means that the player wants to move the\npawn at center of the board and build a tower one tile above",
            "comment_free_code": "@abstractmethod\ndef play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:\n    \n    pass",
            "start_lineno": 38,
            "end_lineno": 51,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                45
            ],
            "local_import": [
                [
                    "santorinai/player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "santorinai/player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 24,
            "gen_code": "def play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:\n    my_pawn_1 = board.get_playing_pawn(1)\n    my_pawn_2 = board.get_playing_pawn(2)\n\n    # Randomly choose which pawn to move\n    pawn_to_move = random.choice([my_pawn_1, my_pawn_2])\n\n    # Get possible moves for the chosen pawn\n    possible_moves = board.get_possible_movement_and_building_positions(pawn_to_move)\n\n    if not possible_moves:\n        return None, None, None\n\n    # Randomly choose a move from the possible moves\n    move, build = random.choice(possible_moves)\n\n    return pawn_to_move.order, move, build",
            "gen_import": [
                "from typing import Tuple",
                "from santorinai import Board, Pawn",
                "import random"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/pawn.py",
            "relative_path": "santorinai/pawn.py",
            "fqn_list": "santorinai/pawn.py/Pawn/__init__",
            "class": "santorinai/pawn.py.Pawn",
            "signature": "def __init__(self, number: int, order: int, player_number: int):",
            "comment": "Initialize a pawn\n:param number: the number of the pawn (1 to 6 depending on the number of pawns)\n:param order: the order of the pawn (1 or 2)\n:param player_number: the player number of the pawn (1, 2 or 3\n    depending on players number)",
            "comment_free_code": "def __init__(self, number: int, order: int, player_number: int):\n    \n    if not 1 <= number <= 6:\n        raise ValueError('The number of the pawn should be between 1 and 6')\n    if order not in [1, 2]:\n        raise ValueError(f'The order of the pawn should be 1 or 2, not {order}')\n    if player_number not in [1, 2, 3]:\n        raise ValueError('The player number of the pawn should be 1, 2 or 3')\n    self.number = number\n    self.order = order\n    self.player_number = player_number\n    self.pos = (None, None)",
            "start_lineno": 5,
            "end_lineno": 27,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/pawn.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 25,
            "gen_code": "def __init__(self, number: int, order: int, player_number: int):\n    self.number = number\n    self.order = order\n    self.player_number = player_number\n    self.pos: Tuple[int, int] | None = None",
            "gen_import": [
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/pawn.py",
            "relative_path": "santorinai/pawn.py",
            "fqn_list": "santorinai/pawn.py/Pawn/move",
            "class": "santorinai/pawn.py.Pawn",
            "signature": "def move(self, new_pos: Tuple[int, int]):",
            "comment": "Move the pawn to the new position\n:param new_pos: the new position of the pawn",
            "comment_free_code": "def move(self, new_pos: Tuple[int, int]):\n    \n    self.pos = new_pos",
            "start_lineno": 29,
            "end_lineno": 34,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/pawn.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 26,
            "gen_code": "def move(self, new_pos: Tuple[int, int]):\n    if isinstance(new_pos, tuple) and len(new_pos) == 2:\n        self.pos = new_pos\n    else:\n        raise ValueError(\"Invalid position. Expected a tuple of two integers.\")",
            "gen_import": [
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/pawn.py",
            "relative_path": "santorinai/pawn.py",
            "fqn_list": "santorinai/pawn.py/Pawn/copy",
            "class": "santorinai/pawn.py.Pawn",
            "signature": "def copy(self) -> \"Pawn\":",
            "comment": "Return a copy of the pawn\n:return: a copy of the pawn",
            "comment_free_code": "def copy(self) -> 'Pawn':\n    \n    new_pawn = Pawn(self.number, self.order, self.player_number)\n    new_pawn.pos = self.pos\n    return new_pawn",
            "start_lineno": 36,
            "end_lineno": 43,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/pawn.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 27,
            "gen_code": "def copy(self) -> \"Pawn\":\n    new_pawn = Pawn(self.number, self.order, self.player_number)\n    new_pawn.pos = self.pos\n    return new_pawn",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/pawn.py",
            "relative_path": "santorinai/pawn.py",
            "fqn_list": "santorinai/pawn.py/Pawn/__repr__",
            "class": "santorinai/pawn.py.Pawn",
            "signature": "def __repr__(self):",
            "comment": null,
            "comment_free_code": "def __repr__(self):\n    return f'pawn n\u00b0{self.order} of player {self.player_number} at position {self.pos}'",
            "start_lineno": 45,
            "end_lineno": 48,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/pawn.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 28,
            "gen_code": "def __repr__(self):\n    return f\"Pawn(number={self.number}, order={self.order}, player_number={self.player_number}, pos={self.pos})\"",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board_displayer/board_displayer.py",
            "relative_path": "santorinai/board_displayer/board_displayer.py",
            "fqn_list": "santorinai/board_displayer/board_displayer.py/init_window",
            "class": null,
            "signature": "def init_window(player_names):",
            "comment": null,
            "comment_free_code": "def init_window(player_names):\n    tile = player_names[0]\n    for player_name in player_names[1:]:\n        tile += f' VS {player_name} '\n    layout = [[sg.Text(tile, font=('Helvetica', 20), justification='center')], [sg.Graph((SIZE_X, SIZE_Y + 100), (0, 0), (SIZE_X, SIZE_Y + 100), key='-GRAPH-', change_submits=True)]]\n    window = sg.Window('Game Board', layout, finalize=True)\n    return window",
            "start_lineno": 34,
            "end_lineno": 52,
            "local_variables": {
                "module": [
                    "SIZE = 5",
                    "pawns_colors = {",
                    "1: \"grey\",",
                    "2: \"blue\",",
                    "3: \"white\",",
                    "}",
                    "SIZE_X = 800",
                    "SIZE_Y = 300",
                    "TILE_SIZE = SIZE_X / 5",
                    "board = Board(2)",
                    "window = init_window()",
                    "exit = update_board(board, window)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "import PySimpleGUI as sg",
                    "PySimpleGUI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 29,
            "gen_code": "def init_window(player_names):\n    sg.theme('DarkBlue3')\n    layout = [\n        [sg.Text(f'Player 1: {player_names[0]}', font=('Helvetica', 20))],\n        [sg.Text(f'Player 2: {player_names[1]}', font=('Helvetica', 20))],\n        [sg.Graph((SIZE_X, SIZE_Y), (0, 0), (SIZE_X, SIZE_Y), key='graph')],\n        [sg.Button('Exit')]\n    ]\n    return sg.Window('Santorini Board', layout, finalize=True)",
            "gen_import": [
                "import PySimpleGUI as sg"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board_displayer/board_displayer.py",
            "relative_path": "santorinai/board_displayer/board_displayer.py",
            "fqn_list": "santorinai/board_displayer/board_displayer.py/draw_isometric_cube",
            "class": null,
            "signature": "def draw_isometric_cube(window: sg.Window, x, y, size, cube_heigth, color, line_color, line_width):",
            "comment": "Draw an isometric cube on the given PySimpleGUI window.\n:param window: The PySimpleGUI window object to draw on.\n:param x: The x-coordinate of the cube.\n:param y: The y-coordinate of the cube.\n:param size: The size of the cube.\n:param color: The fill color of the cube.\n:param line_color: The color of the cube's outline.",
            "comment_free_code": "def draw_isometric_cube(window: sg.Window, x, y, size, cube_heigth, color, line_color, line_width):\n    \n    graph = window['-GRAPH-']\n    if graph is None:\n        return\n    ratio = SIZE_X / SIZE_Y\n    AY = y + size / ratio\n    B2Y = y - size / ratio\n    B1Y = B3Y = y\n    C2Y = B2Y - cube_heigth\n    C1Y = C3Y = B1Y - cube_heigth\n    AX = B2X = C2X = x\n    B1X = C1X = x - size\n    B3X = C3X = x + size\n    graph.draw_polygon([(B1X, B1Y), (B2X, B2Y), (C2X, C2Y), (C1X, C1Y)], line_color=line_color, fill_color=color, line_width=line_width)\n    graph.draw_polygon([(B3X, B3Y), (B2X, B2Y), (C2X, C2Y), (C3X, C3Y)], line_color=line_color, fill_color=color, line_width=line_width)\n    graph.draw_polygon([(B1X, B1Y), (B2X, B2Y), (B3X, B3Y), (AX, AY)], line_color=line_color, fill_color=color, line_width=line_width)",
            "start_lineno": 55,
            "end_lineno": 116,
            "local_variables": {
                "module": [
                    "SIZE = 5",
                    "pawns_colors = {",
                    "1: \"grey\",",
                    "2: \"blue\",",
                    "3: \"white\",",
                    "}",
                    "SIZE_X = 800",
                    "SIZE_Y = 300",
                    "TILE_SIZE = SIZE_X / 5",
                    "board = Board(2)",
                    "window = init_window()",
                    "exit = update_board(board, window)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "import PySimpleGUI as sg",
                    "PySimpleGUI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 30,
            "gen_code": "def draw_isometric_cube(window: sg.Window, x, y, size, cube_height, color, line_color, line_width):\n    graph = window['graph']\n    angle = math.pi / 6\n    cos_angle = math.cos(angle)\n    sin_angle = math.sin(angle)\n\n    # Calculate points\n    points = [\n        (x, y),\n        (x + size * cos_angle, y + size * sin_angle),\n        (x + size * cos_angle * 2, y),\n        (x + size * cos_angle, y - size * sin_angle)\n    ]\n\n    # Draw base\n    graph.draw_polygon(points, fill_color=color, line_color=line_color, line_width=line_width)\n\n    # Draw top\n    top_points = [(p[0], p[1] - cube_height) for p in points]\n    graph.draw_polygon(top_points, fill_color=color, line_color=line_color, line_width=line_width)\n\n    # Draw sides\n    for i in range(4):\n        graph.draw_line(points[i], top_points[i], color=line_color, width=line_width)\n\n    # Draw top lines\n    graph.draw_line(top_points[0], top_points[1], color=line_color, width=line_width)\n    graph.draw_line(top_points[1], top_points[2], color=line_color, width=line_width)",
            "gen_import": [
                "import PySimpleGUI as sg",
                "import math"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board_displayer/board_displayer.py",
            "relative_path": "santorinai/board_displayer/board_displayer.py",
            "fqn_list": "santorinai/board_displayer/board_displayer.py/update_board",
            "class": null,
            "signature": "def update_board(window: sg.Window, board: Board):",
            "comment": null,
            "comment_free_code": "def update_board(window: sg.Window, board: Board):\n    graph = window['-GRAPH-']\n    graph.erase()\n    graph.draw_polygon(((-10, SIZE_Y / 2), (SIZE_X / 2, -10), (10 + SIZE_X, SIZE_Y / 2), (SIZE_X / 2, SIZE_Y + 5)), line_color='black', fill_color='white', line_width=0)\n    for i in range(SIZE - 1, -1, -1):\n        for j in range(SIZE - 1, -1, -1):\n            level = board.board[i][j]\n            x = (j - i) * TILE_SIZE / 2 + SIZE_X / 2\n            y = (j + i) * TILE_SIZE / 5.2 + 25\n            if level >= 0:\n                color = 'light grey'\n                line_width = 2\n                line_color = 'black'\n                cube_size = TILE_SIZE / 2 - 10\n                cube_heigth = 0\n            draw_isometric_cube(window, x, y, cube_size, cube_heigth, color, line_color, line_width)\n            if level >= 1:\n                color = '\n                line_width = 2\n                line_color = 'black'\n                cube_size = TILE_SIZE / 2 - 25\n                cube_heigth = TILE_SIZE / 5\n                y += cube_heigth\n            draw_isometric_cube(window, x, y, cube_size, cube_heigth, color, line_color, line_width)\n            if level >= 2:\n                color = '\n                line_width = 2\n                line_color = 'black'\n                cube_size = TILE_SIZE / 2 - 30\n                cube_heigth = TILE_SIZE / 6\n                y += cube_heigth\n            draw_isometric_cube(window, x, y, cube_size, cube_heigth, color, line_color, line_width)\n            if level >= 3:\n                color = '\n                line_width = 2\n                line_color = 'black'\n                cube_size = TILE_SIZE / 2 - 35\n                cube_heigth = TILE_SIZE / 8\n                y += cube_heigth\n            draw_isometric_cube(window, x, y, cube_size, cube_heigth, color, line_color, line_width)\n            if level >= 4:\n                color = 'blue'\n                line_width = 2\n                line_color = 'black'\n                cube_size = TILE_SIZE / 2 - 45\n                cube_heigth = TILE_SIZE / 10\n                y += cube_heigth\n            draw_isometric_cube(window, x, y, cube_size, cube_heigth, color, line_color, line_width)\n            for pawn in board.pawns:\n                (x, y) = pawn.pos\n                if (x, y) == (None, None):\n                    continue\n                if (x, y) != (i, j):\n                    continue\n                level = board.board[x][y]\n                PAWN_SIZE = 50\n                x_pos = (y - x) * TILE_SIZE / 2 + SIZE_X / 2\n                y_pos = (y + x) * TILE_SIZE / 5.2 + cube_heigth * level + PAWN_SIZE\n                color = pawns_colors[pawn.player_number]\n                line_width = 2\n                line_color = 'black'\n                graph.DrawOval((x_pos - 14, y_pos - PAWN_SIZE / 2 - 2), (x_pos + 14, y_pos - PAWN_SIZE / 2 + 8), fill_color='black')\n                graph.DrawOval((x_pos - 14, y_pos - PAWN_SIZE / 2), (x_pos + 14, y_pos + PAWN_SIZE / 2), line_color=line_color, fill_color=color, line_width=line_width)\n                graph.DrawText(pawn.number, (x_pos, y_pos - 3), font='Courier 15', color='white')\n    (event, values) = window.read(timeout=10)\n    if event == sg.WIN_CLOSED:\n        return True\n    return False",
            "start_lineno": 119,
            "end_lineno": 246,
            "local_variables": {
                "module": [
                    "SIZE = 5",
                    "pawns_colors = {",
                    "1: \"grey\",",
                    "2: \"blue\",",
                    "3: \"white\",",
                    "}",
                    "SIZE_X = 800",
                    "SIZE_Y = 300",
                    "TILE_SIZE = SIZE_X / 5",
                    "board = Board(2)",
                    "window = init_window()",
                    "exit = update_board(board, window)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                45,
                23
            ],
            "local_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "import PySimpleGUI as sg",
                    "PySimpleGUI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "santorinai/board_displayer/board_displayer.py/draw_isometric_cube"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 31,
            "gen_code": "def update_board(window: sg.Window, board: Board):\n    graph = window['graph']\n    graph.erase()\n\n    for y in range(5):\n        for x in range(5):\n            pos_x = x * TILE_SIZE + TILE_SIZE / 2\n            pos_y = (4 - y) * TILE_SIZE + TILE_SIZE / 2\n            height = board.board[y][x]\n            color = 'lightblue' if height > 0 else 'lightgrey'\n            draw_isometric_cube(window, pos_x, pos_y, TILE_SIZE / 2, height * 10, color, 'black', 1)\n\n    for pawn in board.pawns:\n        if pawn.pos is not None:\n            x, y = pawn.pos\n            pos_x = x * TILE_SIZE + TILE_SIZE / 2\n            pos_y = (4 - y) * TILE_SIZE + TILE_SIZE / 2\n            height = board.board[y][x]\n            color = pawns_colors[pawn.player_number]\n            draw_isometric_cube(window, pos_x, pos_y - height * 10, TILE_SIZE / 4, 20, color, 'black', 1)\n\n    window.refresh()\n    return window.read(timeout=10)",
            "gen_import": [
                "import PySimpleGUI as sg",
                "from santorinai import Board"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/board_displayer/board_displayer.py",
            "relative_path": "santorinai/board_displayer/board_displayer.py",
            "fqn_list": "santorinai/board_displayer/board_displayer.py/close_window",
            "class": null,
            "signature": "def close_window(window):",
            "comment": null,
            "comment_free_code": "def close_window(window):\n    window.close()",
            "start_lineno": 249,
            "end_lineno": 250,
            "local_variables": {
                "module": [
                    "SIZE = 5",
                    "pawns_colors = {",
                    "1: \"grey\",",
                    "2: \"blue\",",
                    "3: \"white\",",
                    "}",
                    "SIZE_X = 800",
                    "SIZE_Y = 300",
                    "TILE_SIZE = SIZE_X / 5",
                    "board = Board(2)",
                    "window = init_window()",
                    "exit = update_board(board, window)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ]
            ],
            "third_import": [
                [
                    "santorinai/board_displayer/board_displayer.py",
                    "import PySimpleGUI as sg",
                    "PySimpleGUI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 32,
            "gen_code": "def close_window(window):\n    window.close()",
            "gen_import": [
                "import PySimpleGUI as sg"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/first_choice_player.py",
            "relative_path": "santorinai/player_examples/first_choice_player.py",
            "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/__init__",
            "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
            "signature": "def __init__(self, player_number, log_level = 0) -> None:",
            "comment": null,
            "comment_free_code": "def __init__(self, player_number, log_level=0) -> None:\n    super().__init__(player_number, log_level)",
            "start_lineno": 11,
            "end_lineno": 12,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 33,
            "gen_code": "def __init__(self, player_number, log_level = 0) -> None:\n    super().__init__(player_number, log_level)\n    self.player_name = \"First Choice Player\"",
            "gen_import": [
                "from santorinai import Player"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/first_choice_player.py",
            "relative_path": "santorinai/player_examples/first_choice_player.py",
            "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/name",
            "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
            "signature": "def name(self):",
            "comment": null,
            "comment_free_code": "def name(self):\n    return 'Firsty First'",
            "start_lineno": 14,
            "end_lineno": 15,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 34,
            "gen_code": "def name(self):\n    return self.player_name",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/first_choice_player.py",
            "relative_path": "santorinai/player_examples/first_choice_player.py",
            "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/place_pawn",
            "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
            "signature": "def place_pawn(self, board: Board, pawn: Pawn):",
            "comment": null,
            "comment_free_code": "def place_pawn(self, board: Board, pawn: Pawn):\n    available_positions = board.get_possible_movement_positions(pawn)\n    my_choice = available_positions[0]\n    return my_choice",
            "start_lineno": 17,
            "end_lineno": 20,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                45,
                38
            ],
            "local_import": [
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_positions"
                ],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn",
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 35,
            "gen_code": "def place_pawn(self, board: Board, pawn: Pawn):\n    possible_positions = board.get_possible_movement_positions(pawn)\n    if possible_positions:\n        return possible_positions[0]\n    return None",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/first_choice_player.py",
            "relative_path": "santorinai/player_examples/first_choice_player.py",
            "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/play_move",
            "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
            "signature": "def play_move(self, board: Board):",
            "comment": null,
            "comment_free_code": "def play_move(self, board: Board):\n    l_pawns = board.get_player_pawns(self.player_number)\n    pawn = l_pawns[0]\n    available_move_positions = board.get_possible_movement_positions(pawn)\n    if len(available_move_positions) == 0:\n        return (pawn.order, None, None)\n    my_move_choice = available_move_positions[0]\n    pawn.move(my_move_choice)\n    available_build_positions = board.get_possible_building_positions(pawn)\n    if len(available_build_positions) == 0:\n        raise Exception('Pawn cannot build')\n    my_build_choice = available_build_positions[0]\n    return (pawn.order, my_move_choice, my_build_choice)",
            "start_lineno": 22,
            "end_lineno": 47,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                38,
                39,
                45,
                19
            ],
            "local_import": [
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/first_choice_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/board.py/Board/get_player_pawns",
                    "santorinai/board.py/Board/get_possible_movement_positions",
                    "santorinai/board.py/Board/get_possible_building_positions",
                    "santorinai/pawn.py/Pawn/move"
                ],
                "Class Dependency": [
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 36,
            "gen_code": "def play_move(self, board: Board):\n    for pawn_number in [1, 2]:\n        pawn = board.get_playing_pawn(pawn_number)\n        possible_moves = board.get_possible_movement_and_building_positions(pawn)\n        if possible_moves:\n            move_position, build_position = possible_moves[0]\n            return pawn_number, move_position, build_position\n    return None, None, None",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/random_player.py",
            "relative_path": "santorinai/player_examples/random_player.py",
            "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/__init__",
            "class": "santorinai/player_examples/random_player.py.RandomPlayer",
            "signature": "def __init__(self, player_number, log_level = 0) -> None:",
            "comment": null,
            "comment_free_code": "def __init__(self, player_number, log_level=0) -> None:\n    super().__init__(player_number, log_level)",
            "start_lineno": 10,
            "end_lineno": 11,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Player",
                    "santorinai.Player"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Board",
                    "santorinai.Board"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Pawn",
                    "santorinai.Pawn"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from random import choice",
                    "random.choice"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 37,
            "gen_code": "def __init__(self, player_number, log_level = 0) -> None:\n    super().__init__(player_number, log_level)\n    self.player_name = \"Randy Random\"",
            "gen_import": [
                "from santorinai import Player"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/random_player.py",
            "relative_path": "santorinai/player_examples/random_player.py",
            "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/name",
            "class": "santorinai/player_examples/random_player.py.RandomPlayer",
            "signature": "def name(self):",
            "comment": null,
            "comment_free_code": "def name(self):\n    return 'Randy Random'",
            "start_lineno": 13,
            "end_lineno": 14,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Player",
                    "santorinai.Player"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Board",
                    "santorinai.Board"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Pawn",
                    "santorinai.Pawn"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from random import choice",
                    "random.choice"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 38,
            "gen_code": "def name(self):\n    return self.player_name",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/random_player.py",
            "relative_path": "santorinai/player_examples/random_player.py",
            "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/place_pawn",
            "class": "santorinai/player_examples/random_player.py.RandomPlayer",
            "signature": "def place_pawn(self, board: Board, pawn: Pawn):",
            "comment": null,
            "comment_free_code": "def place_pawn(self, board: Board, pawn: Pawn):\n    available_positions = board.get_possible_movement_positions(pawn)\n    my_choice = choice(available_positions)\n    return my_choice",
            "start_lineno": 16,
            "end_lineno": 19,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                45,
                38
            ],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Player",
                    "santorinai.Player"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Board",
                    "santorinai.Board"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Pawn",
                    "santorinai.Pawn"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from random import choice",
                    "random.choice"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_positions"
                ],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn",
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 39,
            "gen_code": "def place_pawn(self, board: Board, pawn: Pawn):\n    possible_positions = board.get_possible_movement_positions(pawn)\n    if possible_positions:\n        return choice(possible_positions)\n    return None",
            "gen_import": [
                "from random import choice"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/random_player.py",
            "relative_path": "santorinai/player_examples/random_player.py",
            "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/play_move",
            "class": "santorinai/player_examples/random_player.py.RandomPlayer",
            "signature": "def play_move(self, board: Board):",
            "comment": null,
            "comment_free_code": "def play_move(self, board: Board):\n    all_possible_pawns_moves = []\n    for pawn in board.get_player_pawns(self.player_number):\n        pawn_moves = board.get_possible_movement_and_building_positions(pawn)\n        all_possible_pawns_moves += [(pawn.order, move, build) for (move, build) in pawn_moves]\n    my_move_choice = choice(all_possible_pawns_moves)\n    return my_move_choice",
            "start_lineno": 21,
            "end_lineno": 33,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                40,
                34,
                45
            ],
            "local_import": [],
            "third_import": [
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Player",
                    "santorinai.Player"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Board",
                    "santorinai.Board"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from santorinai import Pawn",
                    "santorinai.Pawn"
                ],
                [
                    "santorinai/player_examples/random_player.py",
                    "from random import choice",
                    "random.choice"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_and_building_positions",
                    "santorinai/board.py/Board/get_player_pawns"
                ],
                "Class Dependency": [
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 40,
            "gen_code": "def play_move(self, board: Board):\n    my_pawn_1 = board.get_playing_pawn(1)\n    my_pawn_2 = board.get_playing_pawn(2)\n\n    # Choose a random pawn to move\n    pawn_to_move = choice([my_pawn_1, my_pawn_2])\n\n    # Get possible moves for the chosen pawn\n    possible_moves = board.get_possible_movement_and_building_positions(pawn_to_move)\n\n    if not possible_moves:\n        return None, None, None\n\n    # Choose a random move from the possible moves\n    chosen_move = choice(possible_moves)\n\n    return pawn_to_move.order, chosen_move[0], chosen_move[1]",
            "gen_import": [
                "from santorinai import Board, Pawn",
                "from random import choice"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/__init__",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def __init__(self, player_number, log_level = 0) -> None:",
            "comment": null,
            "comment_free_code": "def __init__(self, player_number, log_level=0) -> None:\n    super().__init__(player_number, log_level)",
            "start_lineno": 21,
            "end_lineno": 22,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 41,
            "gen_code": "def __init__(self, player_number: int, log_level: int = 0) -> None:\n    super().__init__(player_number, log_level)\n    self.player_number = player_number\n    self.log_level = log_level\n    self.name_str = \"Basic Player\"\n\n    # Initialize any additional attributes specific to BasicPlayer\n    self.last_move: Tuple[int, Tuple[int, int], Tuple[int, int]] = None\n    self.move_history = []\n\n    if self.log_level > 0:\n        print(f\"Initialized BasicPlayer with player number {self.player_number}\")",
            "gen_import": [
                "from santorinai import Player",
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/name",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def name(self):",
            "comment": null,
            "comment_free_code": "def name(self):\n    return 'Extra BaThick!'",
            "start_lineno": 24,
            "end_lineno": 25,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 42,
            "gen_code": "def name(self):\n    return self.name_str",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_ally_pawn",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def get_ally_pawn(self, board: Board, our_pawn: Pawn) -> Tuple[Pawn, None]:",
            "comment": null,
            "comment_free_code": "def get_ally_pawn(self, board: Board, our_pawn: Pawn) -> Tuple[Pawn, None]:\n    for pawn in board.pawns:\n        if pawn.number != our_pawn.number and pawn.player_number == our_pawn.player_number:\n            return pawn",
            "start_lineno": 27,
            "end_lineno": 33,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                45
            ],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "santorinai/pawn.py/Pawn",
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 43,
            "gen_code": "def get_ally_pawn(self, board: Board, our_pawn: Pawn) -> Tuple[Pawn, None]:\n    ally_pawns = board.get_player_pawns(self.player_number)\n    for pawn in ally_pawns:\n        if pawn.number != our_pawn.number:\n            return pawn\n    return None",
            "gen_import": [
                "from santorinai import Board, Pawn",
                "from typing import Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_enemy_pawns",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def get_enemy_pawns(self, board, our_pawn):",
            "comment": null,
            "comment_free_code": "def get_enemy_pawns(self, board, our_pawn):\n    pawns = []\n    for pawn in board.pawns:\n        if pawn.player_number != our_pawn.player_number:\n            pawns.append(pawn)\n    return pawns",
            "start_lineno": 35,
            "end_lineno": 40,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 44,
            "gen_code": "def get_enemy_pawns(self, board: Board, our_pawn: Pawn) -> List[Pawn]:\n    enemy_pawns = []\n    for player_num in range(1, board.nb_players + 1):\n        if player_num != self.player_number:\n            enemy_pawns.extend(board.get_player_pawns(player_num))\n    return enemy_pawns",
            "gen_import": [
                "from santorinai import Board, Pawn",
                "from typing import List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_winning_moves",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def get_winning_moves(self, board: Board, pawn):",
            "comment": null,
            "comment_free_code": "def get_winning_moves(self, board: Board, pawn):\n    available_positions = board.get_possible_movement_positions(pawn)\n    winning_moves = []\n    for pos in available_positions:\n        if board.board[pos[0]][pos[1]] == 3:\n            winning_moves.append(pos)\n    return winning_moves",
            "start_lineno": 42,
            "end_lineno": 49,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                45,
                38
            ],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_positions"
                ],
                "Class Dependency": [
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 45,
            "gen_code": "def get_winning_moves(self, board: Board, pawn: Pawn) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:\n    winning_moves = []\n    possible_moves = board.get_possible_movement_and_building_positions(pawn)\n\n    for move, build in possible_moves:\n        # Check if the move leads to a win\n        temp_board = board.copy()\n        temp_board.play_move(pawn.order, move, build)\n        if temp_board.is_game_over() and temp_board.winner_player_number == self.player_number:\n            winning_moves.append((move, build))\n\n    return winning_moves",
            "gen_import": [
                "from santorinai import Board, Pawn",
                "from typing import List, Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/place_pawn",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def place_pawn(self, board: Board, pawn):",
            "comment": null,
            "comment_free_code": "def place_pawn(self, board: Board, pawn):\n    ally_pawn = self.get_ally_pawn(board, pawn)\n    available_positions = board.get_possible_movement_positions(pawn)\n    if ally_pawn is None or ally_pawn.pos[0] is None or ally_pawn.pos[1] is not None:\n        return choice(available_positions)\n    for pos in available_positions:\n        if board.is_position_adjacent(pos, ally_pawn.pos):\n            return pos\n    return choice(available_positions)",
            "start_lineno": 51,
            "end_lineno": 68,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                38,
                60,
                45,
                6
            ],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/player_examples/basic_player.py/BasicPlayer/get_ally_pawn"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "santorinai/board.py/Board/get_possible_movement_positions",
                    "santorinai/board.py/Board/is_position_adjacent"
                ],
                "Class Dependency": [
                    "santorinai/board.py/Board"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 46,
            "gen_code": "def place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:\n    possible_positions = board.get_possible_movement_positions(pawn)\n    \n    # Get ally and enemy pawns\n    ally_pawn = self.get_ally_pawn(board, pawn)\n    enemy_pawns = self.get_enemy_pawns(board, pawn)\n    \n    # Strategy: Try to place the pawn as far as possible from enemy pawns\n    # and close to the ally pawn (if placed)\n    best_position = None\n    max_distance_from_enemies = -1\n    \n    for pos in possible_positions:\n        min_distance_from_enemies = float('inf')\n        for enemy in enemy_pawns:\n            if enemy.pos is not None:\n                distance = max(abs(pos[0] - enemy.pos[0]), abs(pos[1] - enemy.pos[1]))\n                min_distance_from_enemies = min(min_distance_from_enemies, distance)\n        \n        if min_distance_from_enemies > max_distance_from_enemies:\n            max_distance_from_enemies = min_distance_from_enemies\n            best_position = pos\n        elif min_distance_from_enemies == max_distance_from_enemies:\n            # If equidistant from enemies, prefer positions closer to ally\n            if ally_pawn and ally_pawn.pos is not None:\n                current_distance_to_ally = max(abs(best_position[0] - ally_pawn.pos[0]), abs(best_position[1] - ally_pawn.pos[1]))\n                new_distance_to_ally = max(abs(pos[0] - ally_pawn.pos[0]), abs(pos[1] - ally_pawn.pos[1]))\n                if new_distance_to_ally < current_distance_to_ally:\n                    best_position = pos\n    \n    if best_position is None:\n        # Fallback to the first available position if no best position found\n        best_position = possible_positions[0] if possible_positions else (0, 0)\n    \n    if self.log_level > 0:\n        print(f\"Placing pawn {pawn.number} at position {best_position}\")\n    \n    return best_position",
            "gen_import": [
                "from typing import Tuple, List",
                "from santorinai import Board, Pawn"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/SantorinAI/santorinai/player_examples/basic_player.py",
            "relative_path": "santorinai/player_examples/basic_player.py",
            "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/play_move",
            "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
            "signature": "def play_move(self, board):",
            "comment": null,
            "comment_free_code": "def play_move(self, board):\n    available_pawns = []\n    best_spot = None\n    best_spot_pawn_idx = None\n    best_spot_level = -2\n    for (idx, pawn) in enumerate(board.get_player_pawns(self.player_number)):\n        if pawn.pos[0] is None or pawn.pos[1] is None:\n            raise Exception('Pawn is not placed yet')\n        available_pawns.append(pawn)\n        available_positions = board.get_possible_movement_positions(pawn)\n        current_level = board.board[pawn.pos[0]][pawn.pos[1]]\n        for pos in available_positions:\n            if board.board[pos[0]][pos[1]] == 3:\n                if self.log_level:\n                    print('Winning move')\n                return (available_pawns[idx].order, pos, (None, None))\n            pos_level = board.board[pos[0]][pos[1]]\n            if pos_level <= current_level + 1 and pos_level > best_spot_level + current_level:\n                best_spot = pos\n                best_spot_pawn_idx = idx\n                best_spot_level = pos_level\n        enemy_pawns = self.get_enemy_pawns(board, pawn)\n        for enemy_pawn in enemy_pawns:\n            winning_moves = self.get_winning_moves(board, enemy_pawn)\n            for winning_move in winning_moves:\n                for available_pos in available_positions:\n                    if board.is_position_adjacent(winning_move, available_pos):\n                        if self.log_level:\n                            print('Preventing opponent from winning')\n                        return (available_pawns[idx].order, available_pos, winning_move)\n    if best_spot:\n        if self.log_level:\n            print('Moving up')\n        best_pawn = available_pawns[best_spot_pawn_idx]\n        best_pawn.move(best_spot)\n        available_build_pos = board.get_possible_building_positions(best_pawn)\n        if available_build_pos:\n            build_choice = choice(available_build_pos)\n        else:\n            build_choice = None\n        return (available_pawns[best_spot_pawn_idx].order, best_spot, build_choice)\n    if self.log_level:\n        print('Random move')\n    pawn = choice(board.get_player_pawns(self.player_number))\n    t_move_build = board.get_possible_movement_and_building_positions(pawn)\n    if t_move_build:\n        t_move_build = choice(t_move_build)\n    else:\n        t_move_build = (None, None)\n    return (pawn.order,) + t_move_build",
            "start_lineno": 70,
            "end_lineno": 146,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                61,
                31
            ],
            "local_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.player import Player",
                    "santorinai.player.Player"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.board import Board",
                    "santorinai.board.Board"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from santorinai.pawn import Pawn",
                    "santorinai.pawn.Pawn"
                ]
            ],
            "third_import": [
                [
                    "santorinai/player_examples/basic_player.py",
                    "from random import choice",
                    "random.choice"
                ],
                [
                    "santorinai/player_examples/basic_player.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "santorinai/player_examples/basic_player.py/BasicPlayer/get_winning_moves",
                    "santorinai/player_examples/basic_player.py/BasicPlayer/get_enemy_pawns"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 47,
            "gen_code": "def play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:\n    # Get our pawns\n    pawn1 = board.get_playing_pawn(1)\n    pawn2 = board.get_playing_pawn(2)\n    \n    # Check for winning moves\n    for pawn in [pawn1, pawn2]:\n        winning_moves = self.get_winning_moves(board, pawn)\n        if winning_moves:\n            move, build = winning_moves[0]\n            if self.log_level > 0:\n                print(f\"Playing winning move with pawn {pawn.order}: Move to {move}, Build at {build}\")\n            return pawn.order, move, build\n    \n    # If no winning moves, use a heuristic approach\n    best_move = None\n    best_score = float('-inf')\n    \n    for pawn in [pawn1, pawn2]:\n        possible_moves = board.get_possible_movement_and_building_positions(pawn)\n        for move, build in possible_moves:\n            score = self.evaluate_move(board, pawn, move, build)\n            if score > best_score:\n                best_score = score\n                best_move = (pawn.order, move, build)\n    \n    if best_move is None:\n        # Fallback to first available move if no move is found\n        for pawn in [pawn1, pawn2]:\n            possible_moves = board.get_possible_movement_and_building_positions(pawn)\n            if possible_moves:\n                best_move = (pawn.order, possible_moves[0][0], possible_moves[0][1])\n                break\n    \n    if best_move is None:\n        # If still no move found, return None to indicate no possible moves\n        return None, None, None\n    \n    if self.log_level > 0:\n        print(f\"Playing move: Pawn {best_move[0]}, Move to {best_move[1]}, Build at {best_move[2]}\")\n    \n    return best_move\n\ndef evaluate_move(self, board: Board, pawn: Pawn, move: Tuple[int, int], build: Tuple[int, int]) -> float:\n    score = 0\n    \n    # Prefer moving up\n    current_height = board.board[pawn.pos[0]][pawn.pos[1]]\n    new_height = board.board[move[0]][move[1]]\n    score += (new_height - current_height) * 10\n    \n    # Prefer building up, but not to level 4\n    build_height = board.board[build[0]][build[1]]\n    if build_height < 3:\n        score += build_height * 5\n    \n    # Prefer moves that block opponents\n    enemy_pawns = self.get_enemy_pawns(board, pawn)\n    for enemy in enemy_pawns:\n        if enemy.pos is not None:\n            if board.is_position_adjacent(move, enemy.pos):\n                score += 3\n            if board.is_position_adjacent(build, enemy.pos):\n                score += 2\n    \n    # Prefer central positions\n    center_x, center_y = 2, 2\n    distance_to_center = max(abs(move[0] - center_x), abs(move[1] - center_y))\n    score -= distance_to_center * 2\n    \n    return score",
            "gen_import": [
                "from typing import Tuple, List",
                "from santorinai import Board, Pawn"
            ]
        }
    ]
}