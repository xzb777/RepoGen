{
    "implementation": [
        {
            "key_id": 9,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/__init__",
            "imports": [
                "from typing import Dict, Type"
            ],
            "code": "def __init__(self):\n    self._instance = None\n    self._dependencies: Dict[Type, object] = {}"
        },
        {
            "key_id": 3,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/__init__",
            "imports": [
                "from nest.core.pynest_container import PyNestContainer",
                "from typing import Union, Type",
                "from nest.core.module_compiler import ModuleCompiler"
            ],
            "code": "def __init__(self, container: PyNestContainer, context_module: Union[Type, None] = None):\n    self._is_initialized = False\n    self._module_compiler = ModuleCompiler()\n    self.container = container\n    self.context_module = context_module"
        },
        {
            "key_id": 30,
            "fqn": "nest/core/pynest_application.py/PyNestApp/__init__",
            "imports": [
                "from fastapi import FastAPI",
                "from nest.core.pynest_container import PyNestContainer"
            ],
            "code": "def __init__(self, container: PyNestContainer, http_server: FastAPI):\n    self._is_listening = False\n    self.container = container\n    self.http_server = http_server"
        },
        {
            "key_id": 55,
            "fqn": "nest/core/decorators/module.py/Module/__init__",
            "imports": [
                "from typing import Optional, List, Type"
            ],
            "code": "def __init__(self, imports: Optional[List[Type]] = None, controllers: Optional[List[Type]] = None, providers: Optional[List[Type]] = None, exports: Optional[List[Type]] = None, is_global: bool = False):\n    self.imports = imports\n    self.controllers = controllers\n    self.providers = providers\n    self.exports = exports\n    self.is_global = is_global"
        },
        {
            "key_id": 63,
            "fqn": "nest/core/database/base_config.py/ConfigFactoryBase/__init__",
            "imports": [],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type"
        },
        {
            "key_id": 66,
            "fqn": "nest/core/database/base_config.py/BaseProvider/__init__",
            "imports": [
                "from typing import Any, Dict"
            ],
            "code": "class BaseProvider:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.config: Dict[str, Any] = {\n            'host': self.host,\n            'db_name': self.db_name,\n            'user': self.user,\n            'password': self.password,\n            'port': self.port\n        }\n\n        def get_engine_url(self) -> str:\n            return f'{self.db_type}://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 68,
            "fqn": "nest/core/database/odm_provider.py/OdmProvider/__init__",
            "imports": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from beanie import Document",
                "from typing import List, Dict, Optional"
            ],
            "code": "class OdmProvider:\n    def __init__(self, db_type: str = 'mongodb', config_params: Dict[str, Optional[str]] = None, document_models: List[Document] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.document_models = document_models\n        self.client = AsyncIOMotorClient(self.config_params['engine_url'])\n\n        def check_document_models(self):\n            if not self.document_models:\n                raise ValueError('No document models provided')"
        },
        {
            "key_id": 70,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict, Optional"
            ],
            "code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict[str, Optional[str]] = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)\n\n        async def get_db(self):\n            db = self.SessionLocal()\n            try:\n                yield db\n            finally:\n                await db.close()"
        },
        {
            "key_id": 74,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/__init__",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict, Optional"
            ],
            "code": "class OrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict[str, Optional[str]] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)\n\n        def get_db(self):\n            db = self.SessionLocal()\n            try:\n                yield db\n            finally:\n                db.close()"
        },
        {
            "key_id": 78,
            "fqn": "nest/core/database/orm_provider.py/AsyncOrmProvider/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict, Optional"
            ],
            "code": "class AsyncOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict[str, Optional[str]] = None, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)\n\n        async def get_db(self):\n            db = self.SessionLocal()\n            try:\n                yield db\n            finally:\n                await db.close()"
        },
        {
            "key_id": 79,
            "fqn": "nest/core/database/odm_config.py/MongoDBConfig/__init__",
            "imports": [
                "from pymongo import MongoClient"
            ],
            "code": "class MongoDBConfig:\n    def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.srv = srv\n\n        self.client = None\n        self.db = None\n\n    def connect(self):\n        try:\n            connection_string = f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}' if self.srv else f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}'\n            self.client = MongoClient(connection_string)\n            self.db = self.client[self.db_name]\n            print('MongoDB connection successful.')\n        except Exception as e:\n            print(f'Error connecting to MongoDB: {e}')"
        },
        {
            "key_id": 81,
            "fqn": "nest/core/database/odm_config.py/ConfigFactory/__init__",
            "imports": [
                "from .odm_config import MongoDBConfig"
            ],
            "code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type.lower() == 'mongodb':\n            return MongoDBConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 83,
            "fqn": "nest/core/database/orm_config.py/PostgresConfig/__init__",
            "imports": [
                "from sqlalchemy import create_engine"
            ],
            "code": "class PostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n    def get_engine_url(self) -> str:\n        return f'postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 85,
            "fqn": "nest/core/database/orm_config.py/MySQLConfig/__init__",
            "imports": [
                "from sqlalchemy import create_engine"
            ],
            "code": "class MySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n    def get_engine_url(self) -> str:\n        return f'mysql+pymysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 87,
            "fqn": "nest/core/database/orm_config.py/SQLiteConfig/__init__",
            "imports": [
                "from sqlalchemy import create_engine"
            ],
            "code": "class SQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n\n    def get_engine_url(self) -> str:\n        return f'sqlite:///{self.db_name}'"
        },
        {
            "key_id": 89,
            "fqn": "nest/core/database/orm_config.py/AsyncSQLiteConfig/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def __init__(self, db_name: str):\n    self.db_name = db_name\n    self.async_engine = create_async_engine(f'sqlite+aiosqlite:///{db_name}')\n    self.AsyncSession = sessionmaker(bind=self.async_engine, expire_on_commit=False, class_='AsyncSession')"
        },
        {
            "key_id": 91,
            "fqn": "nest/core/database/orm_config.py/AsyncPostgresConfig/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port\n    self.async_engine = create_async_engine(f'postgresql+asyncpg://{user}:{password}@{host}:{port}/{db_name}')\n    self.AsyncSession = sessionmaker(bind=self.async_engine, expire_on_commit=False, class_='AsyncSession')"
        },
        {
            "key_id": 93,
            "fqn": "nest/core/database/orm_config.py/AsyncMySQLConfig/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port\n    self.async_engine = create_async_engine(f'mysql+aiomysql://{user}:{password}@{host}:{port}/{db_name}')\n    self.AsyncSession = sessionmaker(bind=self.async_engine, expire_on_commit=False, class_='AsyncSession')"
        },
        {
            "key_id": 95,
            "fqn": "nest/core/database/orm_config.py/ConfigFactory/__init__",
            "imports": [
                "from nest.core.database.orm_config import PostgresConfig",
                "from nest.core.database.orm_config import MySQLConfig",
                "from nest.core.database.orm_config import SQLiteConfig"
            ],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type\n    if db_type == 'postgresql':\n        self.config = PostgresConfig\n    elif db_type == 'mysql':\n        self.config = MySQLConfig\n    elif db_type == 'sqlite':\n        self.config = SQLiteConfig\n    else:\n        raise ValueError(f'Unsupported database type: {db_type}')"
        },
        {
            "key_id": 97,
            "fqn": "nest/core/database/orm_config.py/AsyncConfigFactory/__init__",
            "imports": [
                "from nest.core.database.orm_config import AsyncPostgresConfig",
                "from nest.core.database.orm_config import AsyncMySQLConfig",
                "from nest.core.database.orm_config import AsyncSQLiteConfig"
            ],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type\n    if db_type == 'postgresql':\n        self.config = AsyncPostgresConfig\n    elif db_type == 'mysql':\n        self.config = AsyncMySQLConfig\n    elif db_type == 'sqlite':\n        self.config = AsyncSQLiteConfig\n    else:\n        raise ValueError(f'Unsupported async database type: {db_type}')"
        },
        {
            "key_id": 8,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/__new__",
            "imports": [
                "from typing import Dict, Type"
            ],
            "code": "def __new__(cls):\n    if not hasattr(cls, '_instance') or cls._instance is None:\n        cls._instance = super(PyNestContainer, cls).__new__(cls)\n        cls._dependencies: Dict[Type, object] = {}\n    return cls._instance"
        },
        {
            "key_id": 10,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/modules",
            "imports": [],
            "code": "def modules(self):\n    return list(self._dependencies.values())"
        },
        {
            "key_id": 11,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/module_token_factory",
            "imports": [
                "from typing import Any"
            ],
            "code": "def module_token_factory(self) -> Any:\n    # Assuming module token factory is a mechanism to generate unique identifiers for modules\n    import uuid\n    return uuid.uuid4()"
        },
        {
            "key_id": 12,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/modules_metadata",
            "imports": [],
            "code": "def modules_metadata(self):\n    # Assuming this method returns metadata for all modules\n    metadata = {}\n    for module in self.modules():\n        metadata[module.__class__.__name__] = {\n            'dependencies': getattr(module, '_dependencies', None),\n            'instance': module\n        }\n    return metadata"
        },
        {
            "key_id": 13,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/module_compiler",
            "imports": [],
            "code": "def module_compiler(self):\n    # Assuming this method compiles or validates the modules in some way\n    for module in self.modules():\n        # Perform compilation or validation logic here\n        pass\n    return True"
        },
        {
            "key_id": 14,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/get_instance",
            "imports": [
                "from typing import Type, Dict, Optional, Union"
            ],
            "code": "def get_instance(self, dependency: Type[TProvider], provider: Optional[Union[Type[TProvider], Type[TController]]] = None):\n    if dependency not in self._dependencies:\n        raise ValueError(f'Dependency {dependency.__name__} not found')\n    instance = self._dependencies[dependency]\n    if provider and provider not in self._dependencies:\n        raise ValueError(f'Provider {provider.__name__} not found')\n    return instance"
        },
        {
            "key_id": 15,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_module",
            "imports": [
                "from typing import Dict, Type"
            ],
            "code": "def add_module(self, metaclass) -> Dict[str, Type]:\n    module_name = metaclass.__name__\n    if module_name in self._dependencies:\n        raise ValueError(f'Module {module_name} already exists')\n    self._dependencies[module_name] = metaclass\n    return {module_name: metaclass}"
        },
        {
            "key_id": 16,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/register_module",
            "imports": [
                "from typing import Type"
            ],
            "code": "def register_module(self, module_factory: Type[ModuleFactory]) -> Type[Module]:\n    module = module_factory()\n    self.add_module(module)\n    return module"
        },
        {
            "key_id": 17,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_metadata",
            "imports": [],
            "code": "def add_metadata(self, token: str, module_metadata) -> None:\n    if token not in self._dependencies:\n        raise ValueError(f'Token {token} not found')\n    self._dependencies[token].update(module_metadata)"
        },
        {
            "key_id": 18,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_import",
            "imports": [],
            "code": "def add_import(self, token: str) -> None:\n    if token not in self._dependencies:\n        raise ValueError(f'Token {token} not found')\n    # Assuming the import logic is to simply mark the token as imported\n    self._dependencies[token]['imported'] = True"
        },
        {
            "key_id": 19,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_modules",
            "imports": [
                "from typing import List, Any, Type"
            ],
            "code": "def add_modules(self, modules: List[Any]) -> None:\n    for module in modules:\n        module_instance = module()\n        if module not in self._dependencies:\n            self._dependencies[module] = module_instance\n            if hasattr(module_instance, 'register'):\n                module_instance.register(self)"
        },
        {
            "key_id": 20,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_providers",
            "imports": [
                "from typing import List, Any, Dict, Type"
            ],
            "code": "def add_providers(self, providers: List[Any], module_token: str) -> None:\n    if module_token not in self._dependencies:\n        raise ValueError(f'Module {module_token} not found in container.')\n    module = self._dependencies[module_token]\n    if not hasattr(module, 'providers'):\n        module.providers = {}\n    for provider in providers:\n        provider_instance = provider()\n        module.providers[provider] = provider_instance"
        },
        {
            "key_id": 21,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_provider",
            "imports": [
                "from typing import Type"
            ],
            "code": "def add_provider(self, token: str, provider) -> None:\n    if token not in self._dependencies:\n        raise ValueError(f'Module {token} not found in container.')\n    module = self._dependencies[token]\n    if not hasattr(module, 'providers'):\n        module.providers = {}\n    provider_instance = provider()\n    module.providers[provider] = provider_instance"
        },
        {
            "key_id": 22,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_get_providers",
            "imports": [
                "from typing import List, Any, Dict"
            ],
            "code": "def _get_providers(self, token: str) -> List[Any]:\n    if token not in self._dependencies:\n        raise ValueError(f'Module {token} not found in container.')\n    module = self._dependencies[token]\n    if hasattr(module, 'providers'):\n        return list(module.providers.values())\n    return []"
        },
        {
            "key_id": 23,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_controllers",
            "imports": [
                "from typing import List, Any, Dict, Type"
            ],
            "code": "def add_controllers(self, controllers: List[Any], module_token: str) -> None:\n    if module_token not in self._dependencies:\n        raise ValueError(f'Module {module_token} not found in container.')\n    module = self._dependencies[module_token]\n    if not hasattr(module, 'controllers'):\n        module.controllers = {}\n    for controller in controllers:\n        controller_instance = controller()\n        module.controllers[controller] = controller_instance"
        },
        {
            "key_id": 24,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_add_controller",
            "imports": [
                "from typing import Type, Dict"
            ],
            "code": "def __init__(self):\n    self._instance = None\n    self._dependencies: Dict[Type, object] = {}\n\ndef _add_controller(self, token: str, controller: Type) -> None:\n    if not self._dependencies.get('controllers'):\n        self._dependencies['controllers'] = {}\n    if token not in self._dependencies['controllers']:\n        self._dependencies['controllers'][token] = controller\n    else:\n        raise ValueError(f'Controller with token {token} already exists')"
        },
        {
            "key_id": 25,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_get_controllers",
            "imports": [
                "from typing import List, Any"
            ],
            "code": "def _get_controllers(self, token: str) -> List[Any]:\n    controllers = self._dependencies.get('controllers', {})\n    if token in controllers:\n        return [controllers[token]]\n    else:\n        return []"
        },
        {
            "key_id": 26,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/clear",
            "imports": [],
            "code": "def clear(self):\n    self._dependencies.clear()"
        },
        {
            "key_id": 27,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_related_module",
            "imports": [
                "from typing import Any"
            ],
            "code": "def add_related_module(self, related_module: Any, token: str) -> None:\n    if 'related_modules' not in self._dependencies:\n        self._dependencies['related_modules'] = {}\n    self._dependencies['related_modules'][token] = related_module"
        },
        {
            "key_id": 28,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/get_module_by_key",
            "imports": [
                "from typing import Type"
            ],
            "code": "def get_module_by_key(self, module_key: str) -> Type:\n    modules = self._dependencies.get('modules', {})\n    if module_key in modules:\n        return modules[module_key]\n    else:\n        raise KeyError(f'Module with key {module_key} does not exist')"
        },
        {
            "key_id": 0,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "imports": [],
            "code": "def is_initialized(self):\n    return self._is_initialized"
        },
        {
            "key_id": 1,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "imports": [],
            "code": "def is_initialized(self, value: bool):\n    self._is_initialized = value"
        },
        {
            "key_id": 2,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/init",
            "imports": [
                "from nest.core.pynest_container import PyNestContainer",
                "from nest.core.module_compiler import ModuleCompiler"
            ],
            "code": "def init(self):\n    if not self._is_initialized:\n        self._module_compiler.compile(self.container, self.context_module)\n        self._is_initialized = True"
        },
        {
            "key_id": 4,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/select_context_module",
            "imports": [],
            "code": "def select_context_module(self):\n    if self.context_module is not None:\n        return self.context_module\n    raise ValueError('No context module set')"
        },
        {
            "key_id": 5,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/select",
            "imports": [
                "from typing import TypeVar, Type",
                "T = TypeVar('T')"
            ],
            "code": "def select(self, module: Type[T]) -> T:\n    if self.container.modules.get(module.__name__):\n        return module\n    else:\n        raise ValueError(f'Module {module.__name__} not found')"
        },
        {
            "key_id": 29,
            "fqn": "nest/core/pynest_application.py/PyNestApp/is_listening",
            "imports": [
                "from fastapi import FastAPI",
                "from nest.core.pynest_container import PyNestContainer"
            ],
            "code": "class PyNestApp:\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self._is_listening = False\n        self.container = container\n        self.http_server = http_server\n\n    def is_listening(self) -> bool:\n        return self._is_listening"
        },
        {
            "key_id": 31,
            "fqn": "nest/core/pynest_application.py/PyNestApp/use",
            "imports": [],
            "code": "def use(self, middleware: type, **options) -> 'PyNestApp':\n        # Assuming middleware registration logic\n        self.http_server.middleware('http')(middleware)\n        return self"
        },
        {
            "key_id": 32,
            "fqn": "nest/core/pynest_application.py/PyNestApp/get_server",
            "imports": [],
            "code": "def get_server(self) -> FastAPI:\n        return self.http_server"
        },
        {
            "key_id": 33,
            "fqn": "nest/core/pynest_application.py/PyNestApp/register_routes",
            "imports": [],
            "code": "def register_routes(self):\n        # Example route registration\n        @self.http_server.get('/')\n        async def read_root():\n            return {'Hello': 'World'}\n        # More route registration logic here\n        self._is_listening = True"
        },
        {
            "key_id": 6,
            "fqn": "nest/core/pynest_factory.py/PyNestFactory/create",
            "imports": [
                "from typing import Type, TypeVar",
                "from nest.core.pynest_application import PyNestApp",
                "from nest.core.pynest_container import PyNestContainer",
                "import uvicorn",
                "from fastapi import FastAPI"
            ],
            "code": "ModuleType = TypeVar('ModuleType')\n\nclass PyNestFactory:\n    @staticmethod\n    def create(main_module: Type[ModuleType], **kwargs) -> PyNestApp:\n        container = PyNestContainer()\n        # Module registration and initialization logic here\n        http_server = FastAPI()\n        app = PyNestApp(container, http_server)\n        # More app setup logic here\n        return app"
        },
        {
            "key_id": 7,
            "fqn": "nest/core/pynest_factory.py/PyNestFactory/_create_server",
            "imports": [
                "from fastapi import FastAPI"
            ],
            "code": "def _create_server(**kwargs) -> FastAPI:\n    app = FastAPI(**kwargs)\n    return app"
        },
        {
            "key_id": 34,
            "fqn": "nest/core/decorators/injectable.py/Injectable",
            "imports": [
                "from typing import Callable, Optional, Type"
            ],
            "code": "def Injectable(target_class: Optional[Type] = None, *args, **kwargs) -> Callable:\n    def decorator(cls: Type) -> Type:\n        # Here you can implement the logic for dependency injection\n        return cls\n    if target_class is None:\n        return decorator\n    return decorator(target_class)"
        },
        {
            "key_id": 35,
            "fqn": "nest/core/decorators/controller.py/Controller",
            "imports": [
                "from fastapi import APIRouter"
            ],
            "code": "def Controller(prefix: Optional[str] = None, tag: Optional[str] = None):\n    def decorator(cls: Type) -> Type:\n        cls.router = APIRouter(prefix=prefix, tags=[tag] if tag else [])\n        # Further setup for the controller can be added here\n        return cls\n    return decorator"
        },
        {
            "key_id": 44,
            "fqn": "nest/core/decorators/http_method.py/route",
            "imports": [
                "from enum import Enum",
                "from fastapi import APIRouter",
                "from typing import Callable, Union, List"
            ],
            "code": "class HTTPMethod(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    DELETE = 'DELETE'\n    PUT = 'PUT'\n    PATCH = 'PATCH'\n    HEAD = 'HEAD'\n    OPTIONS = 'OPTIONS'\n\ndef route(http_method: HTTPMethod, route_path: Union[str, List[str]] = '/', **kwargs) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        # Logic to add the route to a FastAPI router\n        return func\n    return decorator"
        },
        {
            "key_id": 45,
            "fqn": "nest/core/decorators/http_method.py/Get",
            "imports": [
                "from typing import Callable, Union, List"
            ],
            "code": "def Get(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable:\n    return route(HTTPMethod.GET, route_path, **kwargs)"
        },
        {
            "key_id": 46,
            "fqn": "nest/core/decorators/http_method.py/Post",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Post(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '__route__'):\n            func.__route__ = []\n        func.__route__.append(('POST', route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 47,
            "fqn": "nest/core/decorators/http_method.py/Delete",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Delete(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '__route__'):\n            func.__route__ = []\n        func.__route__.append(('DELETE', route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 48,
            "fqn": "nest/core/decorators/http_method.py/Put",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Put(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '__route__'):\n            func.__route__ = []\n        func.__route__.append(('PUT', route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 49,
            "fqn": "nest/core/decorators/http_method.py/Patch",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Patch(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '__route__'):\n            func.__route__ = []\n        func.__route__.append(('PATCH', route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 50,
            "fqn": "nest/core/decorators/http_method.py/Head",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Head(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '__route__'):\n            func.__route__ = []\n        func.__route__.append(('HEAD', route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 51,
            "fqn": "nest/core/decorators/http_method.py/Options",
            "imports": [
                "from typing import Callable, Union, List",
                "from fastapi import APIRouter"
            ],
            "code": "def Options(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, 'route_info'):\n            func.route_info = []\n        func.route_info.append(('OPTIONS', route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 52,
            "fqn": "nest/core/decorators/database.py/db_request_handler",
            "imports": [
                "import logging",
                "from sqlalchemy.orm import Session",
                "from contextlib import contextmanager"
            ],
            "code": "logger = logging.getLogger(__name__)\n\n@contextmanager\ndef db_request_handler(func):\n    try:\n        yield\n        func()\n    except Exception as e:\n        logger.error(f'Database request failed: {e}')\n        raise"
        },
        {
            "key_id": 53,
            "fqn": "nest/core/decorators/database.py/async_db_request_handler",
            "imports": [
                "import logging",
                "from contextlib import asynccontextmanager"
            ],
            "code": "logger = logging.getLogger(__name__)\n\n@asynccontextmanager\nasync def async_db_request_handler(func):\n    try:\n        yield\n        await func()\n    except Exception as e:\n        logger.error(f'Async database request failed: {e}')\n        raise"
        },
        {
            "key_id": 54,
            "fqn": "nest/core/decorators/http_code.py/HttpCode",
            "imports": [
                "from fastapi import status"
            ],
            "code": "def HttpCode(status_code: int):\n    def decorator(func):\n        if not hasattr(func, 'status_code'):\n            func.status_code = status_code\n        return func\n    return decorator"
        },
        {
            "key_id": 56,
            "fqn": "nest/core/decorators/module.py/Module/__call__",
            "imports": [
                "from typing import Type, List, Optional"
            ],
            "code": "class Module:\n    def __init__(self, imports: Optional[List[Type]] = None, controllers: Optional[List[Type]] = None, providers: Optional[List[Type]] = None, exports: Optional[List[Type]] = None, is_global: bool = False):\n        self.imports = imports\n        self.controllers = controllers\n        self.providers = providers\n        self.exports = exports\n        self.is_global = is_global\n\n    def __call__(self, cls):\n        cls.is_global = self.is_global\n        cls.imports = self.imports\n        cls.controllers = self.controllers\n        cls.providers = self.providers\n        cls.exports = self.exports\n        return cls"
        },
        {
            "key_id": 57,
            "fqn": "nest/core/decorators/utils.py/get_instance_variables",
            "imports": [
                "from typing import List, Tuple"
            ],
            "code": "def get_instance_variables(cls) -> List[Tuple[str, type]]:\n    return [(var, type(value)) for var, value in cls.__dict__.items() if not var.startswith('__') and not callable(value)]"
        },
        {
            "key_id": 58,
            "fqn": "nest/core/decorators/utils.py/get_non_dependencies_params",
            "imports": [
                "from inspect import signature"
            ],
            "code": "def get_non_dependencies_params(cls) -> dict:\n    sig = signature(cls.__init__)\n    return {k: v.default for k, v in sig.parameters.items() if v.default is not v.empty}"
        },
        {
            "key_id": 59,
            "fqn": "nest/core/decorators/utils.py/parse_dependencies",
            "imports": [
                "from inspect import signature"
            ],
            "code": "def parse_dependencies(cls):\n    sig = signature(cls.__init__)\n    return {k: v.annotation for k, v in sig.parameters.items() if v.annotation is not sig.empty}"
        },
        {
            "key_id": 60,
            "fqn": "nest/core/decorators/class_based_view.py/class_based_view",
            "imports": [
                "from fastapi import APIRouter",
                "from typing import Type, TypeVar, Callable",
                "T = TypeVar('T')"
            ],
            "code": "def class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:\n    _init_cbv(cls)\n    _update_cbv_route_endpoint_signature(cls)\n    for route in cls.__routes__:\n        router.add_api_route(route.path, route.endpoint, response_model=route.response_model, methods=[route.method])\n    return cls"
        },
        {
            "key_id": 61,
            "fqn": "nest/core/decorators/class_based_view.py/_init_cbv",
            "imports": [
                "from typing import Type"
            ],
            "code": "def _init_cbv(cls: Type[Any]) -> None:\n    if not hasattr(cls, '__routes__'):\n        cls.__routes__ = []"
        },
        {
            "key_id": 62,
            "fqn": "nest/core/decorators/class_based_view.py/_update_cbv_route_endpoint_signature",
            "imports": [
                "from fastapi.routing import Route",
                "from starlette.websockets import WebSocketRoute",
                "from typing import Type, Union"
            ],
            "code": "def _update_cbv_route_endpoint_signature(cls: Type[Any], route: Union[Route, WebSocketRoute]) -> None:\n    original_endpoint = route.endpoint\n    def endpoint_wrapper(*args, **kwargs):\n        instance = cls()\n        return original_endpoint(instance, *args, **kwargs)\n    route.endpoint = endpoint_wrapper"
        },
        {
            "key_id": 64,
            "fqn": "nest/core/database/base_config.py/ConfigFactoryBase/get_config",
            "imports": [
                "from typing import Dict"
            ],
            "code": "class ConfigFactoryBase:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self) -> Dict[str, str]:\n        if self.db_type == 'postgresql':\n            return {'engine': 'postgresql+psycopg2', 'host': 'localhost', 'port': '5432', 'username': 'user', 'password': 'password', 'database': 'db_name'}\n        elif self.db_type == 'mongodb':\n            return {'engine': 'mongodb', 'host': 'localhost', 'port': '27017', 'username': 'user', 'password': 'password', 'database': 'db_name'}\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 65,
            "fqn": "nest/core/database/base_config.py/BaseConfig/get_engine_url",
            "imports": [],
            "code": "class BaseConfig:\n    def get_engine_url(self) -> str:\n        raise NotImplementedError('Subclasses must implement this method to return the engine URL')"
        },
        {
            "key_id": 67,
            "fqn": "nest/core/database/base_config.py/BaseProvider/get_engine_url",
            "imports": [
                "from typing import Dict, Any"
            ],
            "code": "class BaseProvider:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.config: Dict[str, Any] = {\n            'host': self.host,\n            'db_name': self.db_name,\n            'user': self.user,\n            'password': self.password,\n            'port': self.port\n        }\n\n    def get_engine_url(self) -> str:\n        return f'{self.db_type}://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 69,
            "fqn": "nest/core/database/odm_provider.py/OdmProvider/check_document_models",
            "imports": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from typing import List, Dict, Optional",
                "from beanie import Document"
            ],
            "code": "class OdmProvider:\n    def __init__(self, db_type: str = 'mongodb', config_params: Dict[str, Optional[str]] = None, document_models: List[Document] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.document_models = document_models\n        self.client = AsyncIOMotorClient(self.config_params['engine_url'])\n\n    def check_document_models(self):\n        if not self.document_models:\n            raise ValueError('No document models provided')"
        },
        {
            "key_id": 71,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/create_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.future import select"
            ],
            "code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params or {}\n        self.async_mode = async_mode\n        self.engine = create_async_engine(self.config_params.get('engine_url'), echo=True)\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)\n\n    async def create_all(self, Base):\n        async with self.engine.begin() as conn:\n            await conn.run_sync(Base.metadata.create_all)"
        },
        {
            "key_id": 72,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/drop_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class BaseOrmProvider:\n    async def drop_all(self, Base):\n        async with self.engine.begin() as conn:\n            await conn.run_sync(Base.metadata.drop_all)"
        },
        {
            "key_id": 73,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/get_db",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from contextlib import asynccontextmanager"
            ],
            "code": "class BaseOrmProvider:\n    @asynccontextmanager\n    async def get_db(self):\n        async with self.SessionLocal() as session:\n            yield session"
        },
        {
            "key_id": 75,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/create_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.future import select"
            ],
            "code": "class OrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params or {}\n        self.engine = create_async_engine(self.config_params.get('engine_url'), echo=True)\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)\n\n    async def create_all(self, Base):\n        async with self.engine.begin() as conn:\n            await conn.run_sync(Base.metadata.create_all)"
        },
        {
            "key_id": 76,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/drop_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class OrmProvider:\n    async def drop_all(self, Base):\n        async with self.engine.begin() as conn:\n            await conn.run_sync(Base.metadata.drop_all)"
        },
        {
            "key_id": 77,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/get_db",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class AsyncOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)\n\n    async def get_db(self):\n        async with self.SessionLocal() as session:\n            yield session"
        },
        {
            "key_id": 80,
            "fqn": "nest/core/database/odm_config.py/MongoDBConfig/get_engine_url",
            "imports": [
                "from pymongo import MongoClient"
            ],
            "code": "class MongoDBConfig:\n    def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.srv = srv\n\n    def get_engine_url(self) -> str:\n        if self.srv:\n            return f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}'\n        else:\n            return f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 82,
            "fqn": "nest/core/database/odm_config.py/ConfigFactory/get_config",
            "imports": [],
            "code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type.lower() == 'mongodb':\n            return MongoDBConfig()\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 84,
            "fqn": "nest/core/database/orm_config.py/PostgresConfig/get_engine_url",
            "imports": [],
            "code": "class PostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n    def get_engine_url(self) -> str:\n        return f'postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 86,
            "fqn": "nest/core/database/orm_config.py/MySQLConfig/get_engine_url",
            "imports": [],
            "code": "class MySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n    def get_engine_url(self) -> str:\n        return f'mysql+pymysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 88,
            "fqn": "nest/core/database/orm_config.py/SQLiteConfig/get_engine_url",
            "imports": [],
            "code": "class SQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n\n    def get_engine_url(self) -> str:\n        return f'sqlite:///{self.db_name}'"
        },
        {
            "key_id": 90,
            "fqn": "nest/core/database/orm_config.py/AsyncSQLiteConfig/get_engine_url",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class AsyncSQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n        self.async_engine = create_async_engine(f'sqlite+aiosqlite:///{db_name}')\n        self.AsyncSession = sessionmaker(bind=self.async_engine, expire_on_commit=False, class_='AsyncSession')\n\n    def get_engine_url(self) -> str:\n        return f'sqlite+aiosqlite:///{self.db_name}'"
        },
        {
            "key_id": 92,
            "fqn": "nest/core/database/orm_config.py/AsyncPostgresConfig/get_engine_url",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class AsyncPostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'postgresql+asyncpg://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSession = sessionmaker(bind=self.async_engine, expire_on_commit=False, class_='AsyncSession')\n\n    def get_engine_url(self) -> str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 94,
            "fqn": "nest/core/database/orm_config.py/AsyncMySQLConfig/get_engine_url",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class AsyncMySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'mysql+aiomysql://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSession = sessionmaker(bind=self.async_engine, expire_on_commit=False, class_='AsyncSession')\n\n    def get_engine_url(self) -> str:\n        return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 96,
            "fqn": "nest/core/database/orm_config.py/ConfigFactory/get_config",
            "imports": [
                "from .orm_config import AsyncPostgresConfig",
                "from .orm_config import AsyncMySQLConfig",
                "from .orm_config import AsyncSQLiteConfig"
            ],
            "code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n        if db_type == 'postgresql':\n            self.config = AsyncPostgresConfig\n        elif db_type == 'mysql':\n            self.config = AsyncMySQLConfig\n        elif db_type == 'sqlite':\n            self.config = AsyncSQLiteConfig\n        else:\n            raise ValueError(f'Unsupported async database type: {db_type}')\n\n    def get_config(self):\n        return self.config"
        },
        {
            "key_id": 98,
            "fqn": "nest/core/database/orm_config.py/AsyncConfigFactory/get_config",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from nest.core.database.orm_config import AsyncPostgresConfig, AsyncMySQLConfig, AsyncSQLiteConfig"
            ],
            "code": "def get_config(self):\n    if self.db_type == 'postgresql':\n        return AsyncPostgresConfig().get_engine_url()\n    elif self.db_type == 'mysql':\n        return AsyncMySQLConfig().get_engine_url()\n    elif self.db_type == 'sqlite':\n        return AsyncSQLiteConfig().get_engine_url()\n    else:\n        raise ValueError(f'Unsupported async database type: {self.db_type}')"
        },
        {
            "key_id": 36,
            "fqn": "nest/core/decorators/controller.py/process_prefix",
            "imports": [],
            "code": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:\n    if route_prefix is not None:\n        return route_prefix.strip('/')\n    return tag_name.lower() if tag_name is not None else ''"
        },
        {
            "key_id": 37,
            "fqn": "nest/core/decorators/controller.py/process_dependencies",
            "imports": [
                "from injector import inject"
            ],
            "code": "def process_dependencies(cls: Type) -> None:\n    for name, typ in get_type_hints(cls).items():\n        if hasattr(typ, '__origin__') and issubclass(typ.__origin__, (list, dict, set)):\n            continue  # Skip complex types for now\n        setattr(cls, name, inject(typ))"
        },
        {
            "key_id": 38,
            "fqn": "nest/core/decorators/controller.py/set_instance_variables",
            "imports": [],
            "code": "def set_instance_variables(cls: Type) -> None:\n    for name, value in cls.__dict__.items():\n        if not name.startswith('_') and not callable(value):\n            setattr(cls, name, value)"
        },
        {
            "key_id": 39,
            "fqn": "nest/core/decorators/controller.py/ensure_init_method",
            "imports": [],
            "code": "def ensure_init_method(cls: Type) -> None:\n    if '__init__' not in cls.__dict__:\n        def init(self, *args, **kwargs):\n            super(cls, self).__init__(*args, **kwargs)\n        cls.__init__ = init"
        },
        {
            "key_id": 40,
            "fqn": "nest/core/decorators/controller.py/add_routes",
            "imports": [
                "from fastapi import APIRouter",
                "from typing import Type"
            ],
            "code": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:\n    for attr_name in dir(cls):\n        attr = getattr(cls, attr_name)\n        if hasattr(attr, '__route__'):\n            method = getattr(attr, '__method__', 'get')\n            path = getattr(attr, '__route__', None)\n            if path is not None:\n                full_path = route_prefix + path\n                router.add_api_route(full_path, attr, methods=[method.upper()], tags=[cls.__name__])"
        },
        {
            "key_id": 41,
            "fqn": "nest/core/decorators/controller.py/validate_method_decorator",
            "imports": [
                "from typing import Callable"
            ],
            "code": "def validate_method_decorator(method_function: Callable, method_name: str) -> None:\n    if not callable(method_function):\n        raise TypeError(f'{method_name} must be callable')"
        },
        {
            "key_id": 42,
            "fqn": "nest/core/decorators/controller.py/configure_method_route",
            "imports": [
                "from typing import Callable"
            ],
            "code": "def configure_method_route(method_function: Callable, route_prefix: str) -> None:\n    if hasattr(method_function, '__route__'):\n        method_function.__route__ = route_prefix + method_function.__route__"
        },
        {
            "key_id": 43,
            "fqn": "nest/core/decorators/controller.py/add_route_to_router",
            "imports": [
                "from fastapi import APIRouter",
                "from typing import Callable"
            ],
            "code": "def add_route_to_router(router: APIRouter, method_function: Callable) -> None:\n    if hasattr(method_function, '__route__') and hasattr(method_function, '__method__'):\n        router.add_api_route(method_function.__route__, method_function, methods=[method_function.__method__.upper()])"
        }
    ]
}