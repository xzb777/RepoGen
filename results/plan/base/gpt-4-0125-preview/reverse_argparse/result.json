{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/__init__",
            "imports": [
                "from argparse import ArgumentParser, Namespace"
            ],
            "code": "class ReverseArgumentParser:\n    def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):\n        self.parser = parser\n        self.namespace = namespace\n        self.indent = indent\n        self.command_line_invocation = ''\n        self._unparse_args()\n\n    def _unparse_args(self) -> None:\n        for action in self.parser._actions:\n            self._unparse_action(action)\n\n    def _unparse_action(self, action) -> None:\n        # Implementation for handling different types of actions\n        pass\n\n    def get_pretty_command_line_invocation(self) -> str:\n        return ' '.join(self.command_line_invocation.split())\n\n    def get_effective_command_line_invocation(self) -> str:\n        return self.command_line_invocation.strip()"
        },
        {
            "key_id": 1,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_args(self) -> None:\n        for action in self.parser._actions:\n            self._unparse_action(action)"
        },
        {
            "key_id": 2,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_action(self, action: Action) -> None:\n        if isinstance(action, Action):\n            if self._arg_is_default_and_help_is_suppressed(action):\n                return\n            method_name = '_unparse_' + type(action).__name__.lower()\n            unparse_method = getattr(self, method_name, self._unparse_generic_action)\n            unparse_method(action)"
        },
        {
            "key_id": 3,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n        if action.help is argparse.SUPPRESS:\n            return True\n        if action.default is not None and getattr(self.namespace, action.dest, None) == action.default:\n            return True\n        return False"
        },
        {
            "key_id": 4,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
            "imports": [],
            "code": "def get_effective_command_line_invocation(self) -> str:\n        return self.command_line_invocation.strip()"
        },
        {
            "key_id": 5,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
            "imports": [],
            "code": "def get_pretty_command_line_invocation(self) -> str:\n        return ' '.join(self.command_line_invocation.split())"
        },
        {
            "key_id": 12,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_indent_str",
            "imports": [],
            "code": "def _indent_str(self) -> str:\n    return ' ' * self.indent"
        },
        {
            "key_id": 23,
            "fqn": "reverse_argparse/reverse_argparse.py/quote_arg_if_necessary",
            "imports": [
                "import shlex"
            ],
            "code": "def quote_arg_if_necessary(arg: str) -> str:\n    if ' ' in arg or '\"' in arg:\n        return shlex.quote(arg)\n    return arg"
        },
        {
            "key_id": 6,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
            "imports": [],
            "code": "def _get_long_option_strings(self, option_strings: list[str]) -> list[str]:\n    return [opt for opt in option_strings if len(opt) > SHORT_OPTION_LENGTH]"
        },
        {
            "key_id": 7,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
            "imports": [],
            "code": "def _get_short_option_strings(self, option_strings: list[str]) -> list[str]:\n    return [opt for opt in option_strings if len(opt) == SHORT_OPTION_LENGTH]"
        },
        {
            "key_id": 8,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
            "imports": [],
            "code": "def _get_option_string(self, action, prefer_short: bool = False) -> str:\n    long_opts = self._get_long_option_strings(action.option_strings)\n    short_opts = self._get_short_option_strings(action.option_strings)\n    if prefer_short and short_opts:\n        return short_opts[0]\n    elif long_opts:\n        return long_opts[0]\n    elif short_opts:\n        return short_opts[0]\n    else:\n        raise ValueError('No valid option string found for action.')"
        },
        {
            "key_id": 9,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
            "imports": [
                "from typing import List"
            ],
            "code": "def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:\n    for arg_list in args:\n        self._append_list_of_args(arg_list)"
        },
        {
            "key_id": 10,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_args",
            "imports": [
                "from typing import List"
            ],
            "code": "def _append_list_of_args(self, args: List[str]) -> None:\n    for arg in args:\n        self._append_arg(arg)"
        },
        {
            "key_id": 11,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_arg",
            "imports": [],
            "code": "def _append_arg(self, arg: str) -> None:\n    if ' ' in arg or '\"' in arg:\n        arg = '\"' + arg.replace('\"', '\\\"') + '\"'\n    self.command_line_invocation += ' ' + arg"
        },
        {
            "key_id": 13,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_store_action(self, action: Action) -> None:\n    if action.dest != 'help':\n        option_string = self._get_option_string(action, prefer_short=True)\n        if action.default is not None and getattr(self.namespace, action.dest, None) != action.default:\n            value = getattr(self.namespace, action.dest)\n            self._append_list_of_args([option_string, str(value)])"
        },
        {
            "key_id": 14,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_const_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_store_const_action(self, action: Action) -> None:\n    if action.dest != 'help' and getattr(self.namespace, action.dest) == action.const:\n        option_string = self._get_option_string(action, prefer_short=True)\n        self._append_arg(option_string)"
        },
        {
            "key_id": 15,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_true_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_store_true_action(self, action: Action) -> None:\n    if getattr(self.namespace, action.dest) is True:\n        option_string = self._get_option_string(action, prefer_short=True)\n        self._append_arg(option_string)"
        },
        {
            "key_id": 16,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_false_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_store_false_action(self, action: Action) -> None:\n    if getattr(self.namespace, action.dest) is False:\n        option_string = self._get_option_string(action, prefer_short=True)\n        self._append_arg(option_string)"
        },
        {
            "key_id": 17,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_action",
            "imports": [
                "from argparse import Action",
                "from shlex import quote"
            ],
            "code": "def _unparse_append_action(self, action: Action) -> None:\n    values = getattr(self.namespace, action.dest, None)\n    if values is not None:\n        option_string = self._get_option_string(action, prefer_short=True)\n        for value in values:\n            quoted_value = quote(str(value))\n            self._append_list_of_list_of_args([[option_string, quoted_value]])"
        },
        {
            "key_id": 18,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_const_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_append_const_action(self, action: Action) -> None:\n    if getattr(self.namespace, action.dest) == action.const:\n        option_string = self._get_option_string(action, prefer_short=True)\n        self._append_arg(option_string)"
        },
        {
            "key_id": 19,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_count_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_count_action(self, action: Action) -> None:\n    count = getattr(self.namespace, action.dest, 0)\n    if count > 0:\n        option_string = self._get_option_string(action, prefer_short=True)\n        for _ in range(count):\n            self._append_arg(option_string)"
        },
        {
            "key_id": 20,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_sub_parsers_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_sub_parsers_action(self, action: Action) -> None:\n    subparser_invoked = getattr(self.namespace, action.dest, None)\n    if subparser_invoked is not None:\n        for choice, subparser in action.choices.items():\n            if choice == subparser_invoked:\n                self.command_line_invocation += ' ' + choice\n                for sub_action in subparser._actions:\n                    self._unparse_action(sub_action)\n                break"
        },
        {
            "key_id": 21,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_extend_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_extend_action(self, action: Action) -> None:\n    values = getattr(self.namespace, action.dest, None)\n    if values is not None:\n        option_string = self._get_option_string(action, prefer_short=False)\n        for value in values:\n            self.command_line_invocation += f' {option_string} {value}'"
        },
        {
            "key_id": 22,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_boolean_optional_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_boolean_optional_action(self, action: Action) -> None:\n    value = getattr(self.namespace, action.dest, None)\n    if value is not None:\n        option_string = self._get_option_string(action, prefer_short=True)\n        if value:\n            self.command_line_invocation += f' {option_string}'\n        else:\n            option_string = self._get_option_string(action, prefer_short=False)\n            self.command_line_invocation += f' {option_string} false'"
        }
    ]
}