{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/manage.py",
            "relative_path": "manage.py",
            "fqn_list": "manage.py/main",
            "class": null,
            "signature": "def main():",
            "comment": "Run administrative tasks.",
            "comment_free_code": "def main():\n    \n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)",
            "start_lineno": 8,
            "end_lineno": 19,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "manage.py",
                    "import os",
                    "os"
                ],
                [
                    "manage.py",
                    "import sys",
                    "sys"
                ],
                [
                    "manage.py",
                    "from django.core.management import execute_from_command_line",
                    "django.core.management.execute_from_command_line"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 0,
            "gen_code": "def main():\n    try:\n        execute_from_command_line(sys.argv)\n    except Exception as e:\n        print(f'Error executing command line: {e}')\n        sys.exit(1)",
            "gen_import": [
                "import sys",
                "from django.core.management import execute_from_command_line"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/__init__",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def __init__(self, recipient_email_list: Union[list, tuple, QuerySet] = None, **kwargs) -> None:",
            "comment": "Initialisation takes optionally a list of recipients. Doesn't have to be a list of strings because\nfetching the actual email from a complex data structure can be done in the method `get_email_from_recipient()`",
            "comment_free_code": "def __init__(self, recipient_email_list: Union[list, tuple, QuerySet]=None, **kwargs) -> None:\n    \n    self._errors = []\n    super().__init__()\n    if recipient_email_list:\n        self.recipient_email_list = recipient_email_list",
            "start_lineno": 26,
            "end_lineno": 36,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 1,
            "gen_code": "def __init__(self, recipient_email_list: Union[list, tuple, QuerySet] = None, **kwargs) -> None:\n    self._errors = []\n    self.service_class = None\n    self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []",
            "gen_import": [
                "from typing import Union, Optional",
                "from django.db.models.query import QuerySet"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/is_valid",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def is_valid(self, raise_exception: bool = True) -> bool:",
            "comment": "This function ensures that all required variables for the email object are set. Can be overridden and extended\nbut again, make sure that super() is called",
            "comment_free_code": "def is_valid(self, raise_exception: bool=True) -> bool:\n    \n    if not self.service_class:\n        self._errors.append(_('Email factory requires a mail service class.'))\n    if not len(self.get_recipient_list()):\n        self._errors.append(_('Email factory requires a target mail address.'))\n    if self._errors and raise_exception:\n        raise EmailServiceConfigError(self._errors)\n    return not bool(len(self._errors))",
            "start_lineno": 38,
            "end_lineno": 51,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                1,
                4
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "django_pony_express/errors.py/EmailServiceConfigError"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 2,
            "gen_code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.recipient_email_list:\n        self._errors.append('No recipient email list provided')\n        if raise_exception:\n            raise ValidationError('No recipient email list provided')\n        return False\n    return True",
            "gen_import": [
                "from django.core.exceptions import ValidationError"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def get_recipient_list(self) -> list:",
            "comment": "Fetches the recipient list. Provided as a method to be able to customise it in the derived class.",
            "comment_free_code": "def get_recipient_list(self) -> list:\n    \n    return self.recipient_email_list",
            "start_lineno": 53,
            "end_lineno": 57,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 3,
            "gen_code": "def get_recipient_list(self) -> list:\n    if not self.recipient_email_list:\n        self._errors.append('No recipient email list provided.')\n        return []\n    return self.recipient_email_list",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_email_from_recipient",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def get_email_from_recipient(self, recipient) -> str:",
            "comment": "Fetches the email from the recipient. Sometimes a list of mail addresses is passed, so we just have to\nreturn the current variable. But if we get a database object, we need to extract the email first.\nFor example: `return user.email`",
            "comment_free_code": "def get_email_from_recipient(self, recipient) -> str:\n    \n    return recipient",
            "start_lineno": 59,
            "end_lineno": 65,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 4,
            "gen_code": "def get_email_from_recipient(self, recipient) -> str:\n    if isinstance(recipient, str):\n        return recipient\n    elif hasattr(recipient, 'email'):\n        return recipient.email\n    else:\n        self._errors.append(f'Invalid recipient type: {type(recipient)}')\n        return ''",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_context_data",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def get_context_data(self) -> dict:",
            "comment": "Fetch context data required equally for every email created by the factory.",
            "comment_free_code": "def get_context_data(self) -> dict:\n    \n    return {}",
            "start_lineno": 67,
            "end_lineno": 71,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 5,
            "gen_code": "def get_context_data(self) -> dict:\n    context = {}\n    # Example of adding some context data\n    context['app_name'] = 'Django Pony Express'\n    return context",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/has_errors",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def has_errors(self) -> bool:",
            "comment": "Check if any errors are stored inside this class instance",
            "comment_free_code": "def has_errors(self) -> bool:\n    \n    return bool(len(self._errors))",
            "start_lineno": 73,
            "end_lineno": 77,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 6,
            "gen_code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/errors",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def errors(self) -> list:",
            "comment": "Getter for fetching the stored error messages.\nErrors shall not be set manually, that's why we use a property here.",
            "comment_free_code": "@property\ndef errors(self) -> list:\n    \n    return self._errors",
            "start_lineno": 80,
            "end_lineno": 85,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 7,
            "gen_code": "def errors(self) -> list:\n    return self._errors",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/process",
            "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
            "signature": "def process(self, raise_exception: bool = True) -> int:",
            "comment": "Create an email of `self.service_class` for every recipient. Per-email logic like setting the salutation\nis handled within each email class.\nReturns the number of sent emails.",
            "comment_free_code": "def process(self, raise_exception: bool=True) -> int:\n    \n    counter = 0\n    if self.is_valid(raise_exception=raise_exception):\n        for recipient in self.get_recipient_list():\n            email_object = self.service_class(recipient_email_list=[self.get_email_from_recipient(recipient)], context_data={'recipient': recipient, **self.get_context_data()})\n            email_object.process()\n            counter += 1\n    return counter",
            "start_lineno": 87,
            "end_lineno": 103,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                4,
                5,
                6,
                7
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list",
                    "django_pony_express/services/base.py/BaseEmailServiceFactory/is_valid",
                    "django_pony_express/services/base.py/BaseEmailServiceFactory/get_email_from_recipient",
                    "django_pony_express/services/base.py/BaseEmailServiceFactory/get_context_data"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 8,
            "gen_code": "def process(self, raise_exception: bool = True) -> int:\n    if not self.is_valid(raise_exception=raise_exception):\n        return 0\n    sent_emails = 0\n    for recipient in self.get_recipient_list():\n        email_service = self.service_class(recipient_email_list=[recipient], **self.kwargs)\n        if email_service.process(raise_exception=False):\n            sent_emails += 1\n    return sent_emails",
            "gen_import": [
                "from django.core.exceptions import ValidationError"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/__init__",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[list] = None, **kwargs) -> None:",
            "comment": "Initialisation takes a single or list of email addresses and some context data. This context data\nmight be provided from the factory to avoid querying data more than necessary.",
            "comment_free_code": "def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]]=None, context_data: Optional[dict]=None, attachment_list: Optional[list]=None, **kwargs) -> None:\n    \n    self._errors = []\n    self._logger = self._get_logger()\n    super().__init__()\n    if isinstance(recipient_email_list, str):\n        recipient_email_list = [recipient_email_list]\n    self.recipient_email_list = recipient_email_list if recipient_email_list else []\n    self.context_data = context_data if context_data else {}\n    self.attachment_list = attachment_list if attachment_list else []",
            "start_lineno": 126,
            "end_lineno": 149,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                11
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailService/_get_logger"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 9,
            "gen_code": "def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[list] = None, **kwargs) -> None:\n    self.SUBJECT_PREFIX = None\n    self.FROM_EMAIL = None\n    self.REPLY_TO_ADDRESS = []\n    self._errors = []\n    self.subject = None\n    self.template_name = None\n    self.template_txt_name = None\n    self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []\n    self.cc_email_list = []\n    self.bcc_email_list = []\n    self.attachment_list = attachment_list if attachment_list is not None else []\n    self._logger = self._get_logger()",
            "gen_import": [
                "from typing import Union, Optional, List",
                "import logging"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_get_logger",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def _get_logger(self) -> logging.Logger:",
            "comment": null,
            "comment_free_code": "def _get_logger(self) -> logging.Logger:\n    self._logger = logging.getLogger(PONY_LOGGER_NAME) if self._logger is None else self._logger\n    return self._logger",
            "start_lineno": 151,
            "end_lineno": 153,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 10,
            "gen_code": "def _get_logger(self) -> logging.Logger:\n    if not hasattr(self, '_logger') or self._logger is None:\n        self._logger = logging.getLogger(__name__)\n    return self._logger",
            "gen_import": [
                "import logging"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_context_data",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_context_data(self) -> dict:",
            "comment": "This method provides the required variables for the base email template. If more variables are required,\njust override this method and make sure, super() is called",
            "comment_free_code": "def get_context_data(self) -> dict:\n    \n    return self.context_data",
            "start_lineno": 155,
            "end_lineno": 160,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 11,
            "gen_code": "def get_context_data(self) -> dict:\n    if not hasattr(self, 'context_data') or self.context_data is None:\n        self.context_data = {}\n    return self.context_data",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_subject",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_subject(self) -> str:",
            "comment": "This method provides the subject of the email. Prefixes every subject to create a similar look and feel across\nemails. Can be overridden if required.",
            "comment_free_code": "def get_subject(self) -> str:\n    \n    if self.SUBJECT_PREFIX:\n        return f'{self.SUBJECT_PREFIX} - {self.subject}'\n    return self.subject",
            "start_lineno": 162,
            "end_lineno": 169,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 12,
            "gen_code": "def get_subject(self) -> str:\n    if self.SUBJECT_PREFIX:\n        return f'{self.SUBJECT_PREFIX} {self.subject}'\n    return self.subject",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_from_email",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_from_email(self) -> str:",
            "comment": "Use set `FROM_EMAIL` or the django base `DEFAULT_FROM_EMAIL` if it is not set",
            "comment_free_code": "def get_from_email(self) -> str:\n    \n    return self.FROM_EMAIL if self.FROM_EMAIL else settings.DEFAULT_FROM_EMAIL",
            "start_lineno": 171,
            "end_lineno": 175,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 13,
            "gen_code": "def get_from_email(self) -> str:\n    return self.FROM_EMAIL",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_cc_emails",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_cc_emails(self) -> list:",
            "comment": "Returns a list of emails as a string which will be used in the \"CC\" field of the generated email.",
            "comment_free_code": "def get_cc_emails(self) -> list:\n    \n    return self.cc_email_list",
            "start_lineno": 177,
            "end_lineno": 181,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 14,
            "gen_code": "def get_cc_emails(self) -> List[str]:\n    return self.cc_email_list",
            "gen_import": [
                "from typing import List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_bcc_emails",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_bcc_emails(self) -> list:",
            "comment": "Returns a list of emails as a string which will be used in the \"BCC\" field of the generated email.",
            "comment_free_code": "def get_bcc_emails(self) -> list:\n    \n    return self.bcc_email_list",
            "start_lineno": 183,
            "end_lineno": 187,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 15,
            "gen_code": "def get_bcc_emails(self) -> List[str]:\n    return self.bcc_email_list",
            "gen_import": [
                "from typing import List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_reply_to_emails",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_reply_to_emails(self) -> list:",
            "comment": "Ensure \"reply to\" is a list",
            "comment_free_code": "def get_reply_to_emails(self) -> list:\n    \n    return [self.REPLY_TO_ADDRESS] if isinstance(self.REPLY_TO_ADDRESS, str) else self.REPLY_TO_ADDRESS",
            "start_lineno": 189,
            "end_lineno": 193,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 16,
            "gen_code": "def get_reply_to_emails(self) -> List[str]:\n    return self.REPLY_TO_ADDRESS",
            "gen_import": [
                "from typing import List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_translation",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_translation(self) -> Union[str, None]:",
            "comment": "Tries to fetch the current translation from the django settings.",
            "comment_free_code": "def get_translation(self) -> Union[str, None]:\n    \n    language_str_length = 2\n    try:\n        return settings.LANGUAGE_CODE[:2] if settings.LANGUAGE_CODE and len(settings.LANGUAGE_CODE) >= language_str_length else None\n    except TypeError:\n        return None",
            "start_lineno": 195,
            "end_lineno": 207,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 17,
            "gen_code": "def get_translation(self) -> Union[str, None]:\n    # Assuming a method to fetch translation based on some logic\n    # This is a placeholder for actual translation logic\n    translation = 'Your translation logic here'\n    return translation",
            "gen_import": [
                "from typing import Union"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_attachments",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def get_attachments(self) -> list:",
            "comment": "Method to be overwritten. Returns a list of file-paths which will be attached to the newly created email.",
            "comment_free_code": "def get_attachments(self) -> list:\n    \n    return self.attachment_list",
            "start_lineno": 209,
            "end_lineno": 213,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 18,
            "gen_code": "def get_attachments(self) -> List[str]:\n    # Assuming attachments are stored as a list of file paths or URLs\n    # This is a placeholder for actual attachment handling logic\n    return self.attachment_list",
            "gen_import": [
                "from typing import List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_add_attachments",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def _add_attachments(self, msg: EmailMultiAlternatives):",
            "comment": "Method to encapsulate logic of adding attachments to an email object.",
            "comment_free_code": "def _add_attachments(self, msg: EmailMultiAlternatives):\n    \n    for attachment in self.get_attachments():\n        if isinstance(attachment, dict):\n            try:\n                msg.attach(attachment['filename'], attachment['file'], attachment.get('mimetype', None))\n            except KeyError as e:\n                raise EmailServiceAttachmentError(_('Missing or mislabeled data provided for email attachment.')) from e\n        else:\n            msg.attach_file(attachment)\n    return msg",
            "start_lineno": 215,
            "end_lineno": 230,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                2,
                20
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailService/get_attachments"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "django_pony_express/errors.py/EmailServiceAttachmentError"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 19,
            "gen_code": "def _add_attachments(self, msg: EmailMultiAlternatives):\n    attachments = self.get_attachments()\n    for attachment in attachments:\n        if isinstance(attachment, tuple) and len(attachment) == 3:\n            msg.attach(*attachment)\n        else:\n            self._logger.warning('Invalid attachment format. Expected a tuple of (filename, content, mimetype).')\n    return msg",
            "gen_import": [
                "from django.core.mail import EmailMultiAlternatives"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def _build_mail_object(self) -> EmailMultiAlternatives:",
            "comment": "This method creates a mail object. It collects the required variables, sets the subject and makes sure that\na \"reply_to\" is set for maximum convenience during the runtime.\nThe plaintext part of the email is generated from the html to avoid maintaining duplicate templates.",
            "comment_free_code": "def _build_mail_object(self) -> EmailMultiAlternatives:\n    \n    language = self.get_translation()\n    if language:\n        translation.activate(language)\n    mail_attributes = self.get_context_data()\n    html_content = render_to_string(self.template_name, mail_attributes)\n    if not self.template_txt_name:\n        h = html2text.HTML2Text()\n        h.body_width = 0\n        text_content = h.handle(html_content)\n    else:\n        text_content = render_to_string(self.template_txt_name, mail_attributes)\n    msg = EmailMultiAlternatives(self.get_subject(), text_content, from_email=self.get_from_email(), cc=self.get_cc_emails(), bcc=self.get_bcc_emails(), reply_to=self.get_reply_to_emails(), to=self.recipient_email_list)\n    msg.attach_alternative(html_content, 'text/html')\n    msg = self._add_attachments(msg)\n    return msg",
            "start_lineno": 232,
            "end_lineno": 274,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                21
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailService/get_context_data",
                    "django_pony_express/services/base.py/BaseEmailService/get_subject",
                    "django_pony_express/services/base.py/BaseEmailService/get_from_email",
                    "django_pony_express/services/base.py/BaseEmailService/get_cc_emails",
                    "django_pony_express/services/base.py/BaseEmailService/get_bcc_emails",
                    "django_pony_express/services/base.py/BaseEmailService/get_reply_to_emails",
                    "django_pony_express/services/base.py/BaseEmailService/get_translation",
                    "django_pony_express/services/base.py/BaseEmailService/_add_attachments"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 20,
            "gen_code": "def _build_mail_object(self) -> EmailMultiAlternatives:\n    context = self.get_context_data()\n    subject = self.get_subject()\n    from_email = self.get_from_email() or settings.DEFAULT_FROM_EMAIL\n    to_emails = self.get_recipient_list()\n    cc_emails = self.get_cc_emails()\n    bcc_emails = self.get_bcc_emails()\n    reply_to_emails = self.get_reply_to_emails()\n    html_content = render_to_string(self.template_name, context)\n    text_content = strip_tags(html_content) if self.template_txt_name is None else render_to_string(self.template_txt_name, context)\n    msg = EmailMultiAlternatives(subject, text_content, from_email, to_emails, cc=cc_emails, bcc=bcc_emails, reply_to=reply_to_emails)\n    msg.attach_alternative(html_content, 'text/html')\n    self._add_attachments(msg)\n    return msg",
            "gen_import": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "from django.utils.html import strip_tags"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/is_valid",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def is_valid(self, raise_exception: bool = True) -> bool:",
            "comment": "This function ensures that all required variables for the email object are set. Can be overridden and extended\nbut again, make sure that super() is called.",
            "comment_free_code": "def is_valid(self, raise_exception: bool=True) -> bool:\n    \n    if not self.get_subject():\n        self._errors.append(_('Email service requires a subject.'))\n    if not self.template_name:\n        self._errors.append(_('Email service requires a template.'))\n    if not len(self.recipient_email_list):\n        self._errors.append(_('Email service requires a target mail address.'))\n    if self._errors and raise_exception:\n        raise EmailServiceConfigError(self._errors)\n    return not bool(len(self._errors))",
            "start_lineno": 276,
            "end_lineno": 291,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                1,
                14
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailService/get_subject"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "django_pony_express/errors.py/EmailServiceConfigError"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 21,
            "gen_code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.subject:\n        if raise_exception:\n            raise ValueError('Email subject cannot be empty.')\n        else:\n            self._errors.append('Email subject cannot be empty.')\n            return False\n    return True",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/has_errors",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def has_errors(self) -> bool:",
            "comment": "Check if any errors are stored inside this class instance",
            "comment_free_code": "def has_errors(self) -> bool:\n    \n    return bool(len(self._errors))",
            "start_lineno": 293,
            "end_lineno": 297,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 22,
            "gen_code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/errors",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def errors(self) -> list:",
            "comment": "Getter for fetching the stored error messages.\nErrors shall not be set manually, that's why we use a property here.",
            "comment_free_code": "@property\ndef errors(self) -> list:\n    \n    return self._errors",
            "start_lineno": 300,
            "end_lineno": 305,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 23,
            "gen_code": "def errors(self) -> list:\n    return self._errors",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:",
            "comment": "Method to be called by the thread. Enables logging since we won't have any sync return values.",
            "comment_free_code": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:\n    \n    result = False\n    recipients_as_string = ' '.join(self.recipient_email_list)\n    try:\n        result = msg.send()\n        if PONY_LOG_RECIPIENTS:\n            self._logger.info(_('Email \"%s\" successfully sent to %s.') % (msg.subject, recipients_as_string))\n        else:\n            self._logger.info(_('Email \"%s\" successfully sent.') % msg.subject)\n    except Exception:\n        if PONY_LOG_RECIPIENTS:\n            self._logger.exception(_('An error occurred sending email \"%s\" to \"%s\".') % (msg.subject, recipients_as_string))\n        else:\n            self._logger.exception(_('An error occurred sending email \"%s\".') % msg.subject)\n    return result",
            "start_lineno": 307,
            "end_lineno": 327,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 24,
            "gen_code": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:\n    try:\n        msg.send()\n        self._logger.info(f'Email sent to {msg.to}')\n        return True\n    except Exception as e:\n        self._errors.append(str(e))\n        self._logger.error(f'Failed to send email to {msg.to}: {e}')\n        return False",
            "gen_import": [
                "from django.core.mail import EmailMultiAlternatives",
                "import logging"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/base.py",
            "relative_path": "django_pony_express/services/base.py",
            "fqn_list": "django_pony_express/services/base.py/BaseEmailService/process",
            "class": "django_pony_express/services/base.py.BaseEmailService",
            "signature": "def process(self, raise_exception: bool = True) -> bool:",
            "comment": "Public method which is called to actually send an email. Calls validation first and returns the result of\n\"msg.send()\"",
            "comment_free_code": "def process(self, raise_exception: bool=True) -> bool:\n    \n    result = False\n    if self.is_valid(raise_exception=raise_exception):\n        msg = self._build_mail_object()\n        result = self._send_and_log_email(msg=msg)\n    return result",
            "start_lineno": 329,
            "end_lineno": 339,
            "local_variables": {
                "BaseEmailServiceFactory": [
                    "_errors = []",
                    "service_class = None",
                    "recipient_email_list = []"
                ],
                "BaseEmailService": [
                    "SUBJECT_PREFIX = None",
                    "FROM_EMAIL = None",
                    "REPLY_TO_ADDRESS = []",
                    "_errors = []",
                    "subject = None",
                    "template_name = None",
                    "template_txt_name = None",
                    "recipient_email_list = []",
                    "cc_email_list = []",
                    "bcc_email_list = []",
                    "attachment_list = []"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                26,
                22,
                23
            ],
            "local_import": [],
            "third_import": [
                [
                    "django_pony_express/services/base.py",
                    "import logging",
                    "logging"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "django_pony_express/services/base.py",
                    "import html2text",
                    "html2text"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.conf import settings",
                    "django.conf.settings"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.core.mail import EmailMultiAlternatives",
                    "django.core.mail.EmailMultiAlternatives"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.db.models import QuerySet",
                    "django.db.models.QuerySet"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.template.loader import render_to_string",
                    "django.template.loader.render_to_string"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils import translation",
                    "django.utils.translation"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django.utils.translation import gettext_lazy as _",
                    "django.utils.translation.gettext_lazy"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceAttachmentError",
                    "django_pony_express.errors.EmailServiceAttachmentError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.errors import EmailServiceConfigError",
                    "django_pony_express.errors.EmailServiceConfigError"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOG_RECIPIENTS",
                    "django_pony_express.settings.PONY_LOG_RECIPIENTS"
                ],
                [
                    "django_pony_express/services/base.py",
                    "from django_pony_express.settings import PONY_LOGGER_NAME",
                    "django_pony_express.settings.PONY_LOGGER_NAME"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
                    "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
                    "django_pony_express/services/base.py/BaseEmailService/is_valid"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 25,
            "gen_code": "def process(self, raise_exception: bool = True) -> bool:\n    if not self.is_valid(raise_exception=raise_exception):\n        if raise_exception:\n            raise ValueError('Email data is not valid')\n        return False\n    context = self.get_context_data()\n    html_content = render_to_string(self.template_name, context)\n    text_content = strip_tags(html_content)\n    msg = EmailMultiAlternatives(self.subject, text_content, self.FROM_EMAIL, self.recipient_email_list, cc=self.cc_email_list, bcc=self.bcc_email_list, reply_to=self.REPLY_TO_ADDRESS)\n    msg.attach_alternative(html_content, 'text/html')\n    for attachment in self.attachment_list:\n        msg.attach_file(attachment)\n    return self._send_and_log_email(msg)",
            "gen_import": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "from django.utils.html import strip_tags"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/django-pony-express/django_pony_express/services/asynchronous/thread.py",
            "relative_path": "django_pony_express/services/asynchronous/thread.py",
            "fqn_list": "django_pony_express/services/asynchronous/thread.py/ThreadEmailService/process",
            "class": "django_pony_express/services/asynchronous/thread.py.ThreadEmailService",
            "signature": "def process(self, raise_exception: bool = True) -> None:",
            "comment": "Public method which is called to actually send an email.\nCalls validation first and returns the result of \"msg.send()\"",
            "comment_free_code": "def process(self, raise_exception: bool=True) -> None:\n    \n    if self.is_valid(raise_exception=raise_exception):\n        msg = self._build_mail_object()\n        email_thread = threading.Thread(target=self._send_and_log_email, args=(msg,))\n        email_thread.start()",
            "start_lineno": 11,
            "end_lineno": 19,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                26,
                22,
                23
            ],
            "local_import": [
                [
                    "django_pony_express/services/asynchronous/thread.py",
                    "from django_pony_express.services.base import BaseEmailService",
                    "django_pony_express.services.base.BaseEmailService"
                ]
            ],
            "third_import": [
                [
                    "django_pony_express/services/asynchronous/thread.py",
                    "import threading",
                    "threading"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
                    "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
                    "django_pony_express/services/base.py/BaseEmailService/is_valid"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 26,
            "gen_code": "def process(self, raise_exception: bool = True) -> None:\n    if not self.is_valid(raise_exception=raise_exception):\n        if raise_exception:\n            raise ValueError('Invalid email data.')\n        return\n    def send_email():\n        msg = self._build_mail_object()\n        if self._send_and_log_email(msg):\n            self._logger.info('Email sent successfully.')\n        else:\n            self._logger.error('Failed to send email.')\n    email_thread = Thread(target=send_email)\n    email_thread.start()",
            "gen_import": [
                "from threading import Thread",
                "from django.core.mail import EmailMultiAlternatives"
            ]
        }
    ]
}