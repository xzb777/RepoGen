{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "translategram/translategram/translator_services.py/MtranslateTranslatorService/__init__",
            "imports": [
                "from mtranslate import translate"
            ],
            "code": "class MtranslateTranslatorService:\n    def __init__(self) -> None:\n        self.service = translate\n\n    def translate(self, text: str, to_language: str, from_language: str = 'auto') -> str:\n        translated_text = self.service(text, to_language, from_language)\n        return translated_text"
        },
        {
            "key_id": 1,
            "fqn": "translategram/translategram/cache.py/PickleCache/__init__",
            "imports": [
                "import pickle",
                "from pathlib import Path"
            ],
            "code": "class PickleCache:\n    def __init__(self, obj: object, filename: str = 'translation.data') -> None:\n        self.obj = obj\n        self.filename = filename\n        self._load()\n\n    def _load(self) -> None:\n        if Path(self.filename).exists():\n            with open(self.filename, 'rb') as file:\n                self.obj = pickle.load(file)\n\n    def _save(self) -> None:\n        with open(self.filename, 'wb') as file:\n            pickle.dump(self.obj, file)\n\n    def __del__(self) -> None:\n        self._save()"
        },
        {
            "key_id": 3,
            "fqn": "translategram/translategram/translator.py/Translator/__init__",
            "imports": [
                "from typing import Type, Union",
                "from .translator_services import MtranslateTranslatorService",
                "from .cache import PickleCache"
            ],
            "code": "class Translator:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service()\n        self.cache_system = cache_system() if cache_system else None"
        },
        {
            "key_id": 6,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/__init__",
            "imports": [
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ],
            "code": "class PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n        self._translator = Translator(translator_service, cache_system)\n\n    async def translate_message(self, message: str, target_language: str, source_language: str = 'auto') -> str:\n        if self.cache_system:\n            cache_key = f'{message}_{target_language}_{source_language}'\n            cached_msg = self.cache_system.retrieve(cache_key)\n            if cached_msg:\n                return cached_msg\n        translated_msg = self._translator.translator_service.translate(message, target_language, source_language)\n        if self.cache_system:\n            self.cache_system.store(cache_key, translated_msg)\n        return translated_msg"
        },
        {
            "key_id": 2,
            "fqn": "translategram/translategram/cache.py/PickleCache/__del__",
            "imports": [
                "import pickle",
                "from pathlib import Path"
            ],
            "code": "class PickleCache:\n    def __init__(self, obj: object, filename: str = 'translation.data') -> None:\n        self.obj = obj\n        self.filename = filename\n        self._load()\n\n    def _load(self) -> None:\n        if Path(self.filename).exists():\n            with open(self.filename, 'rb') as file:\n                self.obj = pickle.load(file)\n\n    def _save(self) -> None:\n        with open(self.filename, 'wb') as file:\n            pickle.dump(self.obj, file)\n\n    def __del__(self) -> None:\n        self._save()"
        },
        {
            "key_id": 4,
            "fqn": "translategram/translategram/translator.py/Translator/handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ],
            "code": "class Translator:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service()\n        self.cache_system = cache_system() if cache_system else None\n\n    def handler_translator(self, message: str, source_lang: str) -> Callable[\n        [Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]\n    ]:\n        async def wrapper(func):\n            async def inner(*args, **kwargs):\n                translated_message = self.translator_service.translate(message, target_language=source_lang)\n                return await func(*args, **kwargs, message=translated_message)\n            return inner\n        return wrapper"
        },
        {
            "key_id": 5,
            "fqn": "translategram/translategram/translator.py/Translator/dynamic_handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ],
            "code": "class Translator:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service()\n        self.cache_system = cache_system() if cache_system else None\n\n    def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> Callable[\n        [Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]\n    ]:\n        async def wrapper(func):\n            async def inner(*args, **kwargs):\n                message = message_func(*args, **kwargs)\n                translated_message = self.translator_service.translate(message, target_language=source_lang)\n                return await func(*args, **kwargs, message=translated_message)\n            return inner\n        return wrapper"
        },
        {
            "key_id": 7,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ],
            "code": "class PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n        self._translator = Translator(translator_service, cache_system)\n\n    async def translate_message(self, message: str, target_language: str, source_language: str = 'auto') -> str:\n        if self.cache_system:\n            cache_key = f'{message}_{target_language}_{source_language}'\n            cached_msg = self.cache_system.retrieve(cache_key)\n            if cached_msg:\n                return cached_msg\n        translated_msg = self._translator.translator_service.translate(message, target_language, source_language)\n        if self.cache_system:\n            self.cache_system.store(cache_key, translated_msg)\n        return translated_msg"
        },
        {
            "key_id": 8,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/dynamic_handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ],
            "code": "class PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n        self._translator = Translator(translator_service, cache_system)\n\n    async def translate_message(self, message_func: Callable[[str, Any], str], target_language: str, source_language: str = 'auto') -> str:\n        message = message_func()\n        if self.cache_system:\n            cache_key = f'{message}_{target_language}_{source_language}'\n            cached_msg = self.cache_system.retrieve(cache_key)\n            if cached_msg:\n                return cached_msg\n        translated_msg = self._translator.translator_service.translate(message, target_language, source_language)\n        if self.cache_system:\n            self.cache_system.store(cache_key, translated_msg)\n        return translated_msg"
        }
    ]
}