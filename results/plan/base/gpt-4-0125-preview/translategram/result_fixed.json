{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/translategram/translator_services.py",
            "relative_path": "translategram/translategram/translator_services.py",
            "fqn_list": "translategram/translategram/translator_services.py/MtranslateTranslatorService/__init__",
            "class": "translategram/translategram/translator_services.py.MtranslateTranslatorService",
            "signature": "def __init__(self) -> None:",
            "comment": "Initialize the `MtranslateTranslatorService` instance.\n\n:raises AssertionError: If the `mtranslate` package is not installed.",
            "comment_free_code": "def __init__(self) -> None:\n    \n    assert mtranslate, '`MtranslateTranslatorService` requires `mtranslate` package'\n    self.service = mtranslate",
            "start_lineno": 29,
            "end_lineno": 36,
            "local_variables": {
                "MtranslateTranslatorService": [
                    "translated_text = self.service.translate(",
                    "to_translate=text,",
                    "to_language=target_language,",
                    "from_language=source_language,",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "translategram/translategram/translator_services.py",
                    "from typing import Protocol",
                    "typing.Protocol"
                ],
                [
                    "translategram/translategram/translator_services.py",
                    "from translategram.translategram.service_libs import mtranslate",
                    "translategram.translategram.service_libs.mtranslate"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 0,
            "gen_code": "class MtranslateTranslatorService:\n    def __init__(self) -> None:\n        self.service = translate\n\n    def translate(self, text: str, to_language: str, from_language: str = 'auto') -> str:\n        translated_text = self.service(text, to_language, from_language)\n        return translated_text",
            "gen_import": [
                "from mtranslate import translate"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/translategram/cache.py",
            "relative_path": "translategram/translategram/cache.py",
            "fqn_list": "translategram/translategram/cache.py/PickleCache/__init__",
            "class": "translategram/translategram/cache.py.PickleCache",
            "signature": "def __init__(self, obj: object, filename: str = \"translation.data\") -> None:",
            "comment": "Initialize the PickleCache.\n\n:param obj: The object to be cached.\n:param filename: The name of the pickle file to store the cache data. Default is \"translation.data\".",
            "comment_free_code": "def __init__(self, obj: object, filename: str='translation.data') -> None:\n    \n    self._obj = obj\n    self.pickle_file = filename\n    with open(self.pickle_file, 'ab') as file:\n        pickle.dump(self._obj, file)",
            "start_lineno": 39,
            "end_lineno": 49,
            "local_variables": {
                "PickleCache": [
                    "loaded_data = pickle.load(file)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "translategram/translategram/cache.py",
                    "import os",
                    "os"
                ],
                [
                    "translategram/translategram/cache.py",
                    "import pickle",
                    "pickle"
                ],
                [
                    "translategram/translategram/cache.py",
                    "from typing import Protocol",
                    "typing.Protocol"
                ],
                [
                    "translategram/translategram/cache.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 1,
            "gen_code": "class PickleCache:\n    def __init__(self, obj: object, filename: str = 'translation.data') -> None:\n        self.obj = obj\n        self.filename = filename\n        self._load()\n\n    def _load(self) -> None:\n        if Path(self.filename).exists():\n            with open(self.filename, 'rb') as file:\n                self.obj = pickle.load(file)\n\n    def _save(self) -> None:\n        with open(self.filename, 'wb') as file:\n            pickle.dump(self.obj, file)\n\n    def __del__(self) -> None:\n        self._save()",
            "gen_import": [
                "import pickle",
                "from pathlib import Path"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/translategram/cache.py",
            "relative_path": "translategram/translategram/cache.py",
            "fqn_list": "translategram/translategram/cache.py/PickleCache/__del__",
            "class": "translategram/translategram/cache.py.PickleCache",
            "signature": "def __del__(self) -> None:",
            "comment": "Clean up the cache file when the cache object is destroyed.",
            "comment_free_code": "def __del__(self) -> None:\n    \n    if os.path.exists(self.pickle_file):\n        os.remove(self.pickle_file)",
            "start_lineno": 77,
            "end_lineno": 82,
            "local_variables": {
                "PickleCache": [
                    "loaded_data = pickle.load(file)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "translategram/translategram/cache.py",
                    "import os",
                    "os"
                ],
                [
                    "translategram/translategram/cache.py",
                    "import pickle",
                    "pickle"
                ],
                [
                    "translategram/translategram/cache.py",
                    "from typing import Protocol",
                    "typing.Protocol"
                ],
                [
                    "translategram/translategram/cache.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 2,
            "gen_code": "class PickleCache:\n    def __init__(self, obj: object, filename: str = 'translation.data') -> None:\n        self.obj = obj\n        self.filename = filename\n        self._load()\n\n    def _load(self) -> None:\n        if Path(self.filename).exists():\n            with open(self.filename, 'rb') as file:\n                self.obj = pickle.load(file)\n\n    def _save(self) -> None:\n        with open(self.filename, 'wb') as file:\n            pickle.dump(self.obj, file)\n\n    def __del__(self) -> None:\n        self._save()",
            "gen_import": [
                "import pickle",
                "from pathlib import Path"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/translategram/translator.py",
            "relative_path": "translategram/translategram/translator.py",
            "fqn_list": "translategram/translategram/translator.py/Translator/__init__",
            "class": "translategram/translategram/translator.py.Translator",
            "signature": "def __init__(self, translator_service: TranslatorService, cache_system: Union[Type[Cache], None] = None) -> None:",
            "comment": "Initializes a new Translator instance using the specified `translator_service`.\n\n:param translator_service: The `TranslatorService` to use for translations.\n:param cache_system: The cache system to be used for caching translations. If None, caching is disabled.",
            "comment_free_code": "def __init__(self, translator_service: TranslatorService, cache_system: Union[Type[Cache], None]=None) -> None:\n    \n    ...",
            "start_lineno": 17,
            "end_lineno": 28,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                48,
                44
            ],
            "local_import": [],
            "third_import": [
                [
                    "translategram/translategram/translator.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Coroutine",
                    "typing.Coroutine"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from translategram.translategram.cache import Cache",
                    "translategram.translategram.cache.Cache"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from translategram.translategram.translator_services import TranslatorService",
                    "translategram.translategram.translator_services.TranslatorService"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "translategram/translategram/cache.py/Cache",
                    "translategram/translategram/translator_services.py/TranslatorService"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 3,
            "gen_code": "class Translator:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service()\n        self.cache_system = cache_system() if cache_system else None",
            "gen_import": [
                "from typing import Type, Union",
                "from .translator_services import MtranslateTranslatorService",
                "from .cache import PickleCache"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/translategram/translator.py",
            "relative_path": "translategram/translategram/translator.py",
            "fqn_list": "translategram/translategram/translator.py/Translator/handler_translator",
            "class": "translategram/translategram/translator.py.Translator",
            "signature": "def handler_translator(self, message: str, source_lang: str) -> Callable[\n        [Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]\n    ]:",
            "comment": "Translate a message based on the users' language\n:param func: The handler function that is used for handling commands by Frameworks.\n:param message: The message to translate.",
            "comment_free_code": "@abstractmethod\ndef handler_translator(self, message: str, source_lang: str) -> Callable[[Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]:\n    \n    ...",
            "start_lineno": 31,
            "end_lineno": 41,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "translategram/translategram/translator.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Coroutine",
                    "typing.Coroutine"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from translategram.translategram.cache import Cache",
                    "translategram.translategram.cache.Cache"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from translategram.translategram.translator_services import TranslatorService",
                    "translategram.translategram.translator_services.TranslatorService"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 4,
            "gen_code": "class Translator:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service()\n        self.cache_system = cache_system() if cache_system else None\n\n    def handler_translator(self, message: str, source_lang: str) -> Callable[\n        [Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]\n    ]:\n        async def wrapper(func):\n            async def inner(*args, **kwargs):\n                translated_message = self.translator_service.translate(message, target_language=source_lang)\n                return await func(*args, **kwargs, message=translated_message)\n            return inner\n        return wrapper",
            "gen_import": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/translategram/translator.py",
            "relative_path": "translategram/translategram/translator.py",
            "fqn_list": "translategram/translategram/translator.py/Translator/dynamic_handler_translator",
            "class": "translategram/translategram/translator.py.Translator",
            "signature": "def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = \"auto\") -> Callable[\n        [Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]\n    ]:",
            "comment": null,
            "comment_free_code": "@abstractmethod\ndef dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str='auto') -> Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]:\n    ...",
            "start_lineno": 44,
            "end_lineno": 49,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "translategram/translategram/translator.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Coroutine",
                    "typing.Coroutine"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from translategram.translategram.cache import Cache",
                    "translategram.translategram.cache.Cache"
                ],
                [
                    "translategram/translategram/translator.py",
                    "from translategram.translategram.translator_services import TranslatorService",
                    "translategram.translategram.translator_services.TranslatorService"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 5,
            "gen_code": "class Translator:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service()\n        self.cache_system = cache_system() if cache_system else None\n\n    def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> Callable[\n        [Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]\n    ]:\n        async def wrapper(func):\n            async def inner(*args, **kwargs):\n                message = message_func(*args, **kwargs)\n                translated_message = self.translator_service.translate(message, target_language=source_lang)\n                return await func(*args, **kwargs, message=translated_message)\n            return inner\n        return wrapper",
            "gen_import": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/python_telegram_bot_translator/adapter.py",
            "relative_path": "translategram/python_telegram_bot_translator/adapter.py",
            "fqn_list": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/__init__",
            "class": "translategram/python_telegram_bot_translator/adapter.py.PythonTelegramBotAdapter",
            "signature": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None] = None) -> None:",
            "comment": "Initializes a new PythonTelegramBotAdapter instance using the specified `translator_service`.\n\n:param translator_service: The `TranslatorService` to use for translations.\n:param cache_system: The cache system to be used for caching translations. If None, caching is disabled.",
            "comment_free_code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None]=None) -> None:\n    \n    self._translator_service = translator_service()\n    self._cache_system = cache_system",
            "start_lineno": 18,
            "end_lineno": 30,
            "local_variables": {
                "PythonTelegramBotAdapter": [
                    "msg = await self._cache_system.retrieve(",
                    "key=func.__name__ + \"_\" + user_lang",
                    ") if self._cache_system is not None else \"\"  # type: ignore",
                    "msg = await self._translator_service.translate_str(",
                    "text=message,",
                    "target_language=user_lang,",
                    "source_language=source_lang,",
                    ")",
                    "msg = message",
                    "msg = await self._get_message_from_cache(",
                    "func, user_lang, message, source_lang",
                    ")",
                    "user_lang = (",
                    "update.effective_user.language_code if update.effective_user else \"en\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                48,
                44
            ],
            "local_import": [
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.translator import Translator",
                    "translategram.translategram.translator.Translator"
                ]
            ],
            "third_import": [
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Coroutine",
                    "typing.Coroutine"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from telegram.ext import ContextTypes",
                    "telegram.ext.ContextTypes"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from telegram import Update",
                    "telegram.Update"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.cache import Cache",
                    "translategram.translategram.cache.Cache"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.translator_services import TranslatorService",
                    "translategram.translategram.translator_services.TranslatorService"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "translategram/translategram/cache.py/Cache",
                    "translategram/translategram/translator_services.py/TranslatorService"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 6,
            "gen_code": "class PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n        self._translator = Translator(translator_service, cache_system)\n\n    async def translate_message(self, message: str, target_language: str, source_language: str = 'auto') -> str:\n        if self.cache_system:\n            cache_key = f'{message}_{target_language}_{source_language}'\n            cached_msg = self.cache_system.retrieve(cache_key)\n            if cached_msg:\n                return cached_msg\n        translated_msg = self._translator.translator_service.translate(message, target_language, source_language)\n        if self.cache_system:\n            self.cache_system.store(cache_key, translated_msg)\n        return translated_msg",
            "gen_import": [
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/python_telegram_bot_translator/adapter.py",
            "relative_path": "translategram/python_telegram_bot_translator/adapter.py",
            "fqn_list": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/handler_translator",
            "class": "translategram/python_telegram_bot_translator/adapter.py.PythonTelegramBotAdapter",
            "signature": "def handler_translator(self, message: str, source_lang: str = \"auto\") -> Callable[\n        [Callable[[Any, Any, str], object]],\n        Callable[[Any, Any, str], Coroutine[Any, Any, Any]],\n    ]:",
            "comment": "A decorator that wraps a python-telegram-bot `handler` function to provide translation functionality.\n\nThe decorated function will be executed after being wrapped with a new function that translates\nthe incoming message into the user's preferred language (if it is not already in that language).\n\n:param message: The message to translate.\n:return: A coroutine that wraps the handler function and provides translation functionality.",
            "comment_free_code": "def handler_translator(self, message: str, source_lang: str='auto') -> Callable[[Callable[[Any, Any, str], object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]:\n    \n\n    def decorator(func: Callable[[Update, ContextTypes.DEFAULT_TYPE, str], object]) -> Callable[[Any, Any, str], Coroutine[Any, Any, Any]]:\n        \n\n        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str=message) -> Any:\n            user_lang = await self._get_user_language(update=update)\n            message = await self._get_translated_message(user_lang=str(user_lang), message=message, func=func, source_lang=source_lang)\n            return await self._return_handler_function(func=func, update=update, context=context, message=message)\n        return wrapper\n    return decorator",
            "start_lineno": 135,
            "end_lineno": 179,
            "local_variables": {
                "PythonTelegramBotAdapter": [
                    "msg = await self._cache_system.retrieve(",
                    "key=func.__name__ + \"_\" + user_lang",
                    ") if self._cache_system is not None else \"\"  # type: ignore",
                    "msg = await self._translator_service.translate_str(",
                    "text=message,",
                    "target_language=user_lang,",
                    "source_language=source_lang,",
                    ")",
                    "msg = message",
                    "msg = await self._get_message_from_cache(",
                    "func, user_lang, message, source_lang",
                    ")",
                    "user_lang = (",
                    "update.effective_user.language_code if update.effective_user else \"en\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                60
            ],
            "local_import": [
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.translator import Translator",
                    "translategram.translategram.translator.Translator"
                ]
            ],
            "third_import": [
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Coroutine",
                    "typing.Coroutine"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from telegram.ext import ContextTypes",
                    "telegram.ext.ContextTypes"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from telegram import Update",
                    "telegram.Update"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.cache import Cache",
                    "translategram.translategram.cache.Cache"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.translator_services import TranslatorService",
                    "translategram.translategram.translator_services.TranslatorService"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/handler_translator/decorator"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 7,
            "gen_code": "class PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n        self._translator = Translator(translator_service, cache_system)\n\n    async def translate_message(self, message: str, target_language: str, source_language: str = 'auto') -> str:\n        if self.cache_system:\n            cache_key = f'{message}_{target_language}_{source_language}'\n            cached_msg = self.cache_system.retrieve(cache_key)\n            if cached_msg:\n                return cached_msg\n        translated_msg = self._translator.translator_service.translate(message, target_language, source_language)\n        if self.cache_system:\n            self.cache_system.store(cache_key, translated_msg)\n        return translated_msg",
            "gen_import": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/translategram/translategram/python_telegram_bot_translator/adapter.py",
            "relative_path": "translategram/python_telegram_bot_translator/adapter.py",
            "fqn_list": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/dynamic_handler_translator",
            "class": "translategram/python_telegram_bot_translator/adapter.py.PythonTelegramBotAdapter",
            "signature": "def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = \"auto\") -> Callable[\n        [Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]\n    ]:",
            "comment": null,
            "comment_free_code": "def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str='auto') -> Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]:\n\n    def decorator(func: Callable[[Update, ContextTypes.DEFAULT_TYPE, str], object]) -> Callable[[Any, Any], Coroutine[Any, Any, Any]]:\n\n        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Any:\n            user_inp = ' '.join(context.args) if context.args else ''\n            args = [user_inp]\n            if type(update) in inspect.get_annotations(message_func).values():\n                args.append(update)\n            message = await self._get_message_func_result(message_func, *args)\n            user_lang = await self._get_user_language(update=update)\n            message = await self._get_translated_message(user_lang=user_lang, message=message, func=func, source_lang=source_lang)\n            return await self._return_handler_function(func=func, update=update, context=context, message=message)\n        return wrapper\n    return decorator",
            "start_lineno": 181,
            "end_lineno": 213,
            "local_variables": {
                "PythonTelegramBotAdapter": [
                    "msg = await self._cache_system.retrieve(",
                    "key=func.__name__ + \"_\" + user_lang",
                    ") if self._cache_system is not None else \"\"  # type: ignore",
                    "msg = await self._translator_service.translate_str(",
                    "text=message,",
                    "target_language=user_lang,",
                    "source_language=source_lang,",
                    ")",
                    "msg = message",
                    "msg = await self._get_message_from_cache(",
                    "func, user_lang, message, source_lang",
                    ")",
                    "user_lang = (",
                    "update.effective_user.language_code if update.effective_user else \"en\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                61
            ],
            "local_import": [
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.translator import Translator",
                    "translategram.translategram.translator.Translator"
                ]
            ],
            "third_import": [
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Coroutine",
                    "typing.Coroutine"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from telegram.ext import ContextTypes",
                    "telegram.ext.ContextTypes"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from telegram import Update",
                    "telegram.Update"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.cache import Cache",
                    "translategram.translategram.cache.Cache"
                ],
                [
                    "translategram/python_telegram_bot_translator/adapter.py",
                    "from translategram.translategram.translator_services import TranslatorService",
                    "translategram.translategram.translator_services.TranslatorService"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/dynamic_handler_translator/decorator"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 8,
            "gen_code": "class PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n        self._translator = Translator(translator_service, cache_system)\n\n    async def translate_message(self, message_func: Callable[[str, Any], str], target_language: str, source_language: str = 'auto') -> str:\n        message = message_func()\n        if self.cache_system:\n            cache_key = f'{message}_{target_language}_{source_language}'\n            cached_msg = self.cache_system.retrieve(cache_key)\n            if cached_msg:\n                return cached_msg\n        translated_msg = self._translator.translator_service.translate(message, target_language, source_language)\n        if self.cache_system:\n            self.cache_system.store(cache_key, translated_msg)\n        return translated_msg",
            "gen_import": [
                "from typing import Callable, Any, Coroutine, Type",
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import MtranslateTranslatorService",
                "from translategram.translategram.cache import PickleCache"
            ]
        }
    ]
}