{
  "development_plan": [
    {
      "task_id": 1,
      "fqn": "postgrestq/task_queue.py/TaskQueue/__init__",
      "dependency": null,
      "required_information": "Database connection string (DSN), queue name, table name, reset flag, create_table flag, and TTL zero callback function signature."
    },
    {
      "task_id": 2,
      "fqn": "postgrestq/task_queue.py/TaskQueue/connect",
      "dependency": [
        1
      ],
      "required_information": "Method to establish database connection using psycopg."
    },
    {
      "task_id": 3,
      "fqn": "postgrestq/task_queue.py/TaskQueue/_create_queue_table",
      "dependency": [
        2
      ],
      "required_information": "SQL query for creating the task queue table if not exists."
    },
    {
      "task_id": 4,
      "fqn": "postgrestq/task_queue.py/TaskQueue/__len__",
      "dependency": [
        2
      ],
      "required_information": "SQL query to count the number of tasks in the queue."
    },
    {
      "task_id": 5,
      "fqn": "postgrestq/task_queue.py/TaskQueue/add",
      "dependency": [
        2
      ],
      "required_information": "Method to serialize task data and insert a new task into the queue."
    },
    {
      "task_id": 6,
      "fqn": "postgrestq/task_queue.py/TaskQueue/get",
      "dependency": [
        2
      ],
      "required_information": "SQL query to select and lock a task for processing using row-level locks."
    },
    {
      "task_id": 7,
      "fqn": "postgrestq/task_queue.py/TaskQueue/complete",
      "dependency": [
        2
      ],
      "required_information": "Method to mark a task as completed in the database."
    },
    {
      "task_id": 8,
      "fqn": "postgrestq/task_queue.py/TaskQueue/is_empty",
      "dependency": [
        4
      ],
      "required_information": "Method to check if the task queue is empty."
    },
    {
      "task_id": 9,
      "fqn": "postgrestq/task_queue.py/TaskQueue/check_expired_leases",
      "dependency": [
        2
      ],
      "required_information": "Method to check and handle expired leases on tasks."
    },
    {
      "task_id": 10,
      "fqn": "postgrestq/task_queue.py/TaskQueue/get_updated_expired_task",
      "dependency": [
        9
      ],
      "required_information": "Method to update and return tasks with expired leases."
    },
    {
      "task_id": 11,
      "fqn": "postgrestq/task_queue.py/TaskQueue/_serialize",
      "dependency": [
        5
      ],
      "required_information": "Method to serialize task data before inserting into the database."
    },
    {
      "task_id": 12,
      "fqn": "postgrestq/task_queue.py/TaskQueue/_deserialize",
      "dependency": [
        6,
        10
      ],
      "required_information": "Method to deserialize task data when retrieving from the database."
    },
    {
      "task_id": 13,
      "fqn": "postgrestq/task_queue.py/TaskQueue/reschedule",
      "dependency": [
        9
      ],
      "required_information": "Method to reschedule a task with expired lease."
    },
    {
      "task_id": 14,
      "fqn": "postgrestq/task_queue.py/TaskQueue/_reset",
      "dependency": [
        1
      ],
      "required_information": "Method to reset the task queue by deleting all tasks or specific tasks based on conditions."
    },
    {
      "task_id": 15,
      "fqn": "postgrestq/task_queue.py/TaskQueue/prune_completed_tasks",
      "dependency": [
        7
      ],
      "required_information": "Method to remove completed tasks from the queue based on a specified time threshold."
    },
    {
      "task_id": 16,
      "fqn": "postgrestq/task_queue.py/TaskQueue/__iter__",
      "dependency": [
        6
      ],
      "required_information": "Implement iterator to loop over tasks in the queue, automatically handling task completion."
    }
  ]
}