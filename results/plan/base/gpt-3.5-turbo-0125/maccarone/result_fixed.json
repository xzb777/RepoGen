{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/file_sizes_ext.py",
            "relative_path": "examples/file_sizes_ext.py",
            "fqn_list": "examples/file_sizes_ext.py/main",
            "class": null,
            "signature": "def main(path: str, extension: str | None):",
            "comment": null,
            "comment_free_code": "def main(path: str, extension: str | None):\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f)) and (f.endswith(extension) if extension else True)]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(colored(f'Filename: {fn}', 'green'), colored(f'Size: {size} bytes', 'blue'))",
            "start_lineno": 8,
            "end_lineno": 19,
            "local_variables": {
                "module": [
                    "parser = argparse.ArgumentParser()",
                    "args = parser.parse_args()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "examples/file_sizes_ext.py",
                    "import os",
                    "os"
                ],
                [
                    "examples/file_sizes_ext.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/file_sizes_ext.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "examples/file_sizes_ext.py",
                    "from termcolor import colored",
                    "termcolor.colored"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 0,
            "gen_code": "def main(path: str, extension: str | None):\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(fn, size)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('path', type=str)\nparser.add_argument('--extension', type=str, default=None)\nargs = parser.parse_args()\nmain(args.path, args.extension)",
            "gen_import": [
                "import os",
                "import argparse"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/add.py",
            "relative_path": "examples/add.py",
            "fqn_list": "examples/add.py/add_two_numbers",
            "class": null,
            "signature": "def add_two_numbers(x, y):",
            "comment": null,
            "comment_free_code": "def add_two_numbers(x, y):\n    return x + y",
            "start_lineno": 1,
            "end_lineno": 3,
            "local_variables": {
                "module": [
                    "parser = argparse.ArgumentParser()",
                    "args = parser.parse_args()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "examples/add.py",
                    "import argparse",
                    "argparse"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 1,
            "gen_code": "def add_two_numbers(x, y):\n    return x + y\n\nparser = argparse.ArgumentParser()\nparser.add_argument('x', type=int)\nparser.add_argument('y', type=int)\nargs = parser.parse_args()\nresult = add_two_numbers(args.x, args.y)\nprint('Sum:', result)",
            "gen_import": [
                "import argparse"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/fizzbuzz.py",
            "relative_path": "examples/fizzbuzz.py",
            "fqn_list": "examples/fizzbuzz.py/main",
            "class": null,
            "signature": "def main(n: int):",
            "comment": null,
            "comment_free_code": "def main(n: int):\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)",
            "start_lineno": 1,
            "end_lineno": 11,
            "local_variables": {
                "module": [
                    "parser = argparse.ArgumentParser()",
                    "args = parser.parse_args()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "examples/fizzbuzz.py",
                    "import argparse",
                    "argparse"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 2,
            "gen_code": "def main(n: int):\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('n', type=int)\nargs = parser.parse_args()\nmain(args.n)",
            "gen_import": [
                "import argparse"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/Todo/__init__",
            "class": "examples/todo.py.Todo",
            "signature": "def __init__(self, description, status = 'not done', id = None):",
            "comment": null,
            "comment_free_code": "def __init__(self, description, status='not done', id=None):\n    self.description = description\n    self.status = status\n    self.id = id if id is not None else uuid.uuid4()",
            "start_lineno": 3,
            "end_lineno": 6,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 3,
            "gen_code": "def __init__(self, description, status='not done', id=None):\n    self.description = description\n    self.status = status\n    self.id = id",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/load_todos",
            "class": null,
            "signature": "def load_todos() -> list[Todo]:",
            "comment": null,
            "comment_free_code": "def load_todos() -> list[Todo]:\n    import json\n    import os\n\n    def load_todos() -> list[Todo]:\n        if os.path.exists('~/.todos.json'):\n            with open('~/.todos.json', 'r') as f:\n                todos = json.load(f)\n            return [Todo(**todo) for todo in todos]\n        else:\n            return []",
            "start_lineno": 9,
            "end_lineno": 19,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                33,
                34
            ],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "examples/todo.py/load_todos/load_todos"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "examples/todo.py/Todo"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 4,
            "gen_code": "def load_todos() -> list[Todo]:\n    todos = []\n    # Implementation logic for loading todos\n    return todos",
            "gen_import": [
                "from examples.todo import Todo"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/save_todos",
            "class": null,
            "signature": "def save_todos(todos: list[Todo]) -> None:",
            "comment": null,
            "comment_free_code": "def save_todos(todos: list[Todo]) -> None:\n\n    def save_todos(todos: list[Todo]) -> None:\n        with open('~/.todos.json', 'w') as f:\n            json.dump([todo.__dict__ for todo in todos], f)",
            "start_lineno": 24,
            "end_lineno": 28,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                33,
                35
            ],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "examples/todo.py/save_todos/save_todos"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "examples/todo.py/Todo"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 5,
            "gen_code": "def save_todos(todos: list[Todo]) -> None:\n    with open('todos.json', 'w') as file:\n        json.dump([dataclasses.asdict(todo) for todo in todos], file, indent=4)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/add_todo",
            "class": null,
            "signature": "def add_todo(description):",
            "comment": null,
            "comment_free_code": "def add_todo(description):\n\n    def add_todo(description):\n        todo = Todo(description)\n        todos.append(todo)\n        save_todos(todos)",
            "start_lineno": 31,
            "end_lineno": 36,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                38
            ],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "examples/todo.py/add_todo/add_todo"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 6,
            "gen_code": "def add_todo(description):\n    todos = load_todos()\n    new_todo = Todo(description)\n    todos.append(new_todo)\n    save_todos(todos)\n    print('Todo added successfully')",
            "gen_import": [
                "from dataclasses import asdict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/remove_todo",
            "class": null,
            "signature": "def remove_todo(id):",
            "comment": null,
            "comment_free_code": "def remove_todo(id):\n\n    def remove_todo(id):\n        todos = [todo for todo in todos if todo.id != id]\n        save_todos(todos)",
            "start_lineno": 39,
            "end_lineno": 43,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                39
            ],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "examples/todo.py/remove_todo/remove_todo"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 7,
            "gen_code": "def remove_todo(id):\n    todos = load_todos()\n    for todo in todos:\n        if todo.id == id:\n            todos.remove(todo)\n            save_todos(todos)\n            return\n    print('Todo not found')",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/print_todos",
            "class": null,
            "signature": "def print_todos():",
            "comment": null,
            "comment_free_code": "def print_todos():\n\n    def print_todos():\n        for todo in todos:\n            print(f'{todo.id}: {todo.description} - {todo.status}')",
            "start_lineno": 46,
            "end_lineno": 50,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                4
            ],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "examples/todo.py/print_todos/print_todos"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 8,
            "gen_code": "def print_todos():\n    todos = load_todos()\n    for todo in todos:\n        print(f'ID: {todo.id}, Description: {todo.description}, Status: {todo.status}')",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/todo.py",
            "relative_path": "examples/todo.py",
            "fqn_list": "examples/todo.py/main",
            "class": null,
            "signature": "def main():",
            "comment": null,
            "comment_free_code": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--add', help='Add a new todo')\n    parser.add_argument('--remove', help='Remove a todo by id')\n    parser.add_argument('--list', action='store_true', help='List all todos')\n    args = parser.parse_args()\n    if args.add:\n        add_todo(args.add)\n    elif args.remove:\n        remove_todo(args.remove)\n    elif args.list:\n        print_todos()\n    else:\n        parser.print_help()",
            "start_lineno": 55,
            "end_lineno": 69,
            "local_variables": {
                "module": [
                    "todos = load_todos()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                40,
                41,
                42
            ],
            "local_import": [],
            "third_import": [
                [
                    "examples/todo.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/todo.py",
                    "import json",
                    "json"
                ],
                [
                    "examples/todo.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "examples/todo.py/add_todo",
                    "examples/todo.py/remove_todo",
                    "examples/todo.py/print_todos"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 9,
            "gen_code": "def main():\n    print('Todo List:')\n    print_todos()",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/examples/file_sizes.py",
            "relative_path": "examples/file_sizes.py",
            "fqn_list": "examples/file_sizes.py/main",
            "class": null,
            "signature": "def main(path: str):",
            "comment": null,
            "comment_free_code": "def main(path: str):\n    import os\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    for fn in filenames:\n        size = os.path.getsize(fn)\n        print(fn, size)",
            "start_lineno": 1,
            "end_lineno": 11,
            "local_variables": {
                "module": [
                    "parser = argparse.ArgumentParser()",
                    "args = parser.parse_args()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "examples/file_sizes.py",
                    "import argparse",
                    "argparse"
                ],
                [
                    "examples/file_sizes.py",
                    "import os",
                    "os"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 10,
            "gen_code": "def main(path: str):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('path', type=str)\n    args = parser.parse_args()\n    filenames = [f for f in os.listdir(args.path) if os.path.isfile(os.path.join(args.path, f))]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(args.path, fn))\n        print(fn, size)",
            "gen_import": [
                "import argparse",
                "import os"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/MissingPiece/get_line_pos",
            "class": "src/maccarone/preprocessor.py.MissingPiece",
            "signature": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:",
            "comment": null,
            "comment_free_code": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:\n    start_line = raw_source.count('\\n', 0, self.start) + 1\n    end_line = raw_source.count('\\n', 0, self.end) + 1\n    return (start_line, end_line)",
            "start_lineno": 39,
            "end_lineno": 43,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 11,
            "gen_code": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:\n    line_number = raw_source.count('\\n', 0, self.start) + 1\n    line_start = raw_source.rfind('\\n', 0, self.start) + 1\n    return line_number, self.start - line_start + 1",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/MissingPiece/complete",
            "class": "src/maccarone/preprocessor.py.MissingPiece",
            "signature": "def complete(self, replacement: Optional[str]) -> str:",
            "comment": null,
            "comment_free_code": "def complete(self, replacement: Optional[str]) -> str:\n    (indent, guidance) = (self.indent, self.guidance)\n    if '\\n' in guidance:\n        guidance_lines = '\\n'\n        guidance_lines += '\\n'.join((f'{indent}\n        guidance_lines += f'\\n{indent}\n    else:\n        guidance_lines = guidance\n    source = f'{indent}\n    if replacement is not None:\n        source += indent + indent.join(replacement.splitlines(True))\n        source += f'{indent}\n    elif self.inlined is not None:\n        source += self.inlined\n        source += f'{indent}\n    return source",
            "start_lineno": 45,
            "end_lineno": 64,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 12,
            "gen_code": "def complete(self, replacement: Optional[str]) -> str:\n    if replacement is not None:\n        return replacement\n    return ''",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/find_line_number",
            "class": null,
            "signature": "def find_line_number(text: str, pos: int):",
            "comment": null,
            "comment_free_code": "def find_line_number(text: str, pos: int):\n    return text.count('\\n', 0, pos) + 1",
            "start_lineno": 105,
            "end_lineno": 107,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 13,
            "gen_code": "def find_line_number(text: str, pos: int):\n    return text.count('\\n', 0, pos) + 1",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/__init__",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def __init__(self, raw_source: str, block_at_line: Optional[int] = None):",
            "comment": null,
            "comment_free_code": "def __init__(self, raw_source: str, block_at_line: Optional[int]=None):\n    self._raw_source = raw_source\n    self._block_at_line = block_at_line",
            "start_lineno": 111,
            "end_lineno": 113,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 14,
            "gen_code": "def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n    self.raw_source = raw_source\n    self.block_at_line = block_at_line",
            "gen_import": [
                "from typing import Optional"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/generic_visit",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def generic_visit(self, node: Node, visited_children: List[Node]):",
            "comment": null,
            "comment_free_code": "def generic_visit(self, node: Node, visited_children: List[Node]):\n    return visited_children or node",
            "start_lineno": 115,
            "end_lineno": 116,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 15,
            "gen_code": "def generic_visit(self, node: Node, visited_children: List[Node]):\n    for child in visited_children:\n        if isinstance(child, list):\n            for c in child:\n                self.generic_visit(c, visited_children)\n        elif isinstance(child, Node):\n            self.generic_visit(child, visited_children)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_maccarone(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_maccarone(self, node: Node, visited_children: list):\n    (first_source, chunks) = visited_children\n    return [first_source] + list(chain(*chunks))",
            "start_lineno": 118,
            "end_lineno": 121,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 16,
            "gen_code": "def visit_maccarone(self, node: Node, visited_children: list):\n    for child in visited_children:\n        if isinstance(child, list):\n            for c in child:\n                self.generic_visit(c, visited_children)\n        elif isinstance(child, Node):\n            self.generic_visit(child, visited_children)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone_chunk",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_maccarone_chunk(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_maccarone_chunk(self, node: Node, visited_children: list):\n    (snippet, source) = visited_children\n    if isinstance(source, list):\n        source_list = source\n    else:\n        source_list = []\n    return [snippet] + source_list",
            "start_lineno": 123,
            "end_lineno": 131,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 17,
            "gen_code": "def visit_maccarone_chunk(self, node: Node, visited_children: list):\n    # Implementation logic for visiting maccarone chunk\n    pass",
            "gen_import": [
                "from parsimonious.nodes import Node",
                "from typing import List, Optional"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_snippet(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_snippet(self, node: Node, visited_children: list):\n    (snippet_open, quantified_source) = visited_children\n    if self._block_at_line is None:\n        enabled = True\n    else:\n        start_line = find_line_number(self._raw_source, node.start)\n        end_line = find_line_number(self._raw_source, node.end)\n        enabled = start_line <= self._block_at_line <= end_line\n    if isinstance(quantified_source, list):\n        ((source, _),) = quantified_source\n    else:\n        source = None\n    return MissingPiece(start=node.start, end=node.end, indent=snippet_open.indent, guidance=snippet_open.guidance, enabled=enabled, inlined=source)",
            "start_lineno": 133,
            "end_lineno": 156,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                44,
                13
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/maccarone/preprocessor.py/find_line_number"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/MissingPiece"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 18,
            "gen_code": "def visit_snippet(self, node: Node, visited_children: list):\n    # Implementation logic for visiting snippet\n    pass",
            "gen_import": [
                "from parsimonious.nodes import Node",
                "from typing import List, Optional"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_snippet_open(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_snippet_open(self, node: Node, visited_children: list):\n    (single_or_multi,) = visited_children\n    return single_or_multi",
            "start_lineno": 159,
            "end_lineno": 162,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 19,
            "gen_code": "def visit_snippet_open(self, node: Node, visited_children: list):\n    # Implementation logic for visiting snippet open\n    pass",
            "gen_import": [
                "from parsimonious.nodes import Node",
                "from typing import List, Optional"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_single",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_snippet_open_single(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_snippet_open_single(self, node: Node, visited_children: list):\n    (guidance_open, guidance, _, _) = visited_children\n    return SnippetOpen(indent=guidance_open.indent, guidance=guidance.text)",
            "start_lineno": 164,
            "end_lineno": 170,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                12
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/SnippetOpen"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 20,
            "gen_code": "def visit_snippet_open_single(self, node: Node, visited_children: list):\n    ws = \"[ \\t]*\"\n    nl = ws + \"[\\r\\n]\"\n    guidance_open = ws + \"#<<\"\n    guidance_inner = \"((?!>>).)*\"\n    snippet_open_single = guidance_open + guidance_inner + \"<<\" + nl\n    return snippet_open_single",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_multi",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_snippet_open_multi(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_snippet_open_multi(self, node: Node, visited_children: list):\n    (guidance_open, _, guidance, _) = visited_children\n    return SnippetOpen(indent=guidance_open.indent, guidance=guidance.text)",
            "start_lineno": 172,
            "end_lineno": 178,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                12
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/SnippetOpen"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 21,
            "gen_code": "def visit_snippet_open_multi(self, node: Node, visited_children: list):\n    # Implement the logic for visiting a snippet open multi block here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_open",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_guidance_open(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_guidance_open(self, node: Node, visited_children: list):\n    (ws, _) = visited_children\n    return GuidanceOpen(indent=ws.text)",
            "start_lineno": 180,
            "end_lineno": 183,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                10
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/GuidanceOpen"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 22,
            "gen_code": "def visit_guidance_open(self, node: Node, visited_children: list):\n    # Implement the logic for visiting a guidance open block here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_line",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_guidance_line(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_guidance_line(self, node: Node, visited_children: list):\n    (_, _, guidance_inner, _) = visited_children\n    return guidance_inner",
            "start_lineno": 185,
            "end_lineno": 188,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 23,
            "gen_code": "def visit_guidance_line(self, node: Node, visited_children: list):\n    # Implement the logic for visiting a guidance line block here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_lines",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_guidance_lines(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_guidance_lines(self, node: Node, visited_children: list):\n    return Guidance(text='\\n'.join((g.text for g in visited_children)))",
            "start_lineno": 190,
            "end_lineno": 193,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                11
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/Guidance"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 24,
            "gen_code": "def visit_guidance_lines(self, node: Node, visited_children: list):\n    # Implement the logic for visiting a guidance lines block here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_inner",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_guidance_inner(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_guidance_inner(self, node: Node, visited_children: list):\n    return Guidance(text=node.text)",
            "start_lineno": 195,
            "end_lineno": 196,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                11
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/Guidance"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 25,
            "gen_code": "def visit_guidance_inner(self, node: Node, visited_children: list):\n    # Implement the logic for visiting a guidance inner block here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_human_source",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_human_source(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_human_source(self, node: Node, visited_children: list):\n    return PresentPiece(start=node.start, end=node.end, text=node.text)",
            "start_lineno": 198,
            "end_lineno": 203,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                7
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/PresentPiece"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 26,
            "gen_code": "def visit_human_source(self, node: Node, visited_children: list):\n    raw_source = self.raw_source\n    block_at_line = self.block_at_line\n    # Your implementation code here",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_ai_source",
            "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
            "signature": "def visit_ai_source(self, node: Node, visited_children: list):",
            "comment": null,
            "comment_free_code": "def visit_ai_source(self, node: Node, visited_children: list):\n    return node.text",
            "start_lineno": 205,
            "end_lineno": 206,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 27,
            "gen_code": "def visit_ai_source(self, node: Node, visited_children: list):\n    raw_source = self.raw_source\n    block_at_line = self.block_at_line\n    # Your implementation code here",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/raw_source_to_pieces",
            "class": null,
            "signature": "def raw_source_to_pieces(input: str, block_at_line: Optional[int] = None) -> List[Piece]:",
            "comment": null,
            "comment_free_code": "def raw_source_to_pieces(input: str, block_at_line: Optional[int]=None) -> List[Piece]:\n    tree = grammar.parse(input)\n    visitor = RawSourceVisitor(input, block_at_line)\n    pieces = visitor.visit(tree)\n    return pieces",
            "start_lineno": 208,
            "end_lineno": 213,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                49,
                6
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/RawSourceVisitor",
                    "src/maccarone/preprocessor.py/Piece"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 28,
            "gen_code": "def raw_source_to_pieces(input: str, block_at_line: Optional[int] = None) -> List[Piece]:\n    # Your implementation code here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/raw_pieces_to_tagged_input",
            "class": null,
            "signature": "def raw_pieces_to_tagged_input(raw_pieces: List[Piece]) -> str:",
            "comment": null,
            "comment_free_code": "def raw_pieces_to_tagged_input(raw_pieces: List[Piece]) -> str:\n    tag_source = ''\n    id = 0\n    for piece in raw_pieces:\n        if isinstance(piece, PresentPiece):\n            tag_source += piece.text\n        elif isinstance(piece, MissingPiece):\n            if piece.enabled:\n                tag_source += f'\n                id += 1\n            else:\n                tag_source += f'{piece.indent}\n                if piece.inlined is None:\n                    tag_source += f'{piece.indent}\n                else:\n                    tag_source += f'{piece.inlined}'\n        else:\n            raise TypeError('unknown piece type', piece)\n    logger.debug('tagged input \u2193\\n%s', tag_source)\n    return tag_source",
            "start_lineno": 215,
            "end_lineno": 238,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                44,
                6,
                7
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/MissingPiece",
                    "src/maccarone/preprocessor.py/Piece",
                    "src/maccarone/preprocessor.py/PresentPiece"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 29,
            "gen_code": "def raw_pieces_to_tagged_input(raw_pieces: List[Piece]) -> str:\n    # Your implementation code here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/tagged_input_to_tagged_output",
            "class": null,
            "signature": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: ChatAPI) -> str:",
            "comment": null,
            "comment_free_code": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: ChatAPI) -> str:\n    system_prompt = '\\nYou are an expert programmer working on contract. Your client has written a partial program, but left pieces for you to complete. They have marked those with `<write_this>` tags inside Python comments, e.g.:\\n\\n```\\ndef add_two_numbers(x, y):\\n    \n    chat_messages = [{'role': 'system', 'content': system_prompt}, {'role': 'user', 'content': tagged_input}]\n    tagged_output = chat_api.complete_chat('tagged_input_to_tagged_output', chat_messages)\n    logger.debug('tagged output \u2193\\n%s', tagged_output)\n    return tagged_output",
            "start_lineno": 240,
            "end_lineno": 281,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                52,
                29
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/maccarone/openai.py/ChatAPI/complete_chat"
                ],
                "Class Dependency": [
                    "src/maccarone/openai.py/ChatAPI"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 30,
            "gen_code": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: ChatAPI) -> str:\n    # Your implementation code here\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/tagged_output_to_completed_pieces",
            "class": null,
            "signature": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:",
            "comment": null,
            "comment_free_code": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:\n    pattern = re.compile('<completed id=\"(?P<id>\\\\d+)\">\\\\n(?P<content>.+?)</(completed)?>', re.DOTALL)\n    matches = pattern.finditer(tagged_output)\n    completed = {int(m.group('id')): m.group('content') for m in matches}\n    return completed",
            "start_lineno": 283,
            "end_lineno": 288,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 31,
            "gen_code": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:\n    completed_pieces = {}\n    # Parse the tagged output and extract completed pieces\n    # Populate the completed_pieces dictionary\n    return completed_pieces",
            "gen_import": [
                "from typing import Dict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/pieces_to_final_source",
            "class": null,
            "signature": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:",
            "comment": null,
            "comment_free_code": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:\n    id = 0\n    final_source = ''\n    for raw in raw_pieces:\n        if isinstance(raw, PresentPiece):\n            final_source += raw.text\n        elif isinstance(raw, MissingPiece):\n            if raw.enabled:\n                final_source += raw.complete(completed_pieces[id])\n                id += 1\n            else:\n                final_source += raw.complete(None)\n        else:\n            raise TypeError('unknown piece type', raw)\n    logger.debug('final source \u2193\\n%s', final_source)\n    return final_source",
            "start_lineno": 290,
            "end_lineno": 311,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                44,
                6,
                7
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/preprocessor.py/MissingPiece",
                    "src/maccarone/preprocessor.py/Piece",
                    "src/maccarone/preprocessor.py/PresentPiece"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 32,
            "gen_code": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:\n    final_source = ''\n    # Combine raw pieces and completed pieces to generate final source\n    # Populate the final_source string\n    return final_source",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/preprocessor.py",
            "relative_path": "src/maccarone/preprocessor.py",
            "fqn_list": "src/maccarone/preprocessor.py/preprocess_maccarone",
            "class": null,
            "signature": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int] = None) -> str:",
            "comment": null,
            "comment_free_code": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int]=None) -> str:\n    raw_pieces = raw_source_to_pieces(raw_source, block_at_line)\n    tagged_input = raw_pieces_to_tagged_input(raw_pieces)\n    tagged_output = tagged_input_to_tagged_output(tagged_input, chat_api)\n    completed_pieces = tagged_output_to_completed_pieces(tagged_output)\n    final_source = pieces_to_final_source(raw_pieces, completed_pieces)\n    return final_source",
            "start_lineno": 313,
            "end_lineno": 327,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)",
                    "grammar = Grammar(",
                    "r\"\"\"",
                    "maccarone = human_source maccarone_chunk*",
                    "maccarone_chunk = snippet human_source?",
                    "",
                    "snippet = snippet_open (ai_source snippet_close)?",
                    "snippet_open = snippet_open_single / snippet_open_multi",
                    "snippet_open_single = guidance_open guidance_inner \">>\" nl",
                    "snippet_open_multi = guidance_open nl guidance_lines guidance_close",
                    "snippet_close = ws \"#<</>>\" nl",
                    "",
                    "guidance_open = ws \"#<<\"",
                    "guidance_close = ws \"#>>\" nl",
                    "guidance_line = ws \"#\" guidance_inner nl",
                    "guidance_lines = guidance_line+",
                    "guidance_inner = ~\"((?!>>).)*\"",
                    "",
                    "human_source = source_line*",
                    "ai_source = source_line*",
                    "source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?",
                    "",
                    "ws = ~\"[ \\t]*\"",
                    "nl = ws ~\"[\\r\\n]\"",
                    "\"\"\"",
                    ")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                46,
                47,
                50,
                52,
                53,
                27
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/preprocessor.py",
                    "import re",
                    "re"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from itertools import chain",
                    "itertools.chain"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import Node",
                    "parsimonious.nodes.Node"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.nodes import NodeVisitor",
                    "parsimonious.nodes.NodeVisitor"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from parsimonious.grammar import Grammar",
                    "parsimonious.grammar.Grammar"
                ],
                [
                    "src/maccarone/preprocessor.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/maccarone/preprocessor.py/raw_pieces_to_tagged_input",
                    "src/maccarone/preprocessor.py/pieces_to_final_source",
                    "src/maccarone/preprocessor.py/raw_source_to_pieces",
                    "src/maccarone/preprocessor.py/tagged_input_to_tagged_output",
                    "src/maccarone/preprocessor.py/tagged_output_to_completed_pieces"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/maccarone/openai.py/ChatAPI"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 33,
            "gen_code": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int] = None) -> str:\n    # Preprocess the raw source using the chat API and completed pieces\n    # Update the source code with the completed pieces\n    # Return the updated source code\n    return updated_source_code",
            "gen_import": [
                "from typing import Optional",
                "from maccarone.chat_api import ChatAPI"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/openai.py",
            "relative_path": "src/maccarone/openai.py",
            "fqn_list": "src/maccarone/openai.py/complete_chat",
            "class": null,
            "signature": "def complete_chat(messages: List[Dict[str, str]], model = \"gpt-4\", on_token: Callable[[int], None] = lambda p: None) -> str:",
            "comment": null,
            "comment_free_code": "def complete_chat(messages: List[Dict[str, str]], model='gpt-4', on_token: Callable[[int], None]=lambda p: None) -> str:\n    helicone_key = os.getenv('HELICONE_API_KEY')\n    if helicone_key is None:\n        headers = {}\n    else:\n        headers = {'Helicone-Auth': helicone_key}\n    responses = cast(Iterable[ChatCompletion], ChatCompletion.create(model=model, messages=messages, stream=True, temperature=0.0, headers=headers))\n    completion = ''\n    logger.info('completing: %r', messages)\n    for (i, partial) in enumerate(responses):\n        delta = partial.choices[0].delta\n        try:\n            completion += str(delta.content)\n        except AttributeError as error:\n            pass\n        on_token(i)\n    logger.info('completion: %r', completion)\n    return completion",
            "start_lineno": 21,
            "end_lineno": 59,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/openai.py",
                    "import os",
                    "os"
                ],
                [
                    "src/maccarone/openai.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import cast",
                    "typing.cast"
                ],
                [
                    "src/maccarone/openai.py",
                    "import openai",
                    "openai"
                ],
                [
                    "src/maccarone/openai.py",
                    "from openai import ChatCompletion",
                    "openai.ChatCompletion"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 34,
            "gen_code": "def complete_chat(messages: List[Dict[str, str]], model='gpt-4', on_token: Callable[[int], None] = lambda p: None) -> str:\n    # Implementation logic for completing chat\n    pass",
            "gen_import": [
                "from typing import List, Dict, Callable"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/openai.py",
            "relative_path": "src/maccarone/openai.py",
            "fqn_list": "src/maccarone/openai.py/ChatAPI/complete_chat",
            "class": "src/maccarone/openai.py.ChatAPI",
            "signature": "def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model = \"gpt-4\") -> str:",
            "comment": null,
            "comment_free_code": "def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model='gpt-4') -> str:\n    return complete_chat(messages, model=model)",
            "start_lineno": 62,
            "end_lineno": 68,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/openai.py",
                    "import os",
                    "os"
                ],
                [
                    "src/maccarone/openai.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "src/maccarone/openai.py",
                    "from typing import cast",
                    "typing.cast"
                ],
                [
                    "src/maccarone/openai.py",
                    "import openai",
                    "openai"
                ],
                [
                    "src/maccarone/openai.py",
                    "from openai import ChatCompletion",
                    "openai.ChatCompletion"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 35,
            "gen_code": "def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model='gpt-4') -> str:\n    try:\n        import requests\n    except ImportError as e:\n        raise ImportError(\n            'The requests library is required for completing chat interactions.'\n        ) from e\n\n    # Implementation logic for completing chat interactions using the specified model\n    # and chat messages\n    return completed_chat_output",
            "gen_import": [
                "from typing import List, Dict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/scripts/preprocess.py",
            "relative_path": "src/maccarone/scripts/preprocess.py",
            "fqn_list": "src/maccarone/scripts/preprocess.py/preprocess",
            "class": null,
            "signature": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:",
            "comment": null,
            "comment_free_code": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:\n    logger.info('preprocessing %s', mn_path)\n    chat_api = ChatAPI()\n    with open(mn_path, 'r') as file:\n        mn_source = file.read()\n    py_source = preprocess_maccarone(mn_source, chat_api, block_at_line=block_at_line)\n    if rewrite:\n        py_path = os.path.splitext(mn_path)[0] + '.py'\n        with open(py_path, 'w') as file:\n            file.write(py_source)\n    if print_:\n        print(py_source, end='')",
            "start_lineno": 14,
            "end_lineno": 40,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                52,
                54
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os",
                    "os"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os.path",
                    "os.path"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import glob",
                    "glob"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from argparse import Namespace",
                    "argparse.Namespace"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.preprocessor import preprocess_maccarone",
                    "maccarone.preprocessor.preprocess_maccarone"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import argparse",
                    "argparse"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/maccarone/preprocessor.py/preprocess_maccarone"
                ],
                "Class Dependency": [
                    "src/maccarone/openai.py/ChatAPI"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 36,
            "gen_code": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:\n    # Implementation logic for preprocessing the specified MN file\n    # with options to print, rewrite, and handle specific block at line\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/scripts/preprocess.py",
            "relative_path": "src/maccarone/scripts/preprocess.py",
            "fqn_list": "src/maccarone/scripts/preprocess.py/main",
            "class": null,
            "signature": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int] = None) -> None:",
            "comment": "Preprocess files with Maccarone snippets.",
            "comment_free_code": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int]=None) -> None:\n    \n    if os.path.isdir(path):\n        mn_files = glob.glob(os.path.join(path, f'**/*{suffix}'), recursive=True)\n    else:\n        mn_files = [path]\n    for mn_file in mn_files:\n        preprocess(mn_file, print_, rewrite, block_at_line)",
            "start_lineno": 42,
            "end_lineno": 55,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                55
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os",
                    "os"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os.path",
                    "os.path"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import glob",
                    "glob"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from argparse import Namespace",
                    "argparse.Namespace"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.preprocessor import preprocess_maccarone",
                    "maccarone.preprocessor.preprocess_maccarone"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import argparse",
                    "argparse"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/maccarone/scripts/preprocess.py/preprocess"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 37,
            "gen_code": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int] = None) -> None:\n    # Implementation logic for the main function to preprocess the specified path\n    # with options to print, rewrite, specify suffix, and handle specific block at line\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/scripts/preprocess.py",
            "relative_path": "src/maccarone/scripts/preprocess.py",
            "fqn_list": "src/maccarone/scripts/preprocess.py/parse_args",
            "class": null,
            "signature": "def parse_args() -> Namespace:",
            "comment": null,
            "comment_free_code": "def parse_args() -> Namespace:\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('path', help='Path to the file or directory to preprocess')\n    parser.add_argument('--print', dest='print_', action='store_true', help='Print the preprocessed source code')\n    parser.add_argument('--rewrite', action='store_true', help='Rewrite the source file with the preprocessed code')\n    parser.add_argument('--suffix', default='.py', help='Suffix for the preprocessed files')\n    parser.add_argument('--block-at-line', type=int, help='Preprocess only the block at given line')\n    args = parser.parse_args()\n    return args",
            "start_lineno": 58,
            "end_lineno": 72,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os",
                    "os"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os.path",
                    "os.path"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import glob",
                    "glob"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from argparse import Namespace",
                    "argparse.Namespace"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.preprocessor import preprocess_maccarone",
                    "maccarone.preprocessor.preprocess_maccarone"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import argparse",
                    "argparse"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 38,
            "gen_code": "def parse_args() -> Namespace:\n    # Implementation logic for parsing command line arguments\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/maccarone/src/maccarone/scripts/preprocess.py",
            "relative_path": "src/maccarone/scripts/preprocess.py",
            "fqn_list": "src/maccarone/scripts/preprocess.py/script_main",
            "class": null,
            "signature": "def script_main():",
            "comment": null,
            "comment_free_code": "def script_main():\n    logging.basicConfig(level=logging.INFO)\n    return main(**vars(parse_args()))",
            "start_lineno": 75,
            "end_lineno": 78,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                56,
                30
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os",
                    "os"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import os.path",
                    "os.path"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import glob",
                    "glob"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import logging",
                    "logging"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from argparse import Namespace",
                    "argparse.Namespace"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.openai import ChatAPI",
                    "maccarone.openai.ChatAPI"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "from maccarone.preprocessor import preprocess_maccarone",
                    "maccarone.preprocessor.preprocess_maccarone"
                ],
                [
                    "src/maccarone/scripts/preprocess.py",
                    "import argparse",
                    "argparse"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/maccarone/scripts/preprocess.py/main",
                    "src/maccarone/scripts/preprocess.py/parse_args"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 39,
            "gen_code": "def script_main():\n    # Implementation logic for the main script execution flow\n    pass",
            "gen_import": []
        }
    ]
}