{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/__init__",
            "imports": [
                "from argparse import ArgumentParser",
                "from argparse import Namespace"
            ],
            "code": "def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):\n    # Initialize the ReverseArgumentParser\n    self.parser = parser\n    self.namespace = namespace\n    self.indent = indent\n    self.unparsed_args = []\n    self._unparse_args()"
        },
        {
            "key_id": 1,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
            "imports": [],
            "code": "def _unparse_args(self) -> None:\n    # Unparse the arguments\n    for action in self.parser._actions:\n        self._unparse_action(action)"
        },
        {
            "key_id": 2,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
            "imports": [],
            "code": "def _unparse_action(self, action: Action) -> None:\n    # Unparse a specific action\n    if action.dest in self.namespace:\n        self._append_arg(self._get_option_string(action) + str(getattr(self.namespace, action.dest)))"
        },
        {
            "key_id": 3,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
            "imports": [],
            "code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n    # Check if the argument is default and help is suppressed\n    return action.default is not None and action.help == SUPPRESS"
        },
        {
            "key_id": 4,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
            "imports": [],
            "code": "def get_effective_command_line_invocation(self) -> str:\n    # Get the effective command line invocation\n    return ' '.join(self.unparsed_args)"
        },
        {
            "key_id": 5,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
            "imports": [],
            "code": "def get_pretty_command_line_invocation(self) -> str:\n    # Get a pretty formatted command line invocation\n    return ' '.join(self.unparsed_args)"
        },
        {
            "key_id": 6,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
            "imports": [],
            "code": "def _get_long_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    # Get the long option strings\n    return [opt for opt in option_strings if opt.startswith('--')]"
        },
        {
            "key_id": 7,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
            "imports": [],
            "code": "def _get_short_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    # Get the short option strings\n    return [opt for opt in option_strings if opt.startswith('-') and len(opt) == SHORT_OPTION_LENGTH]"
        },
        {
            "key_id": 8,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
            "imports": [],
            "code": "def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:\n    # Get the option string based on preference\n    if prefer_short:\n        return self._get_short_option_strings(action.option_strings)[0]\n    return self._get_long_option_strings(action.option_strings)[0]"
        },
        {
            "key_id": 9,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
            "imports": [],
            "code": "def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:\n    # Append a list of list of arguments\n    for arg_list in args:\n        self._append_list_of_args(arg_list)"
        },
        {
            "key_id": 4,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
            "imports": [
                "from argparse import Action",
                "from typing import List"
            ],
            "code": "def get_effective_command_line_invocation(self) -> str:\n    args = self._unparse_args()\n    return ' '.join(args)"
        },
        {
            "key_id": 1,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
            "imports": [],
            "code": "def _unparse_args(self) -> List[str]:\n    args = []\n    for action in self.parser._actions:\n        self._unparse_action(action)\n        args.append(self._indent_str())\n    return args"
        },
        {
            "key_id": 2,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
            "imports": [],
            "code": "def _unparse_action(self, action: Action) -> None:\n    if not self._arg_is_default_and_help_is_suppressed(action):\n        if action.option_strings:\n            self._unparse_store_action(action)\n        else:\n            self._unparse_positional_action(action)"
        },
        {
            "key_id": 3,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
            "imports": [],
            "code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n    return action.default is not None and action.help == SUPPRESS"
        },
        {
            "key_id": 5,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
            "imports": [],
            "code": "def get_pretty_command_line_invocation(self) -> str:\n    args = self._unparse_args()\n    return '\\n'.join(args)"
        },
        {
            "key_id": 6,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
            "imports": [],
            "code": "def _get_long_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    long_options = []\n    for option in option_strings:\n        if len(option) > SHORT_OPTION_LENGTH:\n            long_options.append(option)\n    return long_options"
        },
        {
            "key_id": 7,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
            "imports": [],
            "code": "def _get_short_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    short_options = []\n    for option in option_strings:\n        if len(option) <= SHORT_OPTION_LENGTH:\n            short_options.append(option)\n    return short_options"
        },
        {
            "key_id": 8,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
            "imports": [],
            "code": "def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:\n    option_strings = action.option_strings\n    if prefer_short:\n        options = self._get_short_option_strings(option_strings)\n    else:\n        options = self._get_long_option_strings(option_strings)\n    return options[0] if options else ''"
        },
        {
            "key_id": 9,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
            "imports": [],
            "code": "def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:\n    for arg_list in args:\n        self._append_list_of_args(arg_list)"
        },
        {
            "key_id": 10,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_args",
            "imports": [],
            "code": "def _append_list_of_args(self, args: List[str]) -> None:\n    for arg in args:\n        self._append_arg(arg)"
        },
        {
            "key_id": 11,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_arg",
            "imports": [],
            "code": "def _append_arg(self, arg: str) -> None:\n    # Append a single argument\n    self._append_list_of_args([arg])"
        },
        {
            "key_id": 12,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_indent_str",
            "imports": [],
            "code": "def _indent_str(self) -> str:\n    # Return the indentation string based on the indent level\n    return ' ' * self.indent"
        },
        {
            "key_id": 13,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_action",
            "imports": [],
            "code": "def _unparse_store_action(self, action: Action) -> None:\n    # Unparse a store action\n    self._append_arg(self._get_option_string(action))"
        },
        {
            "key_id": 14,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_const_action",
            "imports": [],
            "code": "def _unparse_store_const_action(self, action: Action) -> None:\n    # Unparse a store const action\n    self._append_arg(self._get_option_string(action))"
        },
        {
            "key_id": 15,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_true_action",
            "imports": [],
            "code": "def _unparse_store_true_action(self, action: Action) -> None:\n    # Unparse a store true action\n    self._append_arg(self._get_option_string(action))"
        },
        {
            "key_id": 16,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_false_action",
            "imports": [],
            "code": "def _unparse_store_false_action(self, action: Action) -> None:\n    if action.default:\n        return\n    self._append_arg(self._get_option_string(action, prefer_short=True))"
        },
        {
            "key_id": 17,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_action",
            "imports": [],
            "code": "def _unparse_append_action(self, action: Action) -> None:\n    if action.default is None:\n        return\n    self._append_arg(self._get_option_string(action, prefer_short=True))\n    self._append_arg(quote_arg_if_necessary(str(action.default)))"
        },
        {
            "key_id": 18,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_const_action",
            "imports": [],
            "code": "def _unparse_append_const_action(self, action: Action) -> None:\n    if action.default == SUPPRESS:\n        return\n    self._append_arg(self._get_option_string(action, prefer_short=True))\n    self._append_arg(quote_arg_if_necessary(str(action.const)))"
        },
        {
            "key_id": 19,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_count_action",
            "imports": [],
            "code": "def _unparse_count_action(self, action: Action) -> None:\n    if action.default == 0:\n        return\n    self._append_arg(self._get_option_string(action, prefer_short=True))\n    self._append_arg(str(action.default))"
        },
        {
            "key_id": 20,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_sub_parsers_action",
            "imports": [],
            "code": "def _unparse_sub_parsers_action(self, action: Action) -> None:\n    if action.default is SUPPRESS:\n        return\n    self._append_arg(self._get_option_string(action, prefer_short=True))\n    self._append_arg(quote_arg_if_necessary(action.default.dest))"
        },
        {
            "key_id": 21,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_extend_action",
            "imports": [],
            "code": "def _unparse_extend_action(self, action: Action) -> None:\n    args = []\n    for value in action.default:\n        args.append(quote_arg_if_necessary(str(value)))\n    self._append_list_of_list_of_args([args])"
        },
        {
            "key_id": 22,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_boolean_optional_action",
            "imports": [],
            "code": "def _unparse_boolean_optional_action(self, action: Action) -> None:\n    args = []\n    if action.default:\n        args.append(self._get_option_string(action))\n    self._append_list_of_list_of_args([args])"
        },
        {
            "key_id": 23,
            "fqn": "reverse_argparse/reverse_argparse.py/quote_arg_if_necessary",
            "imports": [],
            "code": "def quote_arg_if_necessary(arg: str) -> str:\n    if ' ' in arg:\n        return f'\"{arg}\"'\n    return arg"
        }
    ]
}