{
    "implementation": [
        {
            "key_id": 40,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__init__",
            "imports": [],
            "code": "def __init__(self, n, l, m):\n    self.n = n\n    self.l = l\n    self.m = m"
        },
        {
            "key_id": 3,
            "fqn": "sphecerix/molecule.py/Molecule/__init__",
            "imports": [],
            "code": "def __init__(self, _name='unknown'):\n    self._name = _name\n    self.atoms = []\n    self.basis = []"
        },
        {
            "key_id": 19,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/__init__",
            "imports": [],
            "code": "def __init__(self, mol):\n    self.mol = mol\n    self.operations = []"
        },
        {
            "key_id": 22,
            "fqn": "sphecerix/symmetry_operations.py/Operation/__init__",
            "imports": [],
            "code": "def __init__(self, name):\n    self.name = name\n    self.atomic_id = None"
        },
        {
            "key_id": 24,
            "fqn": "sphecerix/symmetry_operations.py/Identity/__init__",
            "imports": [],
            "code": "def __init__(self):\n    pass  # Identity operation does not need initialization"
        },
        {
            "key_id": 27,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/__init__",
            "imports": [],
            "code": "def __init__(self):\n    pass"
        },
        {
            "key_id": 30,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/__init__",
            "imports": [],
            "code": "def __init__(self, label, axis, angle):\n    pass"
        },
        {
            "key_id": 33,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/__init__",
            "imports": [],
            "code": "def __init__(self, label, normal):\n    pass"
        },
        {
            "key_id": 36,
            "fqn": "sphecerix/symmetry_operations.py/ImproperRotation/__init__",
            "imports": [],
            "code": "def __init__(self, label, axis, angle):\n    pass"
        },
        {
            "key_id": 19,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/__init__",
            "imports": [],
            "code": "def __init__(self, mol):\n    pass"
        },
        {
            "key_id": 22,
            "fqn": "sphecerix/symmetry_operations.py/Operation/__init__",
            "imports": [],
            "code": "def __init__(self, name):\n    self.name = name\n    self.atomic_id = None"
        },
        {
            "key_id": 24,
            "fqn": "sphecerix/symmetry_operations.py/Identity/__init__",
            "imports": [],
            "code": "def __init__(self):\n    pass\n\n    def get_matrix(self):\n        return np.eye(3)\n\n    def get_wigner_matrix(self, l):\n        return np.eye(2*l+1)"
        },
        {
            "key_id": 27,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/__init__",
            "imports": [],
            "code": "def __init__(self):\n    pass\n\n    def get_matrix(self):\n        return np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]])\n\n    def get_wigner_matrix(self, l):\n        return (-1)**l * np.eye(2*l+1)"
        },
        {
            "key_id": 30,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/__init__",
            "imports": [],
            "code": "def __init__(self, label, axis, angle):\n    self.label = label\n    self.axis = axis\n    self.angle = angle\n\n    def get_matrix(self):\n        R = Rotation.from_rotvec(self.axis * self.angle)\n        return R.as_matrix()\n\n    def get_wigner_matrix(self, l):\n        R = Rotation.from_rotvec(self.axis * self.angle)\n        return wigner_d(l, R.as_euler('zyz'))"
        },
        {
            "key_id": 33,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/__init__",
            "imports": [],
            "code": "def __init__(self, label, normal):\n    self.label = label\n    self.normal = normal\n\n    def get_matrix(self):\n        return np.eye(3) - 2 * np.outer(self.normal, self.normal)\n\n    def get_wigner_matrix(self, l):\n        return wigner_d(l, np.pi)"
        },
        {
            "key_id": 36,
            "fqn": "sphecerix/symmetry_operations.py/ImproperRotation/__init__",
            "imports": [],
            "code": "def __init__(self, label, axis, angle):\n    self.label = label\n    self.axis = axis\n    self.angle = angle"
        },
        {
            "key_id": 40,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__init__",
            "imports": [],
            "code": "def __init__(self, n, l, m):\n    self.n = n\n    self.l = l\n    self.m = m"
        },
        {
            "key_id": 13,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D",
            "imports": [
                "import numpy as np",
                "from scipy.spatial.transform import Rotation as R"
            ],
            "code": "def tesseral_wigner_D(l, Robj):\n    D = np.zeros((2*l+1, 2*l+1), dtype=np.complex128)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = np.dot(np.conj(Robj.apply([0, 0, 1])), wigner_D_element_euler_angles(l, m1, m2, Robj.as_euler('zyz', degrees=False)))\n    return D"
        },
        {
            "key_id": 14,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D_mirror",
            "imports": [
                "import numpy as np"
            ],
            "code": "def tesseral_wigner_D_mirror(l, normal):\n    D = np.zeros((2*l+1, 2*l+1), dtype=np.complex128)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = wigner_D_element_euler_angles(l, m1, m2, R.from_rotvec(normal))\n    return D"
        },
        {
            "key_id": 15,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D_improper",
            "imports": [
                "import numpy as np",
                "from scipy.spatial.transform import Rotation as R"
            ],
            "code": "def tesseral_wigner_D_improper(l, Robj):\n    D = np.zeros((2*l+1, 2*l+1), dtype=np.complex128)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = np.dot(np.conj(Robj.apply([0, 0, 1])), wigner_D_element_euler_angles(l, m1, m2, Robj.as_euler('zyz', degrees=False)))\n    return D"
        },
        {
            "key_id": 16,
            "fqn": "sphecerix/wignerd.py/wigner_D",
            "imports": [],
            "code": "def wigner_D(l, Robj):\n    pass"
        },
        {
            "key_id": 17,
            "fqn": "sphecerix/wignerd.py/wigner_d",
            "imports": [],
            "code": "def wigner_d(l, beta):\n    pass"
        },
        {
            "key_id": 18,
            "fqn": "sphecerix/wignerd.py/wigner_d_element_euler_angles",
            "imports": [],
            "code": "def wigner_d_element_euler_angles(l, m1, m2, beta):\n    # Implementation logic for wigner_d_element_euler_angles\n    pass"
        },
        {
            "key_id": 39,
            "fqn": "sphecerix/tesseral.py/permutation_sh_car",
            "imports": [],
            "code": "def permutation_sh_car():\n    # Implementation logic for permutation_sh_car\n    pass"
        },
        {
            "key_id": 41,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__get_name",
            "imports": [],
            "code": "def __get_name(self):\n    # Implementation logic for __get_name\n    pass"
        },
        {
            "key_id": 42,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__get_type",
            "imports": [],
            "code": "def __get_type(self):\n    # Implementation logic for __get_type\n    pass"
        },
        {
            "key_id": 7,
            "fqn": "sphecerix/atomic_wave_functions.py/wffield",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles",
                "from sphecerix.symmetry_operations import Rotation"
            ],
            "code": "def wffield(n, l, m, d, npts):\n    # Implementation logic for wffield\n    pass"
        },
        {
            "key_id": 8,
            "fqn": "sphecerix/atomic_wave_functions.py/wffield_l",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles",
                "from sphecerix.symmetry_operations import Rotation"
            ],
            "code": "def wffield_l(n, l, d, npts):\n    try:\n        # Implementation logic here\n        pass  # Placeholder for actual implementation\n    except Exception as e:\n        print(\"An error occurred\")  # Basic exception handling\n        pass"
        },
        {
            "key_id": 9,
            "fqn": "sphecerix/atomic_wave_functions.py/wfcart",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles",
                "from sphecerix.symmetry_operations import Rotation"
            ],
            "code": "def wfcart(n, l, m, x, y, z):\n    try:\n        # Implementation logic here\n        pass  # Placeholder for actual implementation\n    except Exception as e:\n        print(\"An error occurred\")  # Basic exception handling\n        pass"
        },
        {
            "key_id": 10,
            "fqn": "sphecerix/atomic_wave_functions.py/wf",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles",
                "from sphecerix.symmetry_operations import Rotation"
            ],
            "code": "def wf(n, l, m, r, theta, phi):\n    pass  # Placeholder for actual implementation\n    # Implementation logic here"
        },
        {
            "key_id": 11,
            "fqn": "sphecerix/atomic_wave_functions.py/angular",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles",
                "from sphecerix.symmetry_operations import Rotation"
            ],
            "code": "def angular(l, m, theta, phi):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 12,
            "fqn": "sphecerix/atomic_wave_functions.py/radial",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles",
                "from sphecerix.symmetry_operations import Rotation"
            ],
            "code": "def radial(n, l, r):\n    try:\n        # Implementation logic here\n        pass  # Placeholder for actual implementation\n    except Exception as e:\n        print(\"An error occurred\")  # Basic exception handling\n        pass"
        },
        {
            "key_id": 4,
            "fqn": "sphecerix/molecule.py/Molecule/__str__",
            "imports": [],
            "code": "def __str__(self):\n    return f'Molecule: {self._name}'"
        },
        {
            "key_id": 5,
            "fqn": "sphecerix/molecule.py/Molecule/add_atom",
            "imports": [],
            "code": "def add_atom(self, atom, x, y, z, unit='bohr'):\n    new_atom = Atom(atom, x, y, z, unit)\n    self.atoms.append(new_atom)"
        },
        {
            "key_id": 6,
            "fqn": "sphecerix/molecule.py/Molecule/build_basis",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D"
            ],
            "code": "def build_basis(self, molset):\n    for atom in self.atoms:\n        n, l, m = atom.get_quantum_numbers()\n        D = tesseral_wigner_D(l, atom.rotation_matrix)\n        basis_func = BasisFunction(n, l, m, D)\n        self.basis.append(basis_func)"
        },
        {
            "key_id": 20,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/add",
            "imports": [],
            "code": "def add(self, name, label=None, vec=None, angle=None):\n    new_operation = Operation(name)\n    if vec is not None:\n        new_operation.set_atomic_id(vec)\n    self.operations.append(new_operation)"
        },
        {
            "key_id": 21,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/run",
            "imports": [],
            "code": "def run(self):\n    for operation in self.operations:\n        matrix = operation.get_matrix()\n        wigner_matrix = operation.get_wigner_matrix()\n        # Perform operations using matrix and wigner_matrix"
        },
        {
            "key_id": 23,
            "fqn": "sphecerix/symmetry_operations.py/Operation/set_atomic_id",
            "imports": [],
            "code": "def set_atomic_id(self, idx):\n    self.atomic_id = idx"
        },
        {
            "key_id": 25,
            "fqn": "sphecerix/symmetry_operations.py/Identity/get_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    return np.eye(3)\n\ndef get_wigner_matrix(self, l):\n    return np.eye(2*l+1)"
        },
        {
            "key_id": 26,
            "fqn": "sphecerix/symmetry_operations.py/Identity/get_wigner_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    return np.eye(3)\n\n    def get_wigner_matrix(self, l):\n        return np.eye(2*l+1)"
        },
        {
            "key_id": 28,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/get_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    return np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]])\n\ndef get_wigner_matrix(self, l):\n    return (-1)**l * np.eye(2*l+1)"
        },
        {
            "key_id": 29,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/get_wigner_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    return np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]])\n\ndef get_wigner_matrix(self, l):\n    return (-1)**l * np.eye(2*l+1)"
        },
        {
            "key_id": 31,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/get_matrix",
            "imports": [
                "from scipy.spatial.transform import Rotation",
                "from sphecerix.wignerd import wigner_d"
            ],
            "code": "def get_matrix(self):\n    R = Rotation.from_rotvec(self.axis * self.angle)\n    return R.as_matrix()\n"
        },
        {
            "key_id": 32,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/get_wigner_matrix",
            "imports": [
                "from scipy.spatial.transform import Rotation",
                "from sphecerix.wignerd import wigner_d"
            ],
            "code": "def get_wigner_matrix(self, l):\n    R = Rotation.from_rotvec(self.axis * self.angle)\n    return wigner_d(l, R.as_euler('zyz'))\n"
        },
        {
            "key_id": 34,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/get_matrix",
            "imports": [
                "import numpy as np",
                "from sphecerix.wignerd import wigner_d"
            ],
            "code": "def get_matrix(self):\n    return np.eye(3) - 2 * np.outer(self.normal, self.normal)\n"
        },
        {
            "key_id": 35,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/get_wigner_matrix",
            "imports": [
                "import numpy as np",
                "from sphecerix.wignerd import wigner_d"
            ],
            "code": "def get_wigner_matrix(self, l):\n    return wigner_d(l, np.pi)\n"
        },
        {
            "key_id": 37,
            "fqn": "sphecerix/symmetry_operations.py/ImproperRotation/get_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    pass\n"
        },
        {
            "key_id": 13,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D",
            "imports": [
                "import numpy as np",
                "from scipy.spatial.transform import Rotation as R"
            ],
            "code": "def tesseral_wigner_D(l, Robj):\n    D = np.zeros((2*l+1, 2*l+1), dtype=complex)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = np.sum(np.conj(Robj.as_matrix()[m1+l]) * wigner_d_element_euler_angles(l, m1, m2, np.pi))\n    return D"
        },
        {
            "key_id": 14,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D_mirror",
            "imports": [],
            "code": "def tesseral_wigner_D_mirror(l, normal):\n    D = np.zeros((2*l+1, 2*l+1), dtype=complex)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = np.sum(wigner_d_element_euler_angles(l, m1, m2, np.pi))\n    return D"
        },
        {
            "key_id": 15,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D_improper",
            "imports": [],
            "code": "def tesseral_wigner_D_improper(l, Robj):\n    D = np.zeros((2*l+1, 2*l+1), dtype=complex)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = np.sum(np.conj(Robj.as_matrix()[m1+l]) * wigner_d_element_euler_angles(l, m1, m2, np.pi))\n    return D"
        },
        {
            "key_id": 16,
            "fqn": "sphecerix/wignerd.py/wigner_D",
            "imports": [],
            "code": "def wigner_D(l, Robj):\n    D = np.zeros((2*l+1, 2*l+1), dtype=complex)\n    for m1 in range(-l, l+1):\n        for m2 in range(-l, l+1):\n            D[m1+l, m2+l] = np.sum(np.conj(Robj.as_matrix()[m1+l]) * wigner_d_element_euler_angles(l, m1, m2, np.pi))\n    return D"
        },
        {
            "key_id": 17,
            "fqn": "sphecerix/wignerd.py/wigner_d",
            "imports": [],
            "code": "def wigner_d(l, beta):\n    return np.exp(-1j * m * beta)"
        },
        {
            "key_id": 18,
            "fqn": "sphecerix/wignerd.py/wigner_d_element_euler_angles",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wigner_d_element_euler_angles(l, m1, m2, beta):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 20,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/add",
            "imports": [],
            "code": "def add(self, name, label = None, vec = None, angle = None):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 21,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/run",
            "imports": [],
            "code": "def run(self):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 23,
            "fqn": "sphecerix/symmetry_operations.py/Operation/set_atomic_id",
            "imports": [],
            "code": "def set_atomic_id(self, idx):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 25,
            "fqn": "sphecerix/symmetry_operations.py/Identity/get_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 26,
            "fqn": "sphecerix/symmetry_operations.py/Identity/get_wigner_matrix",
            "imports": [],
            "code": "def get_wigner_matrix(self, l):\n    return np.eye(2*l+1)"
        },
        {
            "key_id": 28,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/get_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    return np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]])"
        },
        {
            "key_id": 29,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/get_wigner_matrix",
            "imports": [],
            "code": "def get_wigner_matrix(self, l):\n    return (-1)**l * np.eye(2*l+1)"
        },
        {
            "key_id": 31,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/get_matrix",
            "imports": [
                "from scipy.spatial.transform import Rotation as R"
            ],
            "code": "def get_matrix(self):\n    R = R.from_rotvec(self.axis * self.angle)\n    return R.as_matrix()"
        },
        {
            "key_id": 32,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/get_wigner_matrix",
            "imports": [
                "from scipy.spatial.transform import Rotation as R",
                "from sphecerix.wignerd import wigner_d"
            ],
            "code": "def get_wigner_matrix(self, l):\n    R = R.from_rotvec(self.axis * self.angle)\n    return wigner_d(l, R.as_euler('zyz'))"
        },
        {
            "key_id": 34,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/get_matrix",
            "imports": [
                "import numpy as np"
            ],
            "code": "def get_matrix(self):\n    return np.eye(3) - 2 * np.outer(self.normal, self.normal)"
        },
        {
            "key_id": 35,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/get_wigner_matrix",
            "imports": [],
            "code": "def get_wigner_matrix(self, l):\n    return wigner_d(l, np.pi)"
        },
        {
            "key_id": 37,
            "fqn": "sphecerix/symmetry_operations.py/ImproperRotation/get_matrix",
            "imports": [],
            "code": "def get_matrix(self):\n    pass  # Add implementation for get_matrix method"
        },
        {
            "key_id": 41,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__get_name",
            "imports": [],
            "code": "def __get_name(self):\n    pass  # Add implementation for __get_name method"
        },
        {
            "key_id": 42,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__get_type",
            "imports": [],
            "code": "def __get_type(self):\n    pass  # Add implementation for __get_type method"
        },
        {
            "key_id": 0,
            "fqn": "sphecerix/matrixplot.py/visualize_matrices",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles"
            ],
            "code": "def visualize_matrices(symops, numcols=3, highlight_groups=None, filename=None, figsize=(7,5), xlabelrot=0):\n    pass"
        },
        {
            "key_id": 1,
            "fqn": "sphecerix/matrixplot.py/plot_highlight_groups",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles"
            ],
            "code": "def plot_highlight_groups(axh, groups, mat):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 2,
            "fqn": "sphecerix/matrixplot.py/plot_matrix",
            "imports": [
                "from sphecerix.wignerd import tesseral_wigner_D",
                "from sphecerix.wignerd import wigner_D",
                "from sphecerix.wignerd import wigner_d",
                "from sphecerix.wignerd import wigner_d_element_euler_angles"
            ],
            "code": "def plot_matrix(ax, mat, bfs, title=None, xlabelrot=0):\n    pass\n    # Implementation logic here"
        },
        {
            "key_id": 38,
            "fqn": "sphecerix/tesseral.py/tesseral_transformation",
            "imports": [],
            "code": "def tesseral_transformation(l):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 43,
            "fqn": "docs/conf.py/setup",
            "imports": [],
            "code": "def setup(app):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 44,
            "fqn": "examples/fz3_rotation.py/main",
            "imports": [
                "from sphecerix import tesseral_wigner_D",
                "from scipy.spatial.transform import Rotation as R",
                "import numpy as np"
            ],
            "code": "def main():\n    # build rotation axis and set angle\n    axis = np.ones(3) / np.sqrt(3)\n    angle = np.pi\n    Robj = R.from_rotvec(axis * angle)\n    \n    # construct tesseral Wigner D matrix\n    D = tesseral_wigner_D(2, Robj)\n    Y = np.zeros(5)\n    Y[2] = 1\n    \n    # calculate linear combination of the spherical harmonics after rotation\n    Yp = D @ Y\n    print(Yp)\n    \nif __name__ == '__main__':\n    main()"
        },
        {
            "key_id": 45,
            "fqn": "examples/ethylene.py/main",
            "imports": [
                "from sphecerix import tesseral_wigner_D",
                "from scipy.spatial.transform import Rotation as R",
                "import numpy as np"
            ],
            "code": "def main():\n    # Add your implementation here\n    pass\n    \nif __name__ == '__main__':\n    main()"
        },
        {
            "key_id": 46,
            "fqn": "examples/dz2_rotation.py/main",
            "imports": [
                "from sphecerix import tesseral_wigner_D",
                "from scipy.spatial.transform import Rotation as R",
                "import numpy as np"
            ],
            "code": "def main():\n    # Add your implementation here\n    pass\n    \nif __name__ == '__main__':\n    main()"
        },
        {
            "key_id": 47,
            "fqn": "examples/nh3.py/main",
            "imports": [
                "from sphecerix import tesseral_wigner_D",
                "from scipy.spatial.transform import Rotation as R",
                "import numpy as np"
            ],
            "code": "def main():\n    # Add your implementation here\n    pass\n    \nif __name__ == '__main__':\n    main()"
        }
    ]
}