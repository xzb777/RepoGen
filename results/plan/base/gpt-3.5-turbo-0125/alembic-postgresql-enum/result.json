{
    "implementation": [
        {
            "key_id": 41,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/__init__",
            "imports": [
                "from typing import List",
                "from alembic_postgresql_enum.get_enum_data.types import TableReference"
            ],
            "code": "def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n    self.schema = schema\n    self.name = name\n    self.old_values = old_values\n    self.new_values = new_values\n    self.affected_columns = affected_columns"
        },
        {
            "key_id": 48,
            "fqn": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/__init__",
            "imports": [],
            "code": "def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n    self.schema = schema\n    self.name = name\n    self.enum_values = enum_values"
        },
        {
            "key_id": 48,
            "fqn": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/operation_name",
            "imports": [],
            "code": "def operation_name(self) -> str:\n    return \"change_enum_variants\""
        },
        {
            "key_id": 48,
            "fqn": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/to_diff_tuple",
            "imports": [
                "from typing import Any, Tuple"
            ],
            "code": "def to_diff_tuple(self) -> Tuple[Any, ...]:\n    return (self.schema, self.name, tuple(self.enum_values))"
        },
        {
            "key_id": 38,
            "fqn": "alembic_postgresql_enum/detection_of_changes/enum_creation.py/create_new_enums",
            "imports": [
                "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp"
            ],
            "code": "def create_new_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    log.info('Creating new enums...')\n    for enum_name, new_values in declared_enums.items():\n        old_values = defined_enums.get(enum_name, [])\n        affected_columns = []  # Placeholder for affected columns\n        sync_op = SyncEnumValuesOp(schema, enum_name, old_values, new_values, affected_columns)\n        upgrade_ops.ops.append(sync_op)"
        },
        {
            "key_id": 39,
            "fqn": "alembic_postgresql_enum/detection_of_changes/enum_alteration.py/sync_changed_enums",
            "imports": [
                "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp"
            ],
            "code": "def sync_changed_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, table_references: EnumNamesToTableReferences, schema: str, upgrade_ops: UpgradeOps):\n    log.info('Syncing changed enums...')\n    for enum_name, new_values in declared_enums.items():\n        old_values = defined_enums.get(enum_name, [])\n        affected_columns = table_references.get(enum_name, [])\n        sync_op = SyncEnumValuesOp(schema, enum_name, old_values, new_values, affected_columns)\n        upgrade_ops.ops.append(sync_op)"
        },
        {
            "key_id": 40,
            "fqn": "alembic_postgresql_enum/detection_of_changes/enum_deletion.py/drop_unused_enums",
            "imports": [
                "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp"
            ],
            "code": "def drop_unused_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    log.info('Dropping unused enums...')\n    for enum_name, old_values in defined_enums.items():\n        if enum_name not in declared_enums:\n            new_values = []\n            affected_columns = []  # Placeholder for affected columns\n            sync_op = SyncEnumValuesOp(schema, enum_name, old_values, new_values, affected_columns)\n            upgrade_ops.ops.append(sync_op)"
        },
        {
            "key_id": 42,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/reverse",
            "imports": [],
            "code": "def reverse(self):\n    log.info(f'Reversing operation: {self.operation_name}')\n    # Reverse the changes made during sync_enum_values operation"
        },
        {
            "key_id": 43,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/_set_enum_values",
            "imports": [],
            "code": "def _set_enum_values(cls, connection: 'Connection', enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[TableReference], enum_values_to_rename: List[Tuple[str, str]]):\n    log.info('Setting enum values...')\n    # Logic to set the new enum values and handle renames"
        },
        {
            "key_id": 44,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/sync_enum_values",
            "imports": [
                "from typing import List, Tuple, Iterable",
                "from alembic_postgresql_enum.operations.sync_enum_values import TableReference"
            ],
            "code": "def sync_enum_values(cls, operations, enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[Tuple[str, str]], enum_values_to_rename: Iterable[Tuple[str, str]] = tuple()):\n    log.info('Changing enum variants for %s.%s', enum_schema, enum_name)\n    op = SyncEnumValuesOp(enum_schema, enum_name, operations.get(enum_name, []), new_values, [TableReference(schema, table) for schema, table in affected_columns])\n    operations[enum_name] = op"
        },
        {
            "key_id": 45,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/to_diff_tuple",
            "imports": [],
            "code": "def to_diff_tuple(self) -> Tuple[str, str, List[str], List[str], List[Tuple[str, str]]:\n    return (self.schema, self.name, self.old_values, self.new_values, [(col.schema, col.table) for col in self.affected_columns])"
        },
        {
            "key_id": 46,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/is_column_type_import_needed",
            "imports": [],
            "code": "def is_column_type_import_needed(self) -> bool:\n    return any(col.is_column_type_import_needed() for col in self.affected_columns)"
        },
        {
            "key_id": 47,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/render_sync_enum_value_op",
            "imports": [],
            "code": "def render_sync_enum_value_op(autogen_context: AutogenContext, op: SyncEnumValuesOp):\n    return autogen_context._add_op_rendered(autogen_context._op_template('sync_enum_values', schema=op.schema, name=op.name, old_values=op.old_values, new_values=op.new_values, affected_columns=op.affected_columns))"
        },
        {
            "key_id": 49,
            "fqn": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/operation_name",
            "imports": [],
            "code": "def operation_name(self) -> str:\n    return 'change_enum_variants'"
        },
        {
            "key_id": 50,
            "fqn": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/to_diff_tuple",
            "imports": [],
            "code": "def to_diff_tuple(self) -> Tuple[Any, ...]:\n    return (self.schema, self.name, tuple(self.enum_values))"
        },
        {
            "key_id": 51,
            "fqn": "alembic_postgresql_enum/operations/create_enum.py/CreateEnumOp/reverse",
            "imports": [],
            "code": "def reverse(self):\n    pass  # Implementation for reversing the create enum operation"
        },
        {
            "key_id": 52,
            "fqn": "alembic_postgresql_enum/operations/create_enum.py/render_create_enum_op",
            "imports": [],
            "code": "def render_create_enum_op(autogen_context: AutogenContext, op: CreateEnumOp):\n    pass  # Implementation for rendering the create enum operation"
        },
        {
            "key_id": 53,
            "fqn": "alembic_postgresql_enum/operations/drop_enum.py/DropEnumOp/reverse",
            "imports": [],
            "code": "def reverse(self):\n    pass  # Implementation for reversing the drop enum operation"
        },
        {
            "key_id": 54,
            "fqn": "alembic_postgresql_enum/operations/drop_enum.py/render_drop_enum_op",
            "imports": [],
            "code": "def render_drop_enum_op(autogen_context: AutogenContext, op: DropEnumOp):\n    pass  # Implementation for rendering the drop enum operation"
        },
        {
            "key_id": 0,
            "fqn": "alembic_postgresql_enum/connection.py/get_connection",
            "imports": [
                "from typing import Iterator",
                "import sqlalchemy"
            ],
            "code": "def get_connection(operations) -> Iterator[sqlalchemy.engine.Connection]:\n    # Implementation logic for getting a connection\n    pass"
        },
        {
            "key_id": 1,
            "fqn": "alembic_postgresql_enum/compare_dispatch.py/compare_enums",
            "imports": [],
            "code": "def compare_enums(autogen_context: AutogenContext, upgrade_ops: UpgradeOps, schema_names: Iterable[Union[str, None]]):\n    # Implementation logic for comparing enums\n    pass"
        },
        {
            "key_id": 2,
            "fqn": "alembic_postgresql_enum/add_create_type_false.py/ReprWorkaround/__repr__",
            "imports": [],
            "code": "class ReprWorkaround:\n    def __repr__(self):\n        # Implementation logic for the __repr__ method\n        pass"
        },
        {
            "key_id": 3,
            "fqn": "alembic_postgresql_enum/add_create_type_false.py/get_replacement_type",
            "imports": [],
            "code": "def get_replacement_type(column_type):\n    # Implementation logic for getting replacement type\n    pass"
        },
        {
            "key_id": 4,
            "fqn": "alembic_postgresql_enum/add_create_type_false.py/inject_repr_into_enums",
            "imports": [],
            "code": "def inject_repr_into_enums(column: Column):\n    # Implementation logic for injecting __repr__ into enums\n    pass"
        },
        {
            "key_id": 5,
            "fqn": "alembic_postgresql_enum/add_create_type_false.py/add_create_type_false",
            "imports": [
                "from alembic_postgresql_enum.types import UpgradeOps"
            ],
            "code": "from alembic_postgresql_enum.types import UpgradeOps\n\ndef add_create_type_false(upgrade_ops: UpgradeOps):\n    for op in upgrade_ops:\n        if isinstance(op, ops.AddColumnOp) and isinstance(op.column.type, postgresql.ENUM):\n            op.column.type.create_type = False"
        },
        {
            "key_id": 6,
            "fqn": "alembic_postgresql_enum/add_postgres_using_to_text.py/PostgresUsingAlterColumnOp/reverse",
            "imports": [],
            "code": "def reverse(self):\n    return f'ALTER COLUMN {self.column_name} TYPE {self.new_type}'"
        },
        {
            "key_id": 7,
            "fqn": "alembic_postgresql_enum/add_postgres_using_to_text.py/_postgres_using_alter_column",
            "imports": [
                "from alembic.operations import ops",
                "from alembic_postgresql_enum.types import AutogenContext"
            ],
            "code": "from alembic.operations import ops\nfrom alembic_postgresql_enum.types import AutogenContext\n\ndef _postgres_using_alter_column(autogen_context: AutogenContext, op: ops.AlterColumnOp) -> str:\n    return f'ALTER COLUMN {op.column_name} TYPE {op.new_type}'"
        },
        {
            "key_id": 8,
            "fqn": "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_alter_operation",
            "imports": [],
            "code": "def add_postgres_using_to_alter_operation(op: AlterColumnOp):\n    op.new_type.create_type = False"
        },
        {
            "key_id": 9,
            "fqn": "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_text",
            "imports": [
                "from alembic.operations import ops",
                "from alembic_postgresql_enum.types import UpgradeOps"
            ],
            "code": "from alembic.operations import ops\nfrom alembic_postgresql_enum.types import UpgradeOps\n\ndef add_postgres_using_to_text(upgrade_ops: UpgradeOps):\n    for op in upgrade_ops:\n        if isinstance(op, ops.AlterColumnOp) and isinstance(op.new_type, postgresql.ENUM):\n            op.new_type.create_type = False"
        },
        {
            "key_id": 10,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_array_enum_type_to_new",
            "imports": [],
            "code": "def cast_old_array_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 11,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_enum_type_to_new",
            "imports": [],
            "code": "def cast_old_enum_type_to_new(connection: 'Connection', table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 12,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/drop_type",
            "imports": [],
            "code": "def drop_type(connection: \"Connection\", schema: str, type_name: str):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 13,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/rename_type",
            "imports": [],
            "code": "def rename_type(connection: 'Connection', schema: str, type_name: str, new_type_name: str):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 14,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/create_type",
            "imports": [],
            "code": "def create_type(connection: \"Connection\", schema: str, type_name: str, enum_values: List[str]):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 15,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/get_all_enums",
            "imports": [
                "from alembic_postgresql_enum.connection import Connection"
            ],
            "code": "def get_all_enums(connection: Connection, schema: str):\n    # Logic to retrieve all enums from the specified schema\n    pass"
        },
        {
            "key_id": 16,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/get_column_default",
            "imports": [
                "from alembic_postgresql_enum.connection import Connection",
                "from typing import Union"
            ],
            "code": "def get_column_default(connection: Connection, table_schema: str, table_name: str, column_name: str) -> Union[str, None]:\n    # Logic to get the default value of a column in a table\n    pass"
        },
        {
            "key_id": 17,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/drop_default",
            "imports": [
                "from alembic_postgresql_enum.connection import Connection"
            ],
            "code": "def drop_default(connection: Connection, table_name_with_schema: str, column_name: str):\n    # Logic to drop the default value of a column in a table\n    pass"
        },
        {
            "key_id": 18,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/set_default",
            "imports": [
                "from alembic_postgresql_enum.connection import Connection"
            ],
            "code": "def set_default(connection: Connection, table_name_with_schema: str, column_name: str, default_value: str):\n    # Logic to set the default value of a column in a table\n    pass"
        },
        {
            "key_id": 19,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/rename_default_if_required",
            "imports": [],
            "code": "def rename_default_if_required(schema: str, default_value: str, enum_name: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    # Logic to rename the default value if required\n    pass"
        },
        {
            "key_id": 20,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/_replace_strings_in_quotes",
            "imports": [],
            "code": "def _replace_strings_in_quotes(old_default: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 21,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_create_comparison_operator",
            "imports": [],
            "code": "def _create_comparison_operator(connection: 'Connection', schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]], operator: str, comparison_function_name: str):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 22,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/create_comparison_operators",
            "imports": [],
            "code": "def create_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    pass"
        },
        {
            "key_id": 23,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_drop_comparison_operator",
            "imports": [],
            "code": "def _drop_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, comparison_function_name: str):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 24,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/drop_comparison_operators",
            "imports": [],
            "code": "def drop_comparison_operators(connection: 'Connection', schema: str, enum_name: str, old_enum_name: str):\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 25,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/ColumnType/__repr__",
            "imports": [],
            "code": "def __repr__(self):\n    return f'ColumnType({self.COMMON}, {self.ARRAY})'"
        },
        {
            "key_id": 26,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/__repr__",
            "imports": [],
            "code": "def __repr__(self):\n    return f'TableReference({self.schema}, {self.name}, {self.columns})'"
        },
        {
            "key_id": 27,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/is_column_type_import_needed",
            "imports": [],
            "code": "def is_column_type_import_needed(self):\n    return self.columns"
        },
        {
            "key_id": 28,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/table_name_with_schema",
            "imports": [],
            "code": "def table_name_with_schema(self):\n    return f'{self.schema}.{self.name}'"
        },
        {
            "key_id": 29,
            "fqn": "alembic_postgresql_enum/get_enum_data/defined_enums.py/_remove_schema_prefix",
            "imports": [],
            "code": "def _remove_schema_prefix(enum_name: str, schema: str) -> str:\n    return enum_name.replace(schema + '.', '')"
        },
        {
            "key_id": 30,
            "fqn": "alembic_postgresql_enum/get_enum_data/defined_enums.py/get_defined_enums",
            "imports": [
                "from typing import Union",
                "from alembic_postgresql_enum.connection import Connection",
                "from alembic_postgresql_enum.types import EnumNamesToValues"
            ],
            "code": "def get_defined_enums(connection: Connection, schema: str) -> EnumNamesToValues:\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 31,
            "fqn": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_enum_values",
            "imports": [
                "from sqlalchemy import Enum"
            ],
            "code": "def get_enum_values(enum_type: Enum) -> Tuple[str, ...]:\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 32,
            "fqn": "alembic_postgresql_enum/get_enum_data/declared_enums.py/column_type_is_enum",
            "imports": [],
            "code": "def column_type_is_enum(column_type: Any) -> bool:\n    # Implementation logic here\n    pass"
        },
        {
            "key_id": 33,
            "fqn": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_declared_enums",
            "imports": [
                "from sqlalchemy.schema import MetaData",
                "from alembic_postgresql_enum.connection import Connection",
                "from alembic_postgresql_enum.types import DeclaredEnumValues",
                "from typing import Optional, List"
            ],
            "code": "def get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection: Connection, upgrade_ops: Optional[UpgradeOps] = None) -> DeclaredEnumValues:\n    pass"
        },
        {
            "key_id": 34,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_add_column_op",
            "imports": [
                "from alembic.operations import AddColumnOp",
                "from alembic_postgresql_enum.types import ColumnLocation",
                "from typing import Tuple"
            ],
            "code": "def _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    pass\n    # Implementation logic here"
        },
        {
            "key_id": 35,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_alter_column_op",
            "imports": [
                "from alembic.operations import AlterColumnOp",
                "from typing import Tuple"
            ],
            "code": "def _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]:\n    # Implementation logic here"
        },
        {
            "key_id": 36,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_column",
            "imports": [
                "from sqlalchemy import Column",
                "from typing import Tuple"
            ],
            "code": "def _get_default_from_column(column: Column, default_schema: str) -> Tuple[ColumnLocation, Optional[str]:\n    # Implementation logic here"
        },
        {
            "key_id": 37,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/get_just_added_defaults",
            "imports": [
                "from alembic.operations import UpgradeOps",
                "from typing import Dict"
            ],
            "code": "def get_just_added_defaults(upgrade_ops: UpgradeOps, default_schema: str) -> Dict[ColumnLocation, Optional[str]:\n    # Implementation logic here"
        }
    ]
}