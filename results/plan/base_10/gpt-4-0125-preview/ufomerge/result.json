{
    "implementation": [
        {
            "key_id": 2,
            "fqn": "ufomerge/layout.py/LayoutSubsetVisitor/__init__",
            "imports": [
                "from typing import Set",
                "import logging"
            ],
            "code": "class LayoutSubsetVisitor:\n    def __init__(self, glyphset: Set[str]):\n        self.logger = logging.getLogger('ufomerge.layout')\n        self.glyphset = glyphset\n        self.logger.debug(f'Initializing LayoutSubsetVisitor with glyphset: {glyphset}')"
        },
        {
            "key_id": 25,
            "fqn": "ufomerge/layout.py/LayoutClosureVisitor/__init__",
            "imports": [
                "from typing import Dict, Set",
                "import logging"
            ],
            "code": "class LayoutClosureVisitor:\n    def __init__(self, incoming_glyphset: Dict[str, bool], glyphset: Set[str]):\n        self.logger = logging.getLogger('ufomerge.layout')\n        self.incoming_glyphset = incoming_glyphset\n        self.glyphset = glyphset\n        self.logger.debug(f'Initializing LayoutClosureVisitor with incoming_glyphset: {incoming_glyphset} and glyphset: {glyphset}')"
        },
        {
            "key_id": 30,
            "fqn": "ufomerge/utils.py/filter_glyphs",
            "imports": [
                "from typing import Iterable, Set, List"
            ],
            "code": "def filter_glyphs(glyphs: Iterable[str], glyphset: Set[str]) -> List[str]:\n    filtered_glyphs = [glyph for glyph in glyphs if glyph in glyphset]\n    return filtered_glyphs"
        },
        {
            "key_id": 31,
            "fqn": "ufomerge/utils.py/filter_glyph_mapping",
            "imports": [
                "from typing import Mapping, Any, Set, Dict"
            ],
            "code": "def filter_glyph_mapping(glyphs: Mapping[str, Any], glyphset: Set[str]) -> Dict[str, Any]:\n    filtered_mapping = {glyph: value for glyph, value in glyphs.items() if glyph in glyphset}\n    return filtered_mapping"
        },
        {
            "key_id": 32,
            "fqn": "ufomerge/utils.py/filter_sequence",
            "imports": [
                "from typing import Iterable, Set, List, Optional, Dict"
            ],
            "code": "def filter_sequence(slots: Iterable, glyphset: Set[str], class_name_references: Optional[Dict[str, List[str]]] = None) -> List[List[str]]:\n    filtered_sequence = [[glyph for glyph in slot if glyph in glyphset] for slot in slots]\n    return filtered_sequence"
        },
        {
            "key_id": 33,
            "fqn": "ufomerge/utils.py/filter_glyph_container",
            "imports": [
                "from typing import Any, Set, Optional, Dict, List"
            ],
            "code": "def filter_glyph_container(container: Any, glyphset: Set[str], class_name_references: Optional[Dict[str, List[str]]] = None) -> Any:\n    if isinstance(container, list):\n        return [item for item in container if item in glyphset]\n    elif isinstance(container, dict):\n        return {key: value for key, value in container.items() if key in glyphset}\n    else:\n        return container"
        },
        {
            "key_id": 34,
            "fqn": "ufomerge/utils.py/has_any_empty_slots",
            "imports": [
                "from typing import List"
            ],
            "code": "def has_any_empty_slots(sequence: List) -> bool:\n    return any(len(slot) == 0 for slot in sequence)"
        },
        {
            "key_id": 0,
            "fqn": "ufomerge/layout.py/_deduplicate_class_defs",
            "imports": [
                "from typing import Dict, List",
                "import fontTools.feaLib.ast as ast"
            ],
            "code": "def _deduplicate_class_defs(class_name_references: Dict[str, List[ast.GlyphClassName]]) -> List[ast.GlyphClassDefinition]:\n    unique_defs = {}\n    for class_name, references in class_name_references.items():\n        for reference in references:\n            if class_name not in unique_defs:\n                unique_defs[class_name] = ast.GlyphClassDefinition(class_name, reference.glyphs)\n            else:\n                unique_defs[class_name].glyphs.update(reference.glyphs)\n    return list(unique_defs.values())"
        },
        {
            "key_id": 1,
            "fqn": "ufomerge/layout.py/LayoutSubsetter/subset",
            "imports": [
                "import fontTools.feaLib.ast as ast",
                "from typing import Dict, Set"
            ],
            "code": "class LayoutSubsetter:\n    def __init__(self, glyphset: Set[str]):\n        self.glyphset = glyphset\n\n    def subset(self, fea: ast.FeatureFile):\n        # Implementation for subsetting the feature file\n        pass"
        },
        {
            "key_id": 14,
            "fqn": "ufomerge/layout.py/_ignore_pos_sub",
            "imports": [
                "import fontTools.feaLib.ast as ast"
            ],
            "code": "def _ignore_pos_sub(visitor, st, *args, **kwargs):\n    # Implementation to ignore positioning and substitution\n    pass"
        },
        {
            "key_id": 3,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import fontTools.feaLib.ast as ast"
            ],
            "code": "def visit(visitor, mcd, *args, **kwargs):\n    # Generic visit function, implementation depends on visitor pattern usage\n    pass"
        },
        {
            "key_id": 4,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [],
            "code": "def visit(visitor, st, *args, **kwargs):\n    # Repeated definition for visit, ensure unique handling or consolidation\n    pass"
        },
        {
            "key_id": 5,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 6,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 7,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 8,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 9,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 10,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 11,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 12,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 13,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 15,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visitor method found for {method_name}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 16,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 17,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, block, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(block).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(block, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(block).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(block).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 18,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 19,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 20,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(_visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(_visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 21,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(_visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(_visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 22,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(_visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(_visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 23,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(_visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(_visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 24,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(_visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(_visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 26,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "import logging"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    logger = logging.getLogger('ufomerge.layout')\n    try:\n        method_name = 'visit_' + type(st).__name__\n        visitor_method = getattr(visitor, method_name, None)\n        if visitor_method is not None:\n            return visitor_method(st, *args, **kwargs)\n        else:\n            logger.warning(f'No visit method for {type(st).__name__}')\n    except Exception as e:\n        logger.error(f'Error visiting {type(st).__name__}: {str(e)}')\n        raise"
        },
        {
            "key_id": 27,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "from fontTools.feaLib.ast import GlyphClassDefinition, GlyphClassName"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    if isinstance(st, GlyphClassDefinition) or isinstance(st, GlyphClassName):\n        visitor.visitGlyphClass(st)\n    else:\n        raise NotImplementedError(f'Visitor handling not implemented for type {type(st)}')"
        },
        {
            "key_id": 28,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "from fontTools.feaLib.ast import GlyphClassDefinition, GlyphClassName"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    if isinstance(st, GlyphClassDefinition) or isinstance(st, GlyphClassName):\n        visitor.visitGlyphClass(st)\n    else:\n        raise NotImplementedError(f'Visitor handling not implemented for type {type(st)}')"
        },
        {
            "key_id": 29,
            "fqn": "ufomerge/layout.py/visit",
            "imports": [
                "from fontTools.feaLib.ast import GlyphClassDefinition, GlyphClassName"
            ],
            "code": "def visit(visitor, st, *args, **kwargs):\n    if isinstance(st, GlyphClassDefinition) or isinstance(st, GlyphClassName):\n        visitor.visitGlyphClass(st)\n    else:\n        raise NotImplementedError(f'Visitor handling not implemented for type {type(st)}')"
        },
        {
            "key_id": 35,
            "fqn": "ufomerge/__init__.py/UFOMerger/__post_init__",
            "imports": [],
            "code": "def __post_init__(self):\n    self.incoming_glyphset = {}\n    self.final_glyphset = set()\n    self.blacklisted = set()\n    self.ufo2_features = None\n    self.ufo2_languagesystems = []"
        },
        {
            "key_id": 36,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge",
            "imports": [
                "from ufoLib2 import Font",
                "from fontTools.feaLib.ast import FeatureFile",
                "from typing import Iterable, Tuple, Dict, Set"
            ],
            "code": "def merge(self):\n    # Filter glyphs from both UFOs\n    self.filter_glyphs_incoming(self.glyphs)\n    # Merge glyphs\n    for glyph_name in self.final_glyphset:\n        if glyph_name not in self.ufo1:\n            self.ufo1.addGlyph(self.ufo2[glyph_name])\n    # Handle components\n    for glyph_name in self.final_glyphset:\n        self.close_components(glyph_name)\n    # Merge kerning\n    self.merge_kerning()\n    # Add language systems\n    self.add_language_systems(self.ufo2_languagesystems)\n    # Merge features\n    if self.layout_handling != 'ignore':\n        self.merge_features()"
        },
        {
            "key_id": 37,
            "fqn": "ufomerge/__init__.py/UFOMerger/close_components",
            "imports": [
                "from ufoLib2.objects import Component"
            ],
            "code": "def close_components(self, glyph: str):\n    for component in self.ufo1[glyph].components:\n        if component.baseGlyph in self.final_glyphset:\n            continue\n        if component.baseGlyph in self.ufo2:\n            self.ufo1.addGlyph(self.ufo2[component.baseGlyph])\n        else:\n            logger.warning(f'Base glyph {component.baseGlyph} for component in {glyph} not found in source UFOs')"
        },
        {
            "key_id": 38,
            "fqn": "ufomerge/__init__.py/UFOMerger/filter_glyphs_incoming",
            "imports": [
                "from typing import Iterable"
            ],
            "code": "def filter_glyphs_incoming(self, glyphs: Iterable[str]) -> list[str]:\n    filtered_glyphs = [glyph for glyph in glyphs if glyph in self.ufo2]\n    self.final_glyphset.update(filtered_glyphs)\n    return filtered_glyphs"
        },
        {
            "key_id": 39,
            "fqn": "ufomerge/__init__.py/UFOMerger/add_language_systems",
            "imports": [],
            "code": "def add_language_systems(self, incoming_languagesystems):\n    for langsys in incoming_languagesystems:\n        if langsys not in self.ufo1.features.languagesystems:\n            self.ufo1.features.languagesystems.append(langsys)"
        },
        {
            "key_id": 40,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge_kerning",
            "imports": [],
            "code": "def merge_kerning(self):\n    for left, right in self.ufo2.kerning.items():\n        if left in self.final_glyphset and right in self.final_glyphset:\n            self.ufo1.kerning[left, right] = self.ufo2.kerning[left, right]"
        },
        {
            "key_id": 41,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge_set",
            "imports": [],
            "code": "def merge_set(self, name, glyph, create_if_not_in_ufo1 = False):\n    if name in self.ufo2 and glyph in self.ufo2[name]:\n        if create_if_not_in_ufo1 and name not in self.ufo1:\n            self.ufo1[name] = self.ufo2[name].copy()\n        elif name in self.ufo1:\n            self.ufo1[name].update(self.ufo2[name])"
        },
        {
            "key_id": 42,
            "fqn": "ufomerge/__init__.py/UFOMerger/merge_dict",
            "imports": [
                "from typing import Any, Dict, Set",
                "from fontTools.ttLib import TTFont",
                "from ufoLib2.objects import Font, Glyph"
            ],
            "code": "def merge_dict(self, name: str, glyph: str, create_if_not_in_ufo1: bool = False) -> None:\n    if name not in self.ufo1.lib:\n        if create_if_not_in_ufo1:\n            self.ufo1.lib[name] = {}\n        else:\n            return\n    if name not in self.ufo2.lib:\n        return\n    dict1 = self.ufo1.lib.get(name, {})\n    dict2 = self.ufo2.lib.get(name, {})\n    for key, value in dict2.items():\n        if key not in dict1 or self.existing_handling == 'replace':\n            dict1[key] = value\n    self.ufo1.lib[name] = dict1"
        },
        {
            "key_id": 43,
            "fqn": "ufomerge/__init__.py/merge_ufos",
            "imports": [
                "from pathlib import Path",
                "from typing import Iterable, Optional",
                "from ufoLib2.objects import Font",
                "from fontTools.ttLib import TTFont",
                "from fontTools.feaLib.builder import addOpenTypeFeaturesFromString",
                "import logging"
            ],
            "code": "def merge_ufos(ufo1: Font, ufo2: Font, glyphs: Optional[Iterable[str]] = None, exclude_glyphs: Optional[Iterable[str]] = None, codepoints: Optional[Iterable[int]] = None, layout_handling: str = 'subset', existing_handling: str = 'replace', include_dir: Optional[Path] = None, original_glyphlist: Optional[Iterable[str]] = None) -> None:\n    logger = logging.getLogger('ufomerge')\n    merger = UFOMerger(ufo1, ufo2, glyphs, exclude_glyphs, codepoints, layout_handling, existing_handling, include_dir, original_glyphlist)\n    merger.merge()"
        },
        {
            "key_id": 44,
            "fqn": "ufomerge/__init__.py/subset_ufo",
            "imports": [
                "from typing import Iterable, Optional",
                "from pathlib import Path",
                "from ufoLib2.objects import Font",
                "from fontTools.feaLib.builder import addOpenTypeFeaturesFromString",
                "import logging"
            ],
            "code": "def subset_ufo(ufo: Font, glyphs: Optional[Iterable[str]] = None, exclude_glyphs: Optional[Iterable[str]] = None, codepoints: Optional[Iterable[int]] = None, layout_handling: str = 'subset', include_dir: Optional[Path] = None, original_glyphlist: Optional[Iterable[str]] = None) -> Font:\n    logger = logging.getLogger('ufomerge')\n    # Assuming subset logic is implemented elsewhere\n    # This is a placeholder for the subset operation\n    logger.info('Subsetting UFO...')\n    # Placeholder for actual subsetting logic\n    return ufo"
        }
    ]
}