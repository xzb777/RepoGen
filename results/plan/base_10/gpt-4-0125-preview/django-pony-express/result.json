{
    "implementation": [
        {
            "key_id": 1,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/__init__",
            "imports": [
                "from typing import Union, Optional, List",
                "from django.db.models.query import QuerySet"
            ],
            "code": "def __init__(self, recipient_email_list: Union[List[str], Tuple[str], QuerySet] = None, **kwargs) -> None:\n    self._errors = []\n    self.service_class = None\n    self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []"
        },
        {
            "key_id": 9,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/__init__",
            "imports": [
                "from typing import Union, Optional, List",
                "import logging"
            ],
            "code": "def __init__(self, recipient_email_list: Optional[Union[List[str], Tuple[str], str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[List] = None, **kwargs) -> None:\n    self.SUBJECT_PREFIX = None\n    self.FROM_EMAIL = None\n    self.REPLY_TO_ADDRESS = []\n    self._errors = []\n    self.subject = None\n    self.template_name = None\n    self.template_txt_name = None\n    self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []\n    self.cc_email_list = []\n    self.bcc_email_list = []\n    self.attachment_list = attachment_list if attachment_list is not None else []\n    self._logger: logging.Logger = logging.getLogger(__name__)"
        },
        {
            "key_id": 0,
            "fqn": "manage.py/main",
            "imports": [
                "import sys",
                "from django.core.management import execute_from_command_line"
            ],
            "code": "def main():\n    try:\n        execute_from_command_line(sys.argv)\n    except Exception as e:\n        print(f'Error executing command: {e}', file=sys.stderr)\n        sys.exit(1)"
        },
        {
            "key_id": 2,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/is_valid",
            "imports": [
                "from typing import List, Union",
                "from django.core.exceptions import ValidationError"
            ],
            "code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.recipient_email_list:\n        if raise_exception:\n            raise ValidationError('Recipient email list cannot be empty.')\n        else:\n            self._errors.append('Recipient email list cannot be empty.')\n            return False\n    return True"
        },
        {
            "key_id": 3,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list",
            "imports": [],
            "code": "def get_recipient_list(self) -> List[str]:\n    if isinstance(self.recipient_email_list, (list, tuple)):\n        return list(self.recipient_email_list)\n    elif hasattr(self.recipient_email_list, 'all'):\n        return [email for email in self.recipient_email_list.all()]\n    else:\n        return [self.recipient_email_list]"
        },
        {
            "key_id": 4,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_email_from_recipient",
            "imports": [],
            "code": "def get_email_from_recipient(self, recipient) -> str:\n    if hasattr(recipient, 'email'):\n        return recipient.email\n    elif isinstance(recipient, str):\n        return recipient\n    else:\n        raise ValueError('Recipient must have an email attribute or be a string')"
        },
        {
            "key_id": 5,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_context_data",
            "imports": [],
            "code": "def get_context_data(self) -> dict:\n    return {'subject_prefix': self.service_class.SUBJECT_PREFIX if self.service_class and hasattr(self.service_class, 'SUBJECT_PREFIX') else '',\n            'from_email': self.service_class.FROM_EMAIL if self.service_class and hasattr(self.service_class, 'FROM_EMAIL') else ''}"
        },
        {
            "key_id": 6,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/has_errors",
            "imports": [],
            "code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0"
        },
        {
            "key_id": 7,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/errors",
            "imports": [],
            "code": "def errors(self) -> List[str]:\n    return self._errors"
        },
        {
            "key_id": 8,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/process",
            "imports": [
                "from django.core.mail import send_mail",
                "from django.template.loader import render_to_string"
            ],
            "code": "def process(self, raise_exception: bool = True) -> int:\n    if not self.is_valid(raise_exception=raise_exception):\n        return 0\n    subject = self.get_context_data().get('subject_prefix', '') + 'Your Email Subject Here'\n    message = render_to_string('email_template.html', self.get_context_data())\n    recipient_list = self.get_recipient_list()\n    try:\n        send_mail(subject, message, self.service_class.FROM_EMAIL, recipient_list, fail_silently=not raise_exception)\n        return len(recipient_list)\n    except Exception as e:\n        if raise_exception:\n            raise\n        else:\n            self._errors.append(str(e))\n            return 0"
        },
        {
            "key_id": 10,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_get_logger",
            "imports": [
                "import logging"
            ],
            "code": "def _get_logger(self) -> logging.Logger:\n    if not hasattr(self, '_logger'):\n        self._logger = logging.getLogger(__name__)\n    return self._logger"
        },
        {
            "key_id": 11,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_context_data",
            "imports": [],
            "code": "def get_context_data(self) -> dict:\n    context = super().get_context_data()\n    context.update({\n        'subject': self.subject,\n        'template_name': self.template_name,\n        'template_txt_name': self.template_txt_name,\n        'recipient_email_list': self.recipient_email_list,\n        'cc_email_list': self.cc_email_list,\n        'bcc_email_list': self.bcc_email_list,\n        'attachment_list': self.attachment_list\n    })\n    return context"
        },
        {
            "key_id": 12,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_subject",
            "imports": [],
            "code": "def get_subject(self) -> str:\n    if self.SUBJECT_PREFIX:\n        return f'{self.SUBJECT_PREFIX} {self.subject}'\n    return self.subject"
        },
        {
            "key_id": 13,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_from_email",
            "imports": [],
            "code": "def get_from_email(self) -> str:\n    return self.FROM_EMAIL"
        },
        {
            "key_id": 14,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_cc_emails",
            "imports": [],
            "code": "def get_cc_emails(self) -> list:\n    return self.cc_email_list"
        },
        {
            "key_id": 15,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_bcc_emails",
            "imports": [],
            "code": "def get_bcc_emails(self) -> list:\n    return self.bcc_email_list"
        },
        {
            "key_id": 16,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_reply_to_emails",
            "imports": [],
            "code": "def get_reply_to_emails(self) -> list:\n    return self.REPLY_TO_ADDRESS"
        },
        {
            "key_id": 17,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_translation",
            "imports": [
                "from django.utils.translation import gettext_lazy as _"
            ],
            "code": "def get_translation(self) -> Union[str, None]:\n    # Assuming there's a method to determine the language\n    # This is a placeholder for the logic to fetch the translation\n    # based on the user's language preference\n    return _('Your email content translation here') if self.template_name else None"
        },
        {
            "key_id": 18,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_attachments",
            "imports": [],
            "code": "def get_attachments(self) -> list:\n    return self.attachment_list"
        },
        {
            "key_id": 19,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_add_attachments",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives"
            ],
            "code": "def _add_attachments(self, msg: EmailMultiAlternatives):\n    for attachment in self.get_attachments():\n        if isinstance(attachment, tuple) and len(attachment) == 3:\n            msg.attach(attachment[0], attachment[1], attachment[2])\n        else:\n            raise ValueError('Attachment must be a tuple of (filename, content, mimetype)')"
        },
        {
            "key_id": 20,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives"
            ],
            "code": "def _build_mail_object(self) -> EmailMultiAlternatives:\n    msg = EmailMultiAlternatives(\n        subject=self.get_subject(),\n        body=self.get_context_data().get('body', ''),\n        from_email=self.get_from_email(),\n        to=self.recipient_email_list,\n        cc=self.get_cc_emails(),\n        bcc=self.get_bcc_emails(),\n        reply_to=self.get_reply_to_emails()\n    )\n    self._add_attachments(msg)\n    return msg"
        },
        {
            "key_id": 21,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/is_valid",
            "imports": [],
            "code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.recipient_email_list:\n        if raise_exception:\n            raise ValueError('Recipient email list cannot be empty.')\n        else:\n            return False\n    return True"
        },
        {
            "key_id": 22,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/has_errors",
            "imports": [
                "import logging"
            ],
            "code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0"
        },
        {
            "key_id": 23,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/errors",
            "imports": [],
            "code": "def errors(self) -> list:\n    return self._errors"
        },
        {
            "key_id": 24,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "import logging"
            ],
            "code": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:\n    try:\n        msg.send()\n        self._logger.info('Email sent successfully.')\n        return True\n    except Exception as e:\n        self._logger.error(f'Failed to send email: {e}')\n        self._errors.append(str(e))\n        return False"
        },
        {
            "key_id": 25,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/process",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "import logging"
            ],
            "code": "def process(self, raise_exception: bool = True) -> bool:\n    if not self.is_valid(raise_exception=raise_exception):\n        if raise_exception:\n            raise ValueError('Email data is not valid')\n        else:\n            return False\n    msg = self._build_mail_object()\n    return self._send_and_log_email(msg)"
        },
        {
            "key_id": 26,
            "fqn": "django_pony_express/services/asynchronous/thread.py/ThreadEmailService/process",
            "imports": [
                "from threading import Thread",
                "from django_pony_express.services.base import BaseEmailService"
            ],
            "code": "def process(self, raise_exception: bool = True) -> None:\n    def run_email_service():\n        super(ThreadEmailService, self).process(raise_exception=raise_exception)\n    email_thread = Thread(target=run_email_service)\n    email_thread.start()"
        }
    ]
}