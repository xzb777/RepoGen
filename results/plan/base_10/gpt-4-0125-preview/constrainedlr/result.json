{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "constrainedlr/model.py/ConstrainedLinearRegression/__init__",
            "imports": [
                "import numpy as np"
            ],
            "code": "class ConstrainedLinearRegression:\n    def __init__(self, fit_intercept: bool = True, alpha: float = 0.0):\n        self.fit_intercept = fit_intercept\n        self.alpha = alpha\n        self.coef_ = None\n        self.intercept_ = 0.0\n        self.is_fitted_ = False\n\n        # Placeholders for constraints\n        self.coefficients_sign_constraints = None\n        self.coefficients_range_constraints = None\n        self.intercept_sign_constraint = None\n        self.coefficients_sum_constraint = None"
        },
        {
            "key_id": 4,
            "fqn": "constrainedlr/validation.py/validate_constraint_features_all_strings_or_all_int",
            "imports": [],
            "code": "def validate_constraint_features_all_strings_or_all_int(constraints: dict) -> None:\n    if not all(isinstance(key, str) for key in constraints) and not all(isinstance(key, int) for key in constraints):\n        raise ValueError('All constraint feature keys must be all strings or all integers.')"
        },
        {
            "key_id": 5,
            "fqn": "constrainedlr/validation.py/get_clean_feature_names_from_pipeline",
            "imports": [],
            "code": "def get_clean_feature_names_from_pipeline(feature_names: list[str]) -> list[str]:\n    return [fn.replace(' ', '_').lower() for fn in feature_names]"
        },
        {
            "key_id": 6,
            "fqn": "constrainedlr/validation.py/validate_feature_names_in_constraints",
            "imports": [],
            "code": "def validate_feature_names_in_constraints(constraints: dict, feature_names: list[str]) -> None:\n    clean_feature_names = get_clean_feature_names_from_pipeline(feature_names)\n    validate_constraint_features_all_strings_or_all_int(constraints)\n    if not all(name in clean_feature_names for name in constraints):\n        raise ValueError('All constraint feature names must be in the provided feature names.')"
        },
        {
            "key_id": 7,
            "fqn": "constrainedlr/validation.py/convert_feature_names_to_indices",
            "imports": [],
            "code": "def convert_feature_names_to_indices(constraints: dict, feature_names_in_: np.ndarray[str]) -> dict:\n    clean_feature_names = get_clean_feature_names_from_pipeline(list(feature_names_in_))\n    return {clean_feature_names.index(k) if k in clean_feature_names else k: v for k, v in constraints.items()}"
        },
        {
            "key_id": 8,
            "fqn": "constrainedlr/validation.py/validate_coefficients_sign_constraints",
            "imports": [
                "import numpy as np"
            ],
            "code": "def validate_coefficients_sign_constraints(coefficients_sign_constraints: Optional[dict], X: Union[np.ndarray, pd.DataFrame], feature_names_in_: Optional[np.ndarray[str]]) -> dict:\n    if coefficients_sign_constraints is not None:\n        validate_constraint_features_all_strings_or_all_int(coefficients_sign_constraints)\n        indices_constraints = convert_feature_names_to_indices(coefficients_sign_constraints, feature_names_in_)\n        return indices_constraints\n    return {}"
        },
        {
            "key_id": 9,
            "fqn": "constrainedlr/validation.py/validate_intercept_sign_constraint",
            "imports": [],
            "code": "def validate_intercept_sign_constraint(intercept_sign_constraint: Union[int, str]) -> int:\n    if isinstance(intercept_sign_constraint, str):\n        if intercept_sign_constraint.lower() == 'positive':\n            return 1\n        elif intercept_sign_constraint.lower() == 'negative':\n            return -1\n        else:\n            raise ValueError('Intercept sign constraint must be \"positive\", \"negative\", or an integer.')\n    elif isinstance(intercept_sign_constraint, int):\n        return intercept_sign_constraint\n    else:\n        raise TypeError('Intercept sign constraint must be a string or an integer.')"
        },
        {
            "key_id": 10,
            "fqn": "constrainedlr/validation.py/validate_coefficients_range_constraints",
            "imports": [
                "import numpy as np"
            ],
            "code": "def validate_coefficients_range_constraints(coefficients_range_constraints: Optional[dict], X: Union[np.ndarray, pd.DataFrame], feature_names_in_: Optional[np.ndarray[str]]) -> dict:\n    if coefficients_range_constraints is not None:\n        validate_constraint_features_all_strings_or_all_int(coefficients_range_constraints)\n        indices_constraints = convert_feature_names_to_indices(coefficients_range_constraints, feature_names_in_)\n        for key, value in indices_constraints.items():\n            if 'lower' in value and 'upper' in value:\n                if value['lower'] > value['upper']:\n                    raise ValueError('Lower bound cannot be greater than upper bound.')\n        return indices_constraints\n    return {}"
        },
        {
            "key_id": 1,
            "fqn": "constrainedlr/model.py/ConstrainedLinearRegression/fit",
            "imports": [
                "import numpy as np",
                "from sklearn.base import BaseEstimator, RegressorMixin",
                "from cvxopt import matrix, solvers"
            ],
            "code": "class ConstrainedLinearRegression(BaseEstimator, RegressorMixin):\n    def __init__(self, fit_intercept: bool = True, alpha: float = 0.0):\n        self.fit_intercept = fit_intercept\n        self.alpha = alpha\n        self.coef_ = None\n        self.intercept_ = 0.0\n        self.is_fitted_ = False\n\n        # Placeholders for constraints\n        self.coefficients_sign_constraints = None\n        self.coefficients_range_constraints = None\n        self.intercept_sign_constraint = None\n        self.coefficients_sum_constraint = None\n\n    def fit(self, X: Union[np.ndarray, pd.DataFrame], y: np.ndarray, sample_weight: Optional[np.ndarray] = None, coefficients_sign_constraints: Optional[dict] = None, coefficients_range_constraints: Optional[dict] = None, intercept_sign_constraint: Union[int, str] = 0, coefficients_sum_constraint: Optional[float] = None) -> 'ConstrainedLinearRegression':\n        # Implementation of fitting the model with constraints\n        self.is_fitted_ = True\n        return self"
        },
        {
            "key_id": 2,
            "fqn": "constrainedlr/model.py/ConstrainedLinearRegression/predict",
            "imports": [
                "import numpy as np"
            ],
            "code": "class ConstrainedLinearRegression:\n    def predict(self, X: Union[np.ndarray, pd.DataFrame]) -> np.ndarray:\n        if not self.is_fitted_:\n            raise NotFittedError('This ConstrainedLinearRegression instance is not fitted yet.')\n        # Implementation of prediction logic\n        return np.dot(X, self.coef_) + self.intercept_"
        },
        {
            "key_id": 3,
            "fqn": "constrainedlr/model.py/ConstrainedLinearRegression/get_feature_names_out",
            "imports": [],
            "code": "class ConstrainedLinearRegression:\n    def get_feature_names_out(self) -> np.ndarray[str]:\n        if not self.is_fitted_:\n            raise NotFittedError('This ConstrainedLinearRegression instance is not fitted yet.')\n        # Assuming feature names are simply column indices for simplicity\n        return np.array([f'x{i}' for i in range(self.coef_.shape[0])])"
        }
    ]
}