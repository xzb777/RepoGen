{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/__init__",
            "imports": [
                "from argparse import ArgumentParser, Namespace"
            ],
            "code": "class ReverseArgumentParser:\n    def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):\n        self.parser = parser\n        self.namespace = namespace\n        self.indent = indent\n        self.arguments = []\n        self._unparse_args()\n\n    BOOLEAN_OPTIONAL_ACTION_MINOR_VERSION = 9\n    SHORT_OPTION_LENGTH = 2\n\n    def _unparse_args(self) -> None:\n        for action in self.parser._actions:\n            self._unparse_action(action)\n\n    def _unparse_action(self, action):\n        # Implementation will depend on the type of action\n        pass\n\n    def _arg_is_default_and_help_is_suppressed(self, action) -> bool:\n        # Check if the argument's value is the default and if help is suppressed\n        pass\n\n    def get_effective_command_line_invocation(self) -> str:\n        # Generate the effective command line invocation\n        pass\n\n    def get_pretty_command_line_invocation(self) -> str:\n        # Generate a prettified version of the command line invocation\n        pass"
        },
        {
            "key_id": 1,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_args(self) -> None:\n        for action in self.parser._actions:\n            if not self._arg_is_default_and_help_is_suppressed(action):\n                self._unparse_action(action)"
        },
        {
            "key_id": 2,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
            "imports": [
                "from argparse import _StoreAction, _StoreTrueAction, _StoreFalseAction, _AppendAction, _AppendConstAction, _CountAction, _SubParsersAction, _ExtendAction, _StoreConstAction, _BooleanOptionalAction"
            ],
            "code": "def _unparse_action(self, action: Action) -> None:\n        if isinstance(action, (_StoreAction, _StoreConstAction)):\n            self._unparse_store_action(action)\n        elif isinstance(action, _StoreTrueAction):\n            self._unparse_store_true_action(action)\n        elif isinstance(action, _StoreFalseAction):\n            self._unparse_store_false_action(action)\n        elif isinstance(action, _AppendAction):\n            self._unparse_append_action(action)\n        elif isinstance(action, _AppendConstAction):\n            self._unparse_append_const_action(action)\n        elif isinstance(action, _CountAction):\n            self._unparse_count_action(action)\n        elif isinstance(action, _SubParsersAction):\n            self._unparse_sub_parsers_action(action)\n        elif isinstance(action, _ExtendAction):\n            self._unparse_extend_action(action)\n        elif isinstance(action, _BooleanOptionalAction):\n            self._unparse_boolean_optional_action(action)"
        },
        {
            "key_id": 3,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
            "imports": [],
            "code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n        if action.help is argparse.SUPPRESS:\n            return True\n        if hasattr(action, 'default') and getattr(self.namespace, action.dest) == action.default:\n            return True\n        return False"
        },
        {
            "key_id": 4,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
            "imports": [
                "import shlex"
            ],
            "code": "def get_effective_command_line_invocation(self) -> str:\n        args = []\n        for arg in self.arguments:\n            args.append(shlex.quote(arg))\n        return ' '.join(args)"
        },
        {
            "key_id": 5,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
            "imports": [
                "import shlex"
            ],
            "code": "def get_pretty_command_line_invocation(self) -> str:\n        args = []\n        for arg in self.arguments:\n            args.append(shlex.quote(arg))\n        return '\\n'.join(args)"
        },
        {
            "key_id": 6,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
            "imports": [],
            "code": "def _get_long_option_strings(self, option_strings) -> list:\n        return [opt for opt in option_strings if len(opt) > self.SHORT_OPTION_LENGTH]"
        },
        {
            "key_id": 7,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
            "imports": [],
            "code": "def _get_short_option_strings(self, option_strings) -> list:\n        return [opt for opt in option_strings if len(opt) == self.SHORT_OPTION_LENGTH]"
        },
        {
            "key_id": 8,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
            "imports": [],
            "code": "def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:\n        if prefer_short:\n            options = self._get_short_option_strings(action.option_strings)\n        else:\n            options = self._get_long_option_strings(action.option_strings)\n        return options[0] if options else ''"
        },
        {
            "key_id": 9,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
            "imports": [],
            "code": "def _append_list_of_list_of_args(self, args: list) -> None:\n        for arg_list in args:\n            self._append_list_of_args(arg_list)"
        },
        {
            "key_id": 10,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_args",
            "imports": [],
            "code": "def _append_list_of_args(self, args: list) -> None:\n        for arg in args:\n            self._append_arg(arg)"
        },
        {
            "key_id": 12,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_indent_str",
            "imports": [],
            "code": "def _indent_str(self) -> str:\n        return ' ' * self.indent"
        },
        {
            "key_id": 11,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_arg",
            "imports": [],
            "code": "def _append_arg(self, arg: str) -> None:\n        indented_line = self._indent_str() + arg + '\\n'\n        self.arguments.append(indented_line)"
        },
        {
            "key_id": 13,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_action",
            "imports": [],
            "code": "def _unparse_store_action(self, action) -> None:\n        if action.dest != 'help':\n            arg_value = getattr(self.namespace, action.dest, None)\n            if arg_value is not None:\n                arg_str = f'{action.option_strings[0]} {arg_value}'\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 14,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_const_action",
            "imports": [],
            "code": "def _unparse_store_const_action(self, action) -> None:\n        if action.dest != 'help':\n            const_value = getattr(self.namespace, action.dest, None)\n            if const_value == action.const:\n                arg_str = action.option_strings[0]\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 15,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_true_action",
            "imports": [],
            "code": "def _unparse_store_true_action(self, action) -> None:\n        if action.dest != 'help':\n            true_value = getattr(self.namespace, action.dest, None)\n            if true_value is True:\n                arg_str = action.option_strings[0]\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 16,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_false_action",
            "imports": [],
            "code": "def _unparse_store_false_action(self, action) -> None:\n        if action.dest != 'help':\n            false_value = getattr(self.namespace, action.dest, None)\n            if false_value is False:\n                arg_str = action.option_strings[0]\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 17,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_action",
            "imports": [],
            "code": "def _unparse_append_action(self, action) -> None:\n        if action.dest != 'help':\n            append_values = getattr(self.namespace, action.dest, None)\n            if append_values is not None:\n                for value in append_values:\n                    arg_str = f'{action.option_strings[0]} {value}'\n                    self._append_arg(arg_str)"
        },
        {
            "key_id": 18,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_const_action",
            "imports": [],
            "code": "def _unparse_append_const_action(self, action) -> None:\n        if action.dest != 'help':\n            append_const_values = getattr(self.namespace, action.dest, None)\n            if append_const_values == action.const:\n                arg_str = action.option_strings[0]\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 19,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_count_action",
            "imports": [],
            "code": "def _unparse_count_action(self, action) -> None:\n        if action.dest != 'help':\n            count_value = getattr(self.namespace, action.dest, None)\n            if count_value is not None and count_value > 0:\n                arg_str = f'{action.option_strings[0]} ' + ' '.join([str(count_value)])\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 20,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_sub_parsers_action",
            "imports": [],
            "code": "def _unparse_sub_parsers_action(self, action) -> None:\n        if action.dest != 'help':\n            sub_parser_value = getattr(self.namespace, action.dest, None)\n            if sub_parser_value is not None:\n                arg_str = sub_parser_value\n                self._append_arg(arg_str)"
        },
        {
            "key_id": 21,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_extend_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_extend_action(self, action: Action) -> None:\n    if action.dest in self.namespace:\n        values = getattr(self.namespace, action.dest)\n        if values is not None:\n            for value in values:\n                self._append_arg(f'--{action.dest}={value}')\n    else:\n        self._append_arg(f'--{action.dest}')"
        },
        {
            "key_id": 22,
            "fqn": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_boolean_optional_action",
            "imports": [
                "from argparse import Action"
            ],
            "code": "def _unparse_boolean_optional_action(self, action: Action) -> None:\n    if action.dest in self.namespace:\n        value = getattr(self.namespace, action.dest)\n        if value is True:\n            self._append_arg(f'--{action.dest}')\n        elif value is False and 'dest_false' in action.__dict__:\n            self._append_arg(f'--{action.__dict__['dest_false']}')\n        else:\n            pass"
        },
        {
            "key_id": 23,
            "fqn": "reverse_argparse/reverse_argparse.py/quote_arg_if_necessary",
            "imports": [
                "import shlex"
            ],
            "code": "def quote_arg_if_necessary(arg: str) -> str:\n    if ' ' in arg or '\"' in arg:\n        return shlex.quote(arg)\n    return arg"
        }
    ]
}