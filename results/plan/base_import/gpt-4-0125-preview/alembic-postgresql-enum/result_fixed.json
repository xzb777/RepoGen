{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/connection.py",
            "relative_path": "alembic_postgresql_enum/connection.py",
            "fqn_list": "alembic_postgresql_enum/connection.py/get_connection",
            "class": null,
            "signature": "def get_connection(operations) -> Iterator[sqlalchemy.engine.Connection]:",
            "comment": "SQLAlchemy 2.0 changes the operation binding location; bridge function to support\nboth 1.x and 2.x.",
            "comment_free_code": "@contextmanager\ndef get_connection(operations) -> Iterator[sqlalchemy.engine.Connection]:\n    \n    binding = operations.get_bind()\n    if isinstance(binding, sqlalchemy.engine.Connection):\n        yield binding\n        return\n    yield binding.connect()",
            "start_lineno": 8,
            "end_lineno": 18,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/connection.py",
                    "from contextlib import contextmanager",
                    "contextlib.contextmanager"
                ],
                [
                    "alembic_postgresql_enum/connection.py",
                    "from typing import Iterator",
                    "typing.Iterator"
                ],
                [
                    "alembic_postgresql_enum/connection.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 0,
            "gen_code": "@contextmanager\ndef get_connection(operations) -> Iterator[Connection]:\n    bind = operations.get_bind()\n    if bind:\n        yield bind\n    else:\n        raise RuntimeError('Failed to get bind for operations')",
            "gen_import": [
                "from contextlib import contextmanager",
                "from typing import Iterator",
                "import sqlalchemy",
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/compare_dispatch.py",
            "relative_path": "alembic_postgresql_enum/compare_dispatch.py",
            "fqn_list": "alembic_postgresql_enum/compare_dispatch.py/compare_enums",
            "class": null,
            "signature": "def compare_enums(autogen_context: AutogenContext, upgrade_ops: UpgradeOps, schema_names: Iterable[Union[str, None]]):",
            "comment": "Walk the declared SQLAlchemy schema for every referenced Enum, walk the PG\nschema for every defined Enum, then generate SyncEnumValuesOp migrations\nfor each defined enum that has changed new entries when compared to its\ndeclared version.",
            "comment_free_code": "@alembic.autogenerate.comparators.dispatch_for('schema')\ndef compare_enums(autogen_context: AutogenContext, upgrade_ops: UpgradeOps, schema_names: Iterable[Union[str, None]]):\n    \n    assert autogen_context.dialect is not None and autogen_context.dialect.default_schema_name is not None and (autogen_context.connection is not None) and (autogen_context.metadata is not None)\n    if autogen_context.dialect.name != 'postgresql':\n        log.warning(f'This library only supports postgresql, but you are using {autogen_context.dialect.name}, skipping')\n        return\n    add_create_type_false(upgrade_ops)\n    add_postgres_using_to_text(upgrade_ops)\n    schema_names = list(schema_names)\n    for operations_group in upgrade_ops.ops:\n        if isinstance(operations_group, CreateTableOp) and operations_group.schema not in schema_names:\n            schema_names.append(operations_group.schema)\n    for schema in schema_names:\n        default_schema = autogen_context.dialect.default_schema_name\n        if schema is None:\n            schema = default_schema\n        definitions = get_defined_enums(autogen_context.connection, schema)\n        declarations = get_declared_enums(autogen_context.metadata, schema, default_schema, autogen_context.connection, upgrade_ops)\n        create_new_enums(definitions, declarations.enum_values, schema, upgrade_ops)\n        drop_unused_enums(definitions, declarations.enum_values, schema, upgrade_ops)\n        sync_changed_enums(definitions, declarations.enum_values, declarations.enum_table_references, schema, upgrade_ops)",
            "start_lineno": 24,
            "end_lineno": 79,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "import alembic",
                    "alembic"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.add_create_type_false import add_create_type_false",
                    "alembic_postgresql_enum.add_create_type_false.add_create_type_false"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.add_postgres_using_to_text import add_postgres_using_to_text",
                    "alembic_postgresql_enum.add_postgres_using_to_text.add_postgres_using_to_text"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.detection_of_changes import sync_changed_enums",
                    "alembic_postgresql_enum.detection_of_changes.sync_changed_enums"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.detection_of_changes import create_new_enums",
                    "alembic_postgresql_enum.detection_of_changes.create_new_enums"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.detection_of_changes import drop_unused_enums",
                    "alembic_postgresql_enum.detection_of_changes.drop_unused_enums"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.get_enum_data import get_defined_enums",
                    "alembic_postgresql_enum.get_enum_data.get_defined_enums"
                ],
                [
                    "alembic_postgresql_enum/compare_dispatch.py",
                    "from alembic_postgresql_enum.get_enum_data import get_declared_enums",
                    "alembic_postgresql_enum.get_enum_data.get_declared_enums"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 1,
            "gen_code": "def compare_enums(autogen_context: AutogenContext, upgrade_ops: UpgradeOps, schema_names: Iterable[Union[str, None]]):\n    log = logging.getLogger(f\"alembic.{__name__}\")\n    connection = autogen_context.connection\n    defined_enums = get_defined_enums(connection, schema_names)\n    declared_enums = get_declared_enums(autogen_context.metadata, schema_names, autogen_context.dialect.default_schema_name, connection)\n    create_new_enums(defined_enums, declared_enums, schema_names, upgrade_ops)\n    sync_changed_enums(defined_enums, declared_enums, schema_names, upgrade_ops)\n    drop_unused_enums(defined_enums, declared_enums, schema_names, upgrade_ops)\n    add_create_type_false(upgrade_ops)\n    add_postgres_using_to_text(upgrade_ops)",
            "gen_import": [
                "import logging",
                "from typing import Iterable, Union",
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic.operations.ops import UpgradeOps",
                "from alembic_postgresql_enum.add_create_type_false import add_create_type_false",
                "from alembic_postgresql_enum.add_postgres_using_to_text import add_postgres_using_to_text",
                "from alembic_postgresql_enum.detection_of_changes.sync_changed_enums import sync_changed_enums",
                "from alembic_postgresql_enum.detection_of_changes.create_new_enums import create_new_enums",
                "from alembic_postgresql_enum.detection_of_changes.drop_unused_enums import drop_unused_enums",
                "from alembic_postgresql_enum.get_enum_data.get_defined_enums import get_defined_enums",
                "from alembic_postgresql_enum.get_enum_data.get_declared_enums import get_declared_enums"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_create_type_false.py",
            "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
            "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/ReprWorkaround/__repr__",
            "class": "alembic_postgresql_enum/add_create_type_false.py.ReprWorkaround",
            "signature": "def __repr__(self):",
            "comment": null,
            "comment_free_code": "def __repr__(self):\n    return f'{super().__repr__()[:-1]}, create_type=False)'.replace('ReprWorkaround', 'ENUM').replace(', metadata=MetaData()', '')",
            "start_lineno": 23,
            "end_lineno": 26,
            "local_variables": {
                "ReprWorkaround": [
                    "__module__ = \"sqlalchemy.dialects.postgresql\""
                ],
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropColumnOp",
                    "alembic.operations.ops.DropColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropTableOp",
                    "alembic.operations.ops.DropTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 2,
            "gen_code": "class ReprWorkaround:\n    __module__ = 'sqlalchemy.dialects.postgresql'\n\n    def __repr__(self):\n        log = logging.getLogger(f'alembic.{__name__}')\n        return '<ReprWorkaround for postgresql.ENUM representation>'",
            "gen_import": [
                "import logging",
                "from sqlalchemy.dialects import postgresql"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_create_type_false.py",
            "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
            "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/get_replacement_type",
            "class": null,
            "signature": "def get_replacement_type(column_type):",
            "comment": null,
            "comment_free_code": "def get_replacement_type(column_type):\n    replacement_enum_type = column_type\n    if replacement_enum_type.__class__ == sqlalchemy.Enum:\n        if not replacement_enum_type.native_enum:\n            return replacement_enum_type\n        log.info('%r converted into postgresql.ENUM', replacement_enum_type)\n        replacement_enum_type = eval(repr(replacement_enum_type).replace('Enum', 'postgresql.ENUM'))\n    if isinstance(replacement_enum_type, postgresql.ENUM):\n        if replacement_enum_type.create_type:\n            log.info('create_type=False injected into %r', replacement_enum_type)\n        replacement_enum_type.__class__ = ReprWorkaround\n    return replacement_enum_type",
            "start_lineno": 32,
            "end_lineno": 48,
            "local_variables": {
                "ReprWorkaround": [
                    "__module__ = \"sqlalchemy.dialects.postgresql\""
                ],
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                2
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropColumnOp",
                    "alembic.operations.ops.DropColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropTableOp",
                    "alembic.operations.ops.DropTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/add_create_type_false.py/ReprWorkaround"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 3,
            "gen_code": "def get_replacement_type(column_type):\n    log = logging.getLogger(f'alembic.{__name__}')\n    if isinstance(column_type, postgresql.ENUM):\n        return ReprWorkaround()\n    return column_type",
            "gen_import": [
                "import logging",
                "from sqlalchemy.dialects import postgresql",
                "from sqlalchemy import Column"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_create_type_false.py",
            "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
            "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/inject_repr_into_enums",
            "class": null,
            "signature": "def inject_repr_into_enums(column: Column):",
            "comment": "Swap postgresql.ENUM class to ReprWorkaround for the column type",
            "comment_free_code": "def inject_repr_into_enums(column: Column):\n    \n    if isinstance(column.type, sqlalchemy.ARRAY):\n        column.type.item_type = get_replacement_type(column.type.item_type)\n    else:\n        column.type = get_replacement_type(column.type)",
            "start_lineno": 51,
            "end_lineno": 56,
            "local_variables": {
                "ReprWorkaround": [
                    "__module__ = \"sqlalchemy.dialects.postgresql\""
                ],
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                4
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropColumnOp",
                    "alembic.operations.ops.DropColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropTableOp",
                    "alembic.operations.ops.DropTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/add_create_type_false.py/get_replacement_type"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 4,
            "gen_code": "def inject_repr_into_enums(column: Column):\n    log = logging.getLogger(f'alembic.{__name__}')\n    if isinstance(column.type, postgresql.ENUM):\n        column.type = get_replacement_type(column.type)",
            "gen_import": [
                "import logging",
                "from sqlalchemy import Column",
                "from sqlalchemy.dialects import postgresql"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_create_type_false.py",
            "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
            "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/add_create_type_false",
            "class": null,
            "signature": "def add_create_type_false(upgrade_ops: UpgradeOps):",
            "comment": "Add create_type=False to all postgresql.ENUM types that are generated by alembic",
            "comment_free_code": "def add_create_type_false(upgrade_ops: UpgradeOps):\n    \n    for operations_group in upgrade_ops.ops:\n        if isinstance(operations_group, ModifyTableOps):\n            for operation in operations_group.ops:\n                if isinstance(operation, AddColumnOp):\n                    inject_repr_into_enums(operation.column)\n                elif isinstance(operation, DropColumnOp):\n                    assert operation._reverse is not None\n                    inject_repr_into_enums(operation._reverse.column)\n        elif isinstance(operations_group, CreateTableOp):\n            for column in operations_group.columns:\n                if isinstance(column, Column):\n                    inject_repr_into_enums(column)\n        elif isinstance(operations_group, DropTableOp):\n            assert operations_group._reverse is not None\n            for column in operations_group._reverse.columns:\n                if isinstance(column, Column):\n                    inject_repr_into_enums(column)",
            "start_lineno": 59,
            "end_lineno": 79,
            "local_variables": {
                "ReprWorkaround": [
                    "__module__ = \"sqlalchemy.dialects.postgresql\""
                ],
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                5
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropColumnOp",
                    "alembic.operations.ops.DropColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from alembic.operations.ops import DropTableOp",
                    "alembic.operations.ops.DropTableOp"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ],
                [
                    "alembic_postgresql_enum/add_create_type_false.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/add_create_type_false.py/inject_repr_into_enums"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 5,
            "gen_code": "def add_create_type_false(upgrade_ops: ops.UpgradeOps):\n    log = logging.getLogger(f'alembic.{__name__}')\n    for op in upgrade_ops.ops:\n        if isinstance(op, ops.CreateTableOp):\n            for column in op.columns:\n                inject_repr_into_enums(column)\n        elif isinstance(op, ops.AddColumnOp):\n            inject_repr_into_enums(op.column)",
            "gen_import": [
                "import logging",
                "from alembic.operations import ops",
                "from sqlalchemy import Column",
                "from sqlalchemy.dialects import postgresql"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_postgres_using_to_text.py",
            "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
            "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/PostgresUsingAlterColumnOp/reverse",
            "class": "alembic_postgresql_enum/add_postgres_using_to_text.py.PostgresUsingAlterColumnOp",
            "signature": "def reverse(self):",
            "comment": null,
            "comment_free_code": "def reverse(self):\n    reversed_object = super().reverse()\n    reversed_object.kw.pop('postgresql_using', None)\n    return reversed_object",
            "start_lineno": 15,
            "end_lineno": 18,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic_postgresql_enum.get_enum_data.declared_enums import column_type_is_enum",
                    "alembic_postgresql_enum.get_enum_data.declared_enums.column_type_is_enum"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import renderers",
                    "alembic.autogenerate.renderers"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import render",
                    "alembic.autogenerate.render"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations import ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from sqlalchemy import String",
                    "sqlalchemy.String"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 6,
            "gen_code": "class PostgresUsingAlterColumnOp:\n    def reverse(self):\n        log = logging.getLogger(f'alembic.{__name__}')\n        return self",
            "gen_import": [
                "import logging",
                "from alembic.operations import ops",
                "from sqlalchemy import String"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_postgres_using_to_text.py",
            "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
            "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/_postgres_using_alter_column",
            "class": null,
            "signature": "def _postgres_using_alter_column(autogen_context: AutogenContext, op: ops.AlterColumnOp) -> str:",
            "comment": null,
            "comment_free_code": "@renderers.dispatch_for(PostgresUsingAlterColumnOp)\ndef _postgres_using_alter_column(autogen_context: AutogenContext, op: ops.AlterColumnOp) -> str:\n    alter_column_expression = render._alter_column(autogen_context, op)\n    postgresql_using = op.kw.get('postgresql_using', None)\n    indent = ' ' * 11\n    alter_column_expression = alter_column_expression[:-1]\n    if postgresql_using:\n        alter_column_expression += f\",\\n{indent}postgresql_using='{postgresql_using}'\"\n    alter_column_expression += ')'\n    return alter_column_expression",
            "start_lineno": 22,
            "end_lineno": 35,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic_postgresql_enum.get_enum_data.declared_enums import column_type_is_enum",
                    "alembic_postgresql_enum.get_enum_data.declared_enums.column_type_is_enum"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import renderers",
                    "alembic.autogenerate.renderers"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import render",
                    "alembic.autogenerate.render"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations import ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from sqlalchemy import String",
                    "sqlalchemy.String"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 7,
            "gen_code": "def _postgres_using_alter_column(autogen_context: AutogenContext, op: AlterColumnOp) -> str:\n    log = logging.getLogger(f\"alembic.{__name__}\")\n    if column_type_is_enum(op.existing_type):\n        return f\"ALTER COLUMN {op.name} TYPE {op.modify_type.compile(autogen_context.dialect)} USING ({op.name}::text::{op.modify_type.compile(autogen_context.dialect)})\"\n    else:\n        log.info(f\"No ENUM type alteration needed for column {op.name}.\")\n        return \"\"",
            "gen_import": [
                "import logging",
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic.operations import ops",
                "from alembic.operations.ops import AlterColumnOp",
                "from sqlalchemy import String",
                "from alembic_postgresql_enum.get_enum_data.declared_enums import column_type_is_enum"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_postgres_using_to_text.py",
            "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
            "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_alter_operation",
            "class": null,
            "signature": "def add_postgres_using_to_alter_operation(op: AlterColumnOp):",
            "comment": null,
            "comment_free_code": "def add_postgres_using_to_alter_operation(op: AlterColumnOp):\n    assert op.modify_type is not None\n    op.kw['postgresql_using'] = f'{op.column_name}::{op.modify_type.name}'\n    log.info('postgresql_using added to %r.%r alteration', op.table_name, op.column_name)\n    op.__class__ = PostgresUsingAlterColumnOp",
            "start_lineno": 41,
            "end_lineno": 45,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                7
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic_postgresql_enum.get_enum_data.declared_enums import column_type_is_enum",
                    "alembic_postgresql_enum.get_enum_data.declared_enums.column_type_is_enum"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import renderers",
                    "alembic.autogenerate.renderers"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import render",
                    "alembic.autogenerate.render"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations import ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from sqlalchemy import String",
                    "sqlalchemy.String"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py/PostgresUsingAlterColumnOp"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 8,
            "gen_code": "def add_postgres_using_to_alter_operation(op: AlterColumnOp):\n    log = logging.getLogger(f\"alembic.{__name__}\")\n    if column_type_is_enum(op.modify_type):\n        op.existing_type = op.modify_type\n        log.info(f\"Added USING for postgres ENUM alteration for column {op.name}.\")",
            "gen_import": [
                "import logging",
                "from alembic.operations.ops import AlterColumnOp",
                "from alembic_postgresql_enum.get_enum_data.declared_enums import column_type_is_enum"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/add_postgres_using_to_text.py",
            "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
            "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_text",
            "class": null,
            "signature": "def add_postgres_using_to_text(upgrade_ops: UpgradeOps):",
            "comment": "Add postgresql_using to alter_column expressions that changes type from string to enum",
            "comment_free_code": "def add_postgres_using_to_text(upgrade_ops: UpgradeOps):\n    \n    for group_op in upgrade_ops.ops:\n        if isinstance(group_op, ModifyTableOps):\n            for (i, op) in enumerate(group_op.ops):\n                if isinstance(op, AlterColumnOp):\n                    if isinstance(op.existing_type, String) and column_type_is_enum(op.modify_type):\n                        add_postgres_using_to_alter_operation(op)",
            "start_lineno": 48,
            "end_lineno": 55,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                10
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic_postgresql_enum.get_enum_data.declared_enums import column_type_is_enum",
                    "alembic_postgresql_enum.get_enum_data.declared_enums.column_type_is_enum"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import renderers",
                    "alembic.autogenerate.renderers"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate import render",
                    "alembic.autogenerate.render"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations import ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py",
                    "from sqlalchemy import String",
                    "sqlalchemy.String"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_alter_operation"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 9,
            "gen_code": "def add_postgres_using_to_text(upgrade_ops: UpgradeOps):\n    log = logging.getLogger(f\"alembic.{__name__}\")\n    for op in upgrade_ops.ops:\n        if isinstance(op, AlterColumnOp):\n            add_postgres_using_to_alter_operation(op)\n    log.info(\"Processed all AlterColumnOps for possible ENUM alterations using USING clause.\")",
            "gen_import": [
                "import logging",
                "from alembic.operations.ops import UpgradeOps",
                "from alembic_postgresql_enum.add_postgres_using_to_text import add_postgres_using_to_alter_operation"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/enum_type.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_array_enum_type_to_new",
            "class": null,
            "signature": "def cast_old_array_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):",
            "comment": null,
            "comment_free_code": "def cast_old_array_enum_type_to_new(connection: 'Connection', table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    cast_clause = f'{table_reference.column_name}::text[]'\n    for (old_value, new_value) in enum_values_to_rename:\n        cast_clause = f\"array_replace({cast_clause}, '{old_value}', '{new_value}')\"\n    connection.execute(sqlalchemy.text(f'ALTER TABLE {table_reference.table_name_with_schema} \\n            ALTER COLUMN {table_reference.column_name} TYPE {enum_type_name}[]\\n            USING {cast_clause}::{enum_type_name}[]\\n            '))",
            "start_lineno": 11,
            "end_lineno": 29,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 10,
            "gen_code": "def cast_old_array_enum_type_to_new(connection: Connection, table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    for old_value, new_value in enum_values_to_rename:\n        query = f\"UPDATE {table_reference.table_name_with_schema()} SET {table_reference.column_name} = array_replace({table_reference.column_name}, '{old_value}', '{new_value}') WHERE '{old_value}' = ANY({table_reference.column_name});\"\n        connection.execute(query)",
            "gen_import": [
                "from typing import List, Tuple",
                "from sqlalchemy.engine import Connection",
                "from alembic_postgresql_enum.get_enum_data import TableReference"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/enum_type.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_enum_type_to_new",
            "class": null,
            "signature": "def cast_old_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):",
            "comment": null,
            "comment_free_code": "def cast_old_enum_type_to_new(connection: 'Connection', table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    if table_reference.column_type == ColumnType.ARRAY:\n        cast_old_array_enum_type_to_new(connection, table_reference, enum_type_name, enum_values_to_rename)\n        return\n    if enum_values_to_rename:\n        connection.execute(sqlalchemy.text(f))\n    else:\n        connection.execute(sqlalchemy.text(f'ALTER TABLE {table_reference.table_name_with_schema} \\n                ALTER COLUMN {table_reference.column_name} TYPE {enum_type_name} \\n                USING {table_reference.column_name}::text::{enum_type_name}\\n                '))",
            "start_lineno": 32,
            "end_lineno": 65,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                12
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_array_enum_type_to_new"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 11,
            "gen_code": "def cast_old_enum_type_to_new(connection: Connection, table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    for old_value, new_value in enum_values_to_rename:\n        query = f\"UPDATE {table_reference.table_name_with_schema()} SET {table_reference.column_name} = '{new_value}' WHERE {table_reference.column_name} = '{old_value}';\"\n        connection.execute(query)",
            "gen_import": [
                "from typing import List, Tuple",
                "from sqlalchemy.engine import Connection",
                "from alembic_postgresql_enum.get_enum_data import TableReference"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/enum_type.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/drop_type",
            "class": null,
            "signature": "def drop_type(connection: \"Connection\", schema: str, type_name: str):",
            "comment": null,
            "comment_free_code": "def drop_type(connection: 'Connection', schema: str, type_name: str):\n    connection.execute(sqlalchemy.text(f'DROP TYPE {schema}.{type_name}'))",
            "start_lineno": 68,
            "end_lineno": 69,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 12,
            "gen_code": "def drop_type(connection: Connection, schema: str, type_name: str):\n    query = f'DROP TYPE IF EXISTS {schema}.{type_name};'\n    connection.execute(query)",
            "gen_import": [
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/enum_type.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/rename_type",
            "class": null,
            "signature": "def rename_type(connection: \"Connection\", schema: str, type_name: str, new_type_name: str):",
            "comment": null,
            "comment_free_code": "def rename_type(connection: 'Connection', schema: str, type_name: str, new_type_name: str):\n    connection.execute(sqlalchemy.text(f'ALTER TYPE {schema}.{type_name} RENAME TO {new_type_name}'))",
            "start_lineno": 72,
            "end_lineno": 73,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 13,
            "gen_code": "def rename_type(connection: Connection, schema: str, type_name: str, new_type_name: str):\n    query = f'ALTER TYPE {schema}.{type_name} RENAME TO {new_type_name};'\n    connection.execute(query)",
            "gen_import": [
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/enum_type.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/create_type",
            "class": null,
            "signature": "def create_type(connection: \"Connection\", schema: str, type_name: str, enum_values: List[str]):",
            "comment": null,
            "comment_free_code": "def create_type(connection: 'Connection', schema: str, type_name: str, enum_values: List[str]):\n    connection.execute(sqlalchemy.text(f))",
            "start_lineno": 76,
            "end_lineno": 81,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 14,
            "gen_code": "def create_type(connection: Connection, schema: str, type_name: str, enum_values: List[str]):\n    values_str = ', '.join([f'\\'{value}\\'' for value in enum_values])\n    query = f'CREATE TYPE {schema}.{type_name} AS ENUM ({values_str});'\n    connection.execute(query)",
            "gen_import": [
                "from typing import List",
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/enum_type.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/get_all_enums",
            "class": null,
            "signature": "def get_all_enums(connection: \"Connection\", schema: str):",
            "comment": null,
            "comment_free_code": "def get_all_enums(connection: 'Connection', schema: str):\n    sql = \"\\n        SELECT\\n            pg_catalog.format_type(t.oid, NULL),\\n            ARRAY(SELECT enumlabel\\n                  FROM pg_catalog.pg_enum\\n                  WHERE enumtypid = t.oid\\n                  ORDER BY enumsortorder)\\n        FROM pg_catalog.pg_type t\\n        LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\\n        WHERE\\n            t.typtype = 'e'\\n            AND n.nspname = :schema\\n    \"\n    return connection.execute(sqlalchemy.text(sql), dict(schema=schema))",
            "start_lineno": 84,
            "end_lineno": 98,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/enum_type.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 15,
            "gen_code": "def get_all_enums(connection: Connection, schema: str) -> List[Tuple[str, List[str]]]:\n    query = '''\n    SELECT t.typname AS enumtype, e.enumlabel AS enumlabel\n    FROM pg_type t\n    JOIN pg_enum e ON t.oid = e.enumtypid\n    JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\n    WHERE n.nspname = :schema\n    ORDER BY t.typname, e.enumsortorder;\n    '''\n    result = connection.execute(sqlalchemy.text(query), schema=schema).fetchall()\n    enums = {}\n    for enumtype, enumlabel in result:\n        if enumtype not in enums:\n            enums[enumtype] = []\n        enums[enumtype].append(enumlabel)\n    return [(enum, labels) for enum, labels in enums.items()]",
            "gen_import": [
                "from typing import List, Tuple",
                "import sqlalchemy",
                "from sqlalchemy.engine import Connection",
                "from alembic_postgresql_enum.get_enum_data import TableReference, ColumnType"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/column_default.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/get_column_default",
            "class": null,
            "signature": "def get_column_default(connection: \"Connection\", table_schema: str, table_name: str, column_name: str) -> Union[str, None]:",
            "comment": "Result example: \"'active'::order_status\" ",
            "comment_free_code": "def get_column_default(connection: 'Connection', table_schema: str, table_name: str, column_name: str) -> Union[str, None]:\n    \n    default_value = connection.execute(sqlalchemy.text(f\"\\n        SELECT column_default\\n        FROM information_schema.columns\\n        WHERE \\n            table_schema = '{table_schema}' AND \\n            table_name = '{table_name}' AND \\n            column_name = '{column_name}'\\n    \")).scalar()\n    return default_value",
            "start_lineno": 10,
            "end_lineno": 26,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import re",
                    "re"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 16,
            "gen_code": "def get_column_default(connection: Connection, table_schema: str, table_name: str, column_name: str) -> Union[str, None]:\n    query = '''\n    SELECT column_default\n    FROM information_schema.columns\n    WHERE table_schema = :schema AND table_name = :table AND column_name = :column;\n    '''\n    result = connection.execute(sqlalchemy.text(query), schema=table_schema, table=table_name, column=column_name).fetchone()\n    if result:\n        return result[0]\n    return None",
            "gen_import": [
                "import re",
                "from typing import Union",
                "import sqlalchemy",
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/column_default.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/drop_default",
            "class": null,
            "signature": "def drop_default(connection: \"Connection\", table_name_with_schema: str, column_name: str):",
            "comment": null,
            "comment_free_code": "def drop_default(connection: 'Connection', table_name_with_schema: str, column_name: str):\n    connection.execute(sqlalchemy.text(f'ALTER TABLE {table_name_with_schema}\\n             ALTER COLUMN {column_name} DROP DEFAULT'))",
            "start_lineno": 29,
            "end_lineno": 35,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import re",
                    "re"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 17,
            "gen_code": "def drop_default(connection: Connection, table_name_with_schema: str, column_name: str):\n    query = f'''ALTER TABLE {table_name_with_schema} ALTER COLUMN {column_name} DROP DEFAULT;'''\n    connection.execute(sqlalchemy.text(query))",
            "gen_import": [
                "import sqlalchemy",
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/column_default.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/set_default",
            "class": null,
            "signature": "def set_default(connection: \"Connection\", table_name_with_schema: str, column_name: str, default_value: str):",
            "comment": null,
            "comment_free_code": "def set_default(connection: 'Connection', table_name_with_schema: str, column_name: str, default_value: str):\n    connection.execute(sqlalchemy.text(f'ALTER TABLE {table_name_with_schema}\\n            ALTER COLUMN {column_name} SET DEFAULT {default_value}'))",
            "start_lineno": 38,
            "end_lineno": 49,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import re",
                    "re"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 18,
            "gen_code": "def set_default(connection: Connection, table_name_with_schema: str, column_name: str, default_value: str):\n    query = f'''ALTER TABLE {table_name_with_schema} ALTER COLUMN {column_name} SET DEFAULT {default_value};'''\n    connection.execute(sqlalchemy.text(query))",
            "gen_import": [
                "import sqlalchemy",
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/column_default.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/rename_default_if_required",
            "class": null,
            "signature": "def rename_default_if_required(schema: str, default_value: str, enum_name: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:",
            "comment": null,
            "comment_free_code": "def rename_default_if_required(schema: str, default_value: str, enum_name: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    if schema:\n        new_enum = f'{schema}.{enum_name}'\n    else:\n        new_enum = enum_name\n    if default_value.startswith('ARRAY['):\n        column_default_value = _replace_strings_in_quotes(default_value, enum_values_to_rename)\n        column_default_value = re.sub('::[.\\\\w]+', f'::{new_enum}', column_default_value)\n        return column_default_value\n    if default_value.endswith('[]'):\n        column_default_value = default_value[:default_value.find('::')]\n        column_default_value = _replace_strings_in_quotes(column_default_value, enum_values_to_rename)\n        return f'{column_default_value}::{new_enum}[]'\n    column_default_value = default_value[:default_value.find('::')]\n    column_default_value = _replace_strings_in_quotes(column_default_value, enum_values_to_rename)\n    return f'{column_default_value}::{new_enum}'",
            "start_lineno": 52,
            "end_lineno": 82,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import re",
                    "re"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 19,
            "gen_code": "def rename_default_if_required(schema: str, default_value: str, enum_name: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    for old_value, new_value in enum_values_to_rename:\n        if old_value in default_value:\n            default_value = re.sub(r'\\b' + re.escape(old_value) + r'\\b', new_value, default_value)\n    return default_value",
            "gen_import": [
                "import re",
                "from typing import List, Tuple",
                "import sqlalchemy",
                "from sqlalchemy.engine import Connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/column_default.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/_replace_strings_in_quotes",
            "class": null,
            "signature": "def _replace_strings_in_quotes(old_default: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:",
            "comment": null,
            "comment_free_code": "def _replace_strings_in_quotes(old_default: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    for (old_value, new_value) in enum_values_to_rename:\n        old_default = old_default.replace(f\"'{old_value}'\", f\"'{new_value}'\")\n        old_default = old_default.replace(f'\"{old_value}\"', f'\"{new_value}\"')\n    return old_default",
            "start_lineno": 85,
            "end_lineno": 92,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import re",
                    "re"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/column_default.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 20,
            "gen_code": "def _replace_strings_in_quotes(old_default: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    for old_value, new_value in enum_values_to_rename:\n        pattern = re.compile(re.escape(old_value))\n        old_default = pattern.sub(new_value, old_default)\n    return old_default",
            "gen_import": [
                "import re",
                "from typing import List, Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_create_comparison_operator",
            "class": null,
            "signature": "def _create_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]], operator: str, comparison_function_name: str):",
            "comment": null,
            "comment_free_code": "def _create_comparison_operator(connection: 'Connection', schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]], operator: str, comparison_function_name: str):\n    if enum_values_to_rename:\n        connection.execute(sqlalchemy.text(f))\n    else:\n        connection.execute(sqlalchemy.text(f'\\n            CREATE FUNCTION {comparison_function_name}(\\n                new_enum_val {schema}.{enum_name}, old_enum_val {schema}.{old_enum_name}\\n            )\\n            RETURNS boolean AS $$\\n                SELECT new_enum_val::text {operator} old_enum_val::text;\\n            $$ LANGUAGE SQL IMMUTABLE\\n        '))\n    connection.execute(sqlalchemy.text(f'\\n        CREATE OPERATOR {operator} (\\n            leftarg = {schema}.{enum_name},\\n            rightarg = {schema}.{old_enum_name},\\n            procedure = {comparison_function_name}\\n        )\\n    '))",
            "start_lineno": 12,
            "end_lineno": 63,
            "local_variables": {
                "module": [
                    "OPERATORS_TO_CREATE = ((\"!=\", \"new_old_not_equals\"), (\"=\", \"new_old_equals\"))"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 21,
            "gen_code": "def _create_comparison_operator(connection: Connection, schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]], operator: str, comparison_function_name: str):\n    # Assuming the function to create a comparison operator is already defined elsewhere\n    # This function would use the connection to execute the SQL command\n    pass",
            "gen_import": [
                "from sqlalchemy.engine import Connection",
                "from typing import List, Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/create_comparison_operators",
            "class": null,
            "signature": "def create_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]]):",
            "comment": null,
            "comment_free_code": "def create_comparison_operators(connection: 'Connection', schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    for (operator, comparison_function_name) in OPERATORS_TO_CREATE:\n        _create_comparison_operator(connection, schema, enum_name, old_enum_name, enum_values_to_rename, operator, comparison_function_name)",
            "start_lineno": 66,
            "end_lineno": 82,
            "local_variables": {
                "module": [
                    "OPERATORS_TO_CREATE = ((\"!=\", \"new_old_not_equals\"), (\"=\", \"new_old_equals\"))"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                23
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py/_create_comparison_operator"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 22,
            "gen_code": "def create_comparison_operators(connection: Connection, schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    for operator, function_name in OPERATORS_TO_CREATE:\n        _create_comparison_operator(connection, schema, enum_name, old_enum_name, enum_values_to_rename, operator, function_name)",
            "gen_import": [
                "from sqlalchemy.engine import Connection",
                "from typing import List, Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_drop_comparison_operator",
            "class": null,
            "signature": "def _drop_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, comparison_function_name: str):",
            "comment": null,
            "comment_free_code": "def _drop_comparison_operator(connection: 'Connection', schema: str, enum_name: str, old_enum_name: str, comparison_function_name: str):\n    connection.execute(sqlalchemy.text(f'\\n        DROP FUNCTION {comparison_function_name}(\\n            new_enum_val {schema}.{enum_name}, old_enum_val {schema}.{old_enum_name}\\n        ) CASCADE\\n    '))",
            "start_lineno": 85,
            "end_lineno": 100,
            "local_variables": {
                "module": [
                    "OPERATORS_TO_CREATE = ((\"!=\", \"new_old_not_equals\"), (\"=\", \"new_old_equals\"))"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 23,
            "gen_code": "def _drop_comparison_operator(connection: Connection, schema: str, enum_name: str, old_enum_name: str, comparison_function_name: str):\n    # Assuming the function to drop a comparison operator is already defined elsewhere\n    # This function would use the connection to execute the SQL command to drop the operator\n    pass",
            "gen_import": [
                "from sqlalchemy.engine import Connection",
                "from typing import List, Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
            "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/drop_comparison_operators",
            "class": null,
            "signature": "def drop_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str):",
            "comment": null,
            "comment_free_code": "def drop_comparison_operators(connection: 'Connection', schema: str, enum_name: str, old_enum_name: str):\n    for (_, comparison_function_name) in OPERATORS_TO_CREATE:\n        _drop_comparison_operator(connection, schema, enum_name, old_enum_name, comparison_function_name)",
            "start_lineno": 103,
            "end_lineno": 110,
            "local_variables": {
                "module": [
                    "OPERATORS_TO_CREATE = ((\"!=\", \"new_old_not_equals\"), (\"=\", \"new_old_equals\"))"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                25
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py/_drop_comparison_operator"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 24,
            "gen_code": "def drop_comparison_operators(connection: Connection, schema: str, enum_name: str, old_enum_name: str):\n    for operator, function_name in OPERATORS_TO_CREATE:\n        _drop_comparison_operator(connection, schema, enum_name, old_enum_name, function_name)",
            "gen_import": [
                "from sqlalchemy.engine import Connection",
                "from typing import List, Tuple"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/types.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/ColumnType/__repr__",
            "class": "alembic_postgresql_enum/get_enum_data/types.py.ColumnType",
            "signature": "def __repr__(self):",
            "comment": null,
            "comment_free_code": "def __repr__(self):\n    return f'{self.__class__.__name__}.{self.name}'",
            "start_lineno": 12,
            "end_lineno": 13,
            "local_variables": {
                "ColumnType": [
                    "COMMON = Enum",
                    "ARRAY = ARRAY"
                ],
                "module": [
                    "Unspecified = object()",
                    "EnumNamesToValues = Dict[str, Tuple[str, ...]]",
                    "EnumNamesToTableReferences = Dict[str, FrozenSet[TableReference]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from enum import Enum as PyEnum",
                    "enum.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import FrozenSet",
                    "typing.FrozenSet"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import Enum",
                    "sqlalchemy.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import ARRAY",
                    "sqlalchemy.ARRAY"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 25,
            "gen_code": "@dataclass\nclass ColumnType(PyEnum):\n    COMMON = 'Enum'\n    ARRAY = 'ARRAY'\n\n    def __repr__(self) -> str:\n        return f'<ColumnType.{self.name}: {self.value}>'",
            "gen_import": [
                "from dataclasses import dataclass",
                "from enum import Enum as PyEnum"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/types.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/__repr__",
            "class": "alembic_postgresql_enum/get_enum_data/types.py.TableReference",
            "signature": "def __repr__(self):",
            "comment": null,
            "comment_free_code": "def __repr__(self):\n    result_str = 'TableReference('\n    if self.table_schema:\n        result_str += f'table_schema={self.table_schema!r}, '\n    result_str += f'table_name={self.table_name!r}, '\n    result_str += f'column_name={self.column_name!r}, '\n    if self.column_type != ColumnType.COMMON:\n        result_str += f'column_type=ColumnType.{self.column_type.name}, '\n    if self.existing_server_default is not None:\n        result_str += f'existing_server_default={self.existing_server_default!r}, '\n    result_str = result_str[:-2]\n    result_str += ')'\n    return result_str",
            "start_lineno": 27,
            "end_lineno": 39,
            "local_variables": {
                "ColumnType": [
                    "COMMON = Enum",
                    "ARRAY = ARRAY"
                ],
                "module": [
                    "Unspecified = object()",
                    "EnumNamesToValues = Dict[str, Tuple[str, ...]]",
                    "EnumNamesToTableReferences = Dict[str, FrozenSet[TableReference]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                27
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from enum import Enum as PyEnum",
                    "enum.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import FrozenSet",
                    "typing.FrozenSet"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import Enum",
                    "sqlalchemy.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import ARRAY",
                    "sqlalchemy.ARRAY"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/ColumnType"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 26,
            "gen_code": "@dataclass\nclass TableReference:\n    schema: Optional[str]\n    table_name: str\n    column_name: str\n\n    def __repr__(self) -> str:\n        schema_display = f'{self.schema}.' if self.schema else ''\n        return f'<TableReference: {schema_display}{self.table_name}.{self.column_name}>'",
            "gen_import": [
                "from dataclasses import dataclass",
                "from typing import Optional"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/types.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/is_column_type_import_needed",
            "class": "alembic_postgresql_enum/get_enum_data/types.py.TableReference",
            "signature": "def is_column_type_import_needed(self):",
            "comment": null,
            "comment_free_code": "@property\ndef is_column_type_import_needed(self):\n    return self.column_type != ColumnType.COMMON",
            "start_lineno": 42,
            "end_lineno": 43,
            "local_variables": {
                "ColumnType": [
                    "COMMON = Enum",
                    "ARRAY = ARRAY"
                ],
                "module": [
                    "Unspecified = object()",
                    "EnumNamesToValues = Dict[str, Tuple[str, ...]]",
                    "EnumNamesToTableReferences = Dict[str, FrozenSet[TableReference]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                27
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from enum import Enum as PyEnum",
                    "enum.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import FrozenSet",
                    "typing.FrozenSet"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import Enum",
                    "sqlalchemy.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import ARRAY",
                    "sqlalchemy.ARRAY"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/ColumnType"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 27,
            "gen_code": "def is_column_type_import_needed(self) -> bool:\n        return self.column_type in [Enum, ARRAY]",
            "gen_import": [
                "from sqlalchemy import Enum, ARRAY"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/types.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/table_name_with_schema",
            "class": "alembic_postgresql_enum/get_enum_data/types.py.TableReference",
            "signature": "def table_name_with_schema(self):",
            "comment": null,
            "comment_free_code": "@property\ndef table_name_with_schema(self):\n    if self.table_schema:\n        prefix = f'{self.table_schema}.'\n    else:\n        prefix = ''\n    return f'{prefix}\"{self.table_name}\"'",
            "start_lineno": 46,
            "end_lineno": 51,
            "local_variables": {
                "ColumnType": [
                    "COMMON = Enum",
                    "ARRAY = ARRAY"
                ],
                "module": [
                    "Unspecified = object()",
                    "EnumNamesToValues = Dict[str, Tuple[str, ...]]",
                    "EnumNamesToTableReferences = Dict[str, FrozenSet[TableReference]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from dataclasses import dataclass",
                    "dataclasses.dataclass"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from enum import Enum as PyEnum",
                    "enum.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import FrozenSet",
                    "typing.FrozenSet"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import Enum",
                    "sqlalchemy.Enum"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/types.py",
                    "from sqlalchemy import ARRAY",
                    "sqlalchemy.ARRAY"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 28,
            "gen_code": "def table_name_with_schema(self) -> str:\n        return f'{self.schema}.{self.table_name}' if self.schema else self.table_name",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/defined_enums.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/defined_enums.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/defined_enums.py/_remove_schema_prefix",
            "class": null,
            "signature": "def _remove_schema_prefix(enum_name: str, schema: str) -> str:",
            "comment": null,
            "comment_free_code": "def _remove_schema_prefix(enum_name: str, schema: str) -> str:\n    schema_prefix = f'{schema}.'\n    if enum_name.startswith(schema_prefix):\n        enum_name = enum_name[len(schema_prefix):]\n    return enum_name",
            "start_lineno": 10,
            "end_lineno": 16,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import get_all_enums",
                    "alembic_postgresql_enum.sql_commands.enum_type.get_all_enums"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from alembic_postgresql_enum.get_enum_data.types import EnumNamesToValues",
                    "alembic_postgresql_enum.get_enum_data.types.EnumNamesToValues"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 29,
            "gen_code": "def _remove_schema_prefix(enum_name: str, schema: str) -> str:\n        return enum_name[len(schema)+1:] if enum_name.startswith(f'{schema}.') else enum_name",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/defined_enums.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/defined_enums.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/defined_enums.py/get_defined_enums",
            "class": null,
            "signature": "def get_defined_enums(connection: \"Connection\", schema: str) -> EnumNamesToValues:",
            "comment": "Return a dict mapping PostgreSQL defined enumeration types to the set of their\ndefined values.\n:param conn:\n    SQLAlchemy connection instance.\n:param str schema:\n    Schema name (e.g. \"public\").\n:returns DeclaredEnumValues:\n    enum_definitions={\n        \"my_enum\": tuple([\"a\", \"b\", \"c\"]),\n    }",
            "comment_free_code": "def get_defined_enums(connection: 'Connection', schema: str) -> EnumNamesToValues:\n    \n    return {_remove_schema_prefix(name, schema): tuple(values) for (name, values) in get_all_enums(connection, schema)}",
            "start_lineno": 19,
            "end_lineno": 32,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                17,
                34
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import get_all_enums",
                    "alembic_postgresql_enum.sql_commands.enum_type.get_all_enums"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from alembic_postgresql_enum.get_enum_data.types import EnumNamesToValues",
                    "alembic_postgresql_enum.get_enum_data.types.EnumNamesToValues"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/get_enum_data/defined_enums.py/_remove_schema_prefix"
                ],
                "Cross-file Dependency": [
                    "alembic_postgresql_enum/sql_commands/enum_type.py/get_all_enums"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 30,
            "gen_code": "def get_defined_enums(connection: \"Connection\", schema: str) -> EnumNamesToValues:\n    return get_all_enums(connection, schema)",
            "gen_import": [
                "from typing import TYPE_CHECKING",
                "from alembic_postgresql_enum.get_enum_data.types import EnumNamesToValues",
                "from sqlalchemy.engine import Connection",
                "from alembic_postgresql_enum.sql_commands.enum_type import get_all_enums"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/declared_enums.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/declared_enums.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_enum_values",
            "class": null,
            "signature": "def get_enum_values(enum_type: sqlalchemy.Enum) -> \"Tuple[str, ...]\":",
            "comment": null,
            "comment_free_code": "def get_enum_values(enum_type: sqlalchemy.Enum) -> 'Tuple[str, ...]':\n    if isinstance(enum_type, sqlalchemy.types.TypeDecorator):\n        dialect = postgresql.dialect\n\n        def value_processor(value):\n            return enum_type.process_bind_param(enum_type.impl.result_processor(dialect, enum_type)(value), dialect)\n    else:\n\n        def value_processor(enum_value):\n            return enum_value\n    return tuple((value_processor(value) for value in enum_type.enums))",
            "start_lineno": 22,
            "end_lineno": 35,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import get_just_added_defaults",
                    "alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops.get_just_added_defaults"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from collections import defaultdict",
                    "collections.defaultdict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Set",
                    "typing.Set"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import cast",
                    "typing.cast"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy import MetaData",
                    "sqlalchemy.MetaData"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import DeclaredEnumValues",
                    "alembic_postgresql_enum.get_enum_data.DeclaredEnumValues"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 31,
            "gen_code": "def get_enum_values(enum_type: sqlalchemy.Enum) -> \"Tuple[str, ...]\":\n    if isinstance(enum_type, ENUM):\n        return enum_type.enums\n    raise TypeError('Expected an Enum type')",
            "gen_import": [
                "from typing import Tuple",
                "import sqlalchemy",
                "from sqlalchemy.dialects.postgresql import ENUM"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/declared_enums.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/declared_enums.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/declared_enums.py/column_type_is_enum",
            "class": null,
            "signature": "def column_type_is_enum(column_type: Any) -> bool:",
            "comment": null,
            "comment_free_code": "def column_type_is_enum(column_type: Any) -> bool:\n    if isinstance(column_type, sqlalchemy.Enum):\n        return column_type.native_enum\n    if isinstance(getattr(column_type, 'impl', None), sqlalchemy.Enum):\n        return True\n    return False",
            "start_lineno": 38,
            "end_lineno": 46,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import get_just_added_defaults",
                    "alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops.get_just_added_defaults"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from collections import defaultdict",
                    "collections.defaultdict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Set",
                    "typing.Set"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import cast",
                    "typing.cast"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy import MetaData",
                    "sqlalchemy.MetaData"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import DeclaredEnumValues",
                    "alembic_postgresql_enum.get_enum_data.DeclaredEnumValues"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 32,
            "gen_code": "def column_type_is_enum(column_type: Any) -> bool:\n    return isinstance(column_type, sqlalchemy.Enum) or isinstance(column_type, ENUM)",
            "gen_import": [
                "from typing import Any",
                "import sqlalchemy",
                "from sqlalchemy.dialects.postgresql import ENUM"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/declared_enums.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/declared_enums.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_declared_enums",
            "class": null,
            "signature": "def get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection: \"Connection\", upgrade_ops: Optional[UpgradeOps] = None) -> DeclaredEnumValues:",
            "comment": "Return a dict mapping SQLAlchemy declared enumeration types to the set of their values\nwith columns where enums are used.\n:param metadata:\n    SqlAlchemy schema\n:param str schema:\n    Schema name (e.g. \"public\").\n:param default_schema:\n    Default schema name, likely will be \"public\"\n:param connection:\n    Database connection\n:param upgrade_ops:\n    Upgrade operations in current migration\n:returns DeclaredEnumValues:\n    enum_values: {\n        \"my_enum\": tuple([\"a\", \"b\", \"c\"]),\n    },\n    enum_table_references: {\n        \"my_enum\": {\n            EnumToTable(table_name=\"my_table\", column_name=\"my_column\")\n        }\n    }",
            "comment_free_code": "def get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection: 'Connection', upgrade_ops: Optional[UpgradeOps]=None) -> DeclaredEnumValues:\n    \n    enum_name_to_values = dict()\n    enum_name_to_table_references: defaultdict[str, Set[TableReference]] = defaultdict(set)\n    just_added_defaults = get_just_added_defaults(upgrade_ops, default_schema)\n    if isinstance(metadata, list):\n        metadata_list = metadata\n    else:\n        metadata_list = [metadata]\n    for metadata in metadata_list:\n        for table in metadata.tables.values():\n            for column in table.columns:\n                column_type = column.type\n                column_type_wrapper = ColumnType.COMMON\n                if isinstance(column_type, sqlalchemy.ARRAY):\n                    column_type = column_type.item_type\n                    column_type_wrapper = ColumnType.ARRAY\n                if not column_type_is_enum(column_type):\n                    continue\n                column_type_schema = column_type.schema or default_schema\n                if column_type_schema != schema:\n                    continue\n                if column_type.name not in enum_name_to_values:\n                    enum_name_to_values[column_type.name] = get_enum_values(cast(sqlalchemy.Enum, column_type))\n                table_schema = table.schema or default_schema\n                column_default = get_column_default(connection, table_schema, table.name, column.name)\n                if (table_schema, table.name, column.name) in just_added_defaults:\n                    column_default = just_added_defaults[table_schema, table.name, column.name]\n                enum_name_to_table_references[column_type.name].add(TableReference(table_schema=table_schema, table_name=table.name, column_name=column.name, column_type=column_type_wrapper, existing_server_default=column_default))\n    return DeclaredEnumValues(enum_values=enum_name_to_values, enum_table_references={enum_name: frozenset(table_references) for (enum_name, table_references) in enum_name_to_table_references.items()})",
            "start_lineno": 49,
            "end_lineno": 130,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                33,
                36,
                39,
                18,
                27,
                29
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import get_just_added_defaults",
                    "alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops.get_just_added_defaults"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from collections import defaultdict",
                    "collections.defaultdict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Set",
                    "typing.Set"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import cast",
                    "typing.cast"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "import sqlalchemy",
                    "sqlalchemy"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy import MetaData",
                    "sqlalchemy.MetaData"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy.dialects import postgresql",
                    "sqlalchemy.dialects.postgresql"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import DeclaredEnumValues",
                    "alembic_postgresql_enum.get_enum_data.DeclaredEnumValues"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_enum_values",
                    "alembic_postgresql_enum/get_enum_data/declared_enums.py/column_type_is_enum"
                ],
                "Cross-file Dependency": [
                    "alembic_postgresql_enum/sql_commands/column_default.py/get_column_default"
                ],
                "Class Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/DeclaredEnumValues",
                    "alembic_postgresql_enum/get_enum_data/types.py/ColumnType",
                    "alembic_postgresql_enum/get_enum_data/types.py/TableReference"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 33,
            "gen_code": "def get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection: \"Connection\", upgrade_ops: Optional[UpgradeOps] = None) -> DeclaredEnumValues:\n    declared_enums = {}\n    for meta in metadata if isinstance(metadata, list) else [metadata]:\n        for table in meta.tables.values():\n            if table.schema == schema or schema is None:\n                for column in table.c:\n                    if column_type_is_enum(column.type):\n                        enum_values = get_enum_values(column.type)\n                        declared_enums[(table.schema, table.name, column.name)] = enum_values\n    return declared_enums",
            "gen_import": [
                "from typing import Union, List, Optional",
                "from sqlalchemy import MetaData",
                "from sqlalchemy.engine import Connection",
                "from alembic.operations.ops import UpgradeOps",
                "from alembic_postgresql_enum.get_enum_data.types import DeclaredEnumValues",
                "from alembic_postgresql_enum.get_enum_data.declared_enums import get_enum_values, column_type_is_enum"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_add_column_op",
            "class": null,
            "signature": "def _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:",
            "comment": null,
            "comment_free_code": "def _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    if op.column.server_default is None:\n        raise AttributeError('No new server_default')\n    return ((op.schema or default_schema, op.table_name, op.column.name), op.column.server_default.arg.text)",
            "start_lineno": 12,
            "end_lineno": 18,
            "local_variables": {
                "module": [
                    "SchemaName = str",
                    "TableName = str",
                    "ColumnName = str",
                    "ColumnLocation = Tuple[SchemaName, TableName, ColumnName]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 34,
            "gen_code": "def _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    column = op.column\n    return _get_default_from_column(column, default_schema)",
            "gen_import": [
                "from typing import Optional, Tuple",
                "from alembic.operations.ops import AddColumnOp",
                "from alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import _get_default_from_column"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_alter_column_op",
            "class": null,
            "signature": "def _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:",
            "comment": null,
            "comment_free_code": "def _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    if op.modify_server_default is False:\n        raise AttributeError('No new server_default')\n    return ((op.schema or default_schema, op.table_name, op.column_name), op.modify_server_default)",
            "start_lineno": 21,
            "end_lineno": 24,
            "local_variables": {
                "module": [
                    "SchemaName = str",
                    "TableName = str",
                    "ColumnName = str",
                    "ColumnLocation = Tuple[SchemaName, TableName, ColumnName]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 35,
            "gen_code": "def _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    if op.modify_nullable or op.modify_type or op.modify_server_default:\n        schema = op.schema if op.schema is not None else default_schema\n        return ((schema, op.table_name, op.column_name), op.modify_server_default)\n    return None, None",
            "gen_import": [
                "from typing import Optional, Tuple",
                "from alembic.operations.ops import AlterColumnOp",
                "from sqlalchemy import Column"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_column",
            "class": null,
            "signature": "def _get_default_from_column(column: Column, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:",
            "comment": null,
            "comment_free_code": "def _get_default_from_column(column: Column, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    if column.server_default is None:\n        raise AttributeError('No new server_default')\n    return ((column.table.schema or default_schema, column.table.name, column.name), column.server_default.arg.text)",
            "start_lineno": 27,
            "end_lineno": 33,
            "local_variables": {
                "module": [
                    "SchemaName = str",
                    "TableName = str",
                    "ColumnName = str",
                    "ColumnLocation = Tuple[SchemaName, TableName, ColumnName]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 36,
            "gen_code": "def _get_default_from_column(column: Column, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    if column.default is not None:\n        schema = column.table.schema if column.table is not None and column.table.schema is not None else default_schema\n        return ((schema, column.table.name, column.name), str(column.default.arg))\n    return None, None",
            "gen_import": [
                "from typing import Optional, Tuple",
                "from sqlalchemy import Column"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
            "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/get_just_added_defaults",
            "class": null,
            "signature": "def get_just_added_defaults(upgrade_ops: Optional[UpgradeOps], default_schema: str) -> Dict[ColumnLocation, Optional[str]]:",
            "comment": "Get all server defaults that will be added in current migration",
            "comment_free_code": "def get_just_added_defaults(upgrade_ops: Optional[UpgradeOps], default_schema: str) -> Dict[ColumnLocation, Optional[str]]:\n    \n    if upgrade_ops is None:\n        return {}\n    new_server_defaults = {}\n    for operations_group in upgrade_ops.ops:\n        if isinstance(operations_group, ModifyTableOps):\n            for operation in operations_group.ops:\n                if isinstance(operation, AddColumnOp):\n                    try:\n                        (column_location, column_new_default) = _get_default_from_add_column_op(operation, default_schema)\n                        new_server_defaults[column_location] = column_new_default\n                    except AttributeError:\n                        pass\n                elif isinstance(operation, AlterColumnOp):\n                    try:\n                        (column_location, column_new_default) = _get_default_from_alter_column_op(operation, default_schema)\n                        new_server_defaults[column_location] = column_new_default\n                    except AttributeError:\n                        pass\n        elif isinstance(operations_group, CreateTableOp):\n            for column in operations_group.columns:\n                if isinstance(column, Column):\n                    try:\n                        (column_location, column_new_default) = _get_default_from_column(column, default_schema)\n                        new_server_defaults[column_location] = column_new_default\n                    except AttributeError:\n                        pass\n    return new_server_defaults",
            "start_lineno": 36,
            "end_lineno": 73,
            "local_variables": {
                "module": [
                    "SchemaName = str",
                    "TableName = str",
                    "ColumnName = str",
                    "ColumnLocation = Tuple[SchemaName, TableName, ColumnName]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                41,
                42,
                43
            ],
            "local_import": [],
            "third_import": [
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import ModifyTableOps",
                    "alembic.operations.ops.ModifyTableOps"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AddColumnOp",
                    "alembic.operations.ops.AddColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import AlterColumnOp",
                    "alembic.operations.ops.AlterColumnOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from alembic.operations.ops import CreateTableOp",
                    "alembic.operations.ops.CreateTableOp"
                ],
                [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                    "from sqlalchemy import Column",
                    "sqlalchemy.Column"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_add_column_op",
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_alter_column_op",
                    "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_column"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 37,
            "gen_code": "def get_just_added_defaults(upgrade_ops: Optional[UpgradeOps], default_schema: str) -> Dict[ColumnLocation, Optional[str]]:\n    defaults = {}\n    for op in upgrade_ops.ops:\n        if isinstance(op, AddColumnOp):\n            default_info = _get_default_from_add_column_op(op, default_schema)\n            if default_info[0] is not None:\n                defaults[default_info[0]] = default_info[1]\n        elif isinstance(op, AlterColumnOp):\n            default_info = _get_default_from_alter_column_op(op, default_schema)\n            if default_info[0] is not None:\n                defaults[default_info[0]] = default_info[1]\n    return defaults",
            "gen_import": [
                "from typing import Dict, Optional",
                "from alembic.operations.ops import UpgradeOps",
                "from sqlalchemy import Column"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/detection_of_changes/enum_creation.py",
            "relative_path": "alembic_postgresql_enum/detection_of_changes/enum_creation.py",
            "fqn_list": "alembic_postgresql_enum/detection_of_changes/enum_creation.py/create_new_enums",
            "class": null,
            "signature": "def create_new_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):",
            "comment": "Create enums that are not in Postgres schema",
            "comment_free_code": "def create_new_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    \n    for (name, new_values) in declared_enums.items():\n        if name not in defined_enums:\n            log.info('Detected added enum %r with values %r', name, new_values)\n            upgrade_ops.ops.insert(0, CreateEnumOp(name=name, schema=schema, enum_values=new_values))",
            "start_lineno": 11,
            "end_lineno": 23,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_creation.py",
                    "from alembic_postgresql_enum.operations.create_enum import CreateEnumOp",
                    "alembic_postgresql_enum.operations.create_enum.CreateEnumOp"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_creation.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_creation.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_creation.py",
                    "from alembic_postgresql_enum.get_enum_data import EnumNamesToValues",
                    "alembic_postgresql_enum.get_enum_data.EnumNamesToValues"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 38,
            "gen_code": "def create_new_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    log = logging.getLogger(f\"alembic.{__name__}\")\n    for enum_name, enum_values in declared_enums.items():\n        if enum_name not in defined_enums:\n            log.info(f\"Creating new enum {enum_name} with values {enum_values}\")\n            upgrade_ops.ops.append(CreateEnumOp(schema=schema, name=enum_name, enum_values=enum_values))",
            "gen_import": [
                "import logging",
                "from alembic_postgresql_enum.operations.create_enum import CreateEnumOp",
                "from alembic.operations.ops import UpgradeOps",
                "from alembic_postgresql_enum.get_enum_data import EnumNamesToValues"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
            "relative_path": "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
            "fqn_list": "alembic_postgresql_enum/detection_of_changes/enum_alteration.py/sync_changed_enums",
            "class": null,
            "signature": "def sync_changed_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, table_references: EnumNamesToTableReferences, schema: str, upgrade_ops: UpgradeOps):",
            "comment": null,
            "comment_free_code": "def sync_changed_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, table_references: EnumNamesToTableReferences, schema: str, upgrade_ops: UpgradeOps):\n    for (enum_name, new_values) in declared_enums.items():\n        if enum_name not in defined_enums:\n            continue\n        old_values = defined_enums[enum_name]\n        if new_values == old_values:\n            continue\n        log.info('Detected changed enum values in %r\\nWas: %r\\nBecome: %r', enum_name, list(old_values), list(new_values))\n        affected_columns = table_references[enum_name]\n        op = SyncEnumValuesOp(schema, enum_name, list(old_values), list(new_values), sorted(affected_columns, key=lambda reference: (reference.table_schema, reference.table_name, reference.column_name)))\n        upgrade_ops.ops.append(op)",
            "start_lineno": 20,
            "end_lineno": 55,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
                    "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp",
                    "alembic_postgresql_enum.operations.sync_enum_values.SyncEnumValuesOp"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
                    "from alembic_postgresql_enum.get_enum_data import EnumNamesToValues",
                    "alembic_postgresql_enum.get_enum_data.EnumNamesToValues"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
                    "from alembic_postgresql_enum.get_enum_data import EnumNamesToTableReferences",
                    "alembic_postgresql_enum.get_enum_data.EnumNamesToTableReferences"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 39,
            "gen_code": "def sync_changed_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, table_references: EnumNamesToTableReferences, schema: str, upgrade_ops: UpgradeOps):\n    log = logging.getLogger(f\"alembic.{__name__}\")\n    for enum_name, declared_values in declared_enums.items():\n        if enum_name in defined_enums:\n            defined_values = defined_enums[enum_name]\n            if set(declared_values) != set(defined_values):\n                log.info(f\"Syncing enum {enum_name} values from {defined_values} to {declared_values}\")\n                upgrade_ops.ops.append(SyncEnumValuesOp(schema=schema, name=enum_name, old_values=defined_values, new_values=declared_values, affected_columns=table_references.get(enum_name, [])))",
            "gen_import": [
                "import logging",
                "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp",
                "from alembic.operations.ops import UpgradeOps",
                "from alembic_postgresql_enum.get_enum_data import EnumNamesToValues, EnumNamesToTableReferences"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
            "relative_path": "alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
            "fqn_list": "alembic_postgresql_enum/detection_of_changes/enum_deletion.py/drop_unused_enums",
            "class": null,
            "signature": "def drop_unused_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):",
            "comment": "Drop enums that are in Postgres schema but not declared in SqlAlchemy schema",
            "comment_free_code": "def drop_unused_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    \n    for (name, new_values) in defined_enums.items():\n        if name not in declared_enums:\n            log.info('Detected unused enum %r with values %r', name, new_values)\n            upgrade_ops.ops.append(DropEnumOp(name=name, schema=schema, enum_values=new_values))",
            "start_lineno": 11,
            "end_lineno": 23,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
                    "from alembic_postgresql_enum.operations.drop_enum import DropEnumOp",
                    "alembic_postgresql_enum.operations.drop_enum.DropEnumOp"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
                    "from alembic.operations.ops import UpgradeOps",
                    "alembic.operations.ops.UpgradeOps"
                ],
                [
                    "alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
                    "from alembic_postgresql_enum.get_enum_data import EnumNamesToValues",
                    "alembic_postgresql_enum.get_enum_data.EnumNamesToValues"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 40,
            "gen_code": "def drop_unused_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    log = logging.getLogger(f'alembic.{__name__}')\n    unused_enums = set(defined_enums.keys()) - set(declared_enums.keys())\n    for enum_name in unused_enums:\n        log.info(f'Dropping unused enum: {enum_name} in schema {schema}')\n        drop_enum_op = DropEnumOp(schema=schema, name=enum_name, enum_values=defined_enums[enum_name])\n        upgrade_ops.ops.append(drop_enum_op)",
            "gen_import": [
                "import logging",
                "from alembic.operations.ops import UpgradeOps",
                "from alembic_postgresql_enum.get_enum_data import EnumNamesToValues",
                "from alembic_postgresql_enum.operations.drop_enum import DropEnumOp"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/__init__",
            "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
            "signature": "def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):",
            "comment": null,
            "comment_free_code": "def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n    self.schema = schema\n    self.name = name\n    self.old_values = old_values\n    self.new_values = new_values\n    self.affected_columns = affected_columns",
            "start_lineno": 42,
            "end_lineno": 54,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                29
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/TableReference"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 41,
            "gen_code": "class SyncEnumValuesOp:\n    operation_name = 'change_enum_variants'\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f'alembic.{__name__}')\n        log.info(f'Initializing SyncEnumValuesOp with schema: {schema}, name: {name}, old_values: {old_values}, new_values: {new_values}, affected_columns: {affected_columns}')",
            "gen_import": [
                "from typing import List, Tuple",
                "from alembic_postgresql_enum.get_enum_data import TableReference",
                "from alembic_postgresql_enum.sql_commands.column_default import get_column_default, drop_default, set_default, rename_default_if_required",
                "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators, drop_comparison_operators",
                "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new, drop_type, rename_type, create_type",
                "from alembic_postgresql_enum.connection import get_connection",
                "import logging"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/reverse",
            "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
            "signature": "def reverse(self):",
            "comment": "See MigrateOperation.reverse().",
            "comment_free_code": "def reverse(self):\n    \n    return SyncEnumValuesOp(self.schema, self.name, old_values=self.new_values, new_values=self.old_values, affected_columns=self.affected_columns)",
            "start_lineno": 56,
            "end_lineno": 66,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 42,
            "gen_code": "class SyncEnumValuesOp:\n    operation_name = 'change_enum_variants'\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f'alembic.{__name__}')\n        log.info(f'Initializing SyncEnumValuesOp with schema: {schema}, name: {name}, old_values: {old_values}, new_values: {new_values}, affected_columns: {affected_columns}')\n\n    def reverse(self):\n        log.info(f'Reversing SyncEnumValuesOp for enum {self.name} in schema {self.schema}')\n        drop_type(self.schema, self.name)",
            "gen_import": [
                "import logging",
                "from typing import List",
                "from alembic_postgresql_enum.get_enum_data import TableReference",
                "from alembic_postgresql_enum.sql_commands.enum_type import drop_type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/_set_enum_values",
            "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
            "signature": "def _set_enum_values(cls, connection: \"Connection\", enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[TableReference], enum_values_to_rename: List[Tuple[str, str]]):",
            "comment": null,
            "comment_free_code": "@classmethod\ndef _set_enum_values(cls, connection: 'Connection', enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[TableReference], enum_values_to_rename: List[Tuple[str, str]]):\n    enum_type_name = f'{enum_schema}.{enum_name}'\n    temporary_enum_name = f'{enum_name}_old'\n    rename_type(connection, enum_schema, enum_name, temporary_enum_name)\n    create_type(connection, enum_schema, enum_name, new_values)\n    create_comparison_operators(connection, enum_schema, enum_name, temporary_enum_name, enum_values_to_rename)\n    for table_reference in affected_columns:\n        column_default = table_reference.existing_server_default\n        if column_default is not None:\n            drop_default(connection, table_reference.table_name_with_schema, table_reference.column_name)\n        try:\n            cast_old_enum_type_to_new(connection, table_reference, enum_type_name, enum_values_to_rename)\n        except DataError as error:\n            raise ValueError(f'New enum values can not be set due to some row containing reference to old enum value.\\n                        Please consider using enum_values_to_rename parameter or \"\\n                    f\"updating/deleting these row before calling sync_enum_values.') from error\n        if column_default is not None:\n            column_default = rename_default_if_required(enum_schema, column_default, enum_name, enum_values_to_rename)\n            set_default(connection, table_reference.table_name_with_schema, table_reference.column_name, column_default)\n    drop_comparison_operators(connection, enum_schema, enum_name, temporary_enum_name)\n    drop_type(connection, enum_schema, temporary_enum_name)",
            "start_lineno": 69,
            "end_lineno": 111,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                32,
                13,
                14,
                15,
                16,
                19,
                20,
                21,
                24,
                26,
                29
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/TableReference/table_name_with_schema",
                    "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_enum_type_to_new",
                    "alembic_postgresql_enum/sql_commands/enum_type.py/drop_type",
                    "alembic_postgresql_enum/sql_commands/enum_type.py/rename_type",
                    "alembic_postgresql_enum/sql_commands/enum_type.py/create_type",
                    "alembic_postgresql_enum/sql_commands/column_default.py/drop_default",
                    "alembic_postgresql_enum/sql_commands/column_default.py/set_default",
                    "alembic_postgresql_enum/sql_commands/column_default.py/rename_default_if_required",
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py/create_comparison_operators",
                    "alembic_postgresql_enum/sql_commands/comparison_operators.py/drop_comparison_operators"
                ],
                "Class Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/TableReference"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 43,
            "gen_code": "class SyncEnumValuesOp:\n    operation_name = 'change_enum_variants'\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f'alembic.{__name__}')\n        log.info(f'Initializing SyncEnumValuesOp with schema: {schema}, name: {name}, old_values: {old_values}, new_values: {new_values}, affected_columns: {affected_columns}')\n\n    def _set_enum_values(cls, connection: 'Connection', enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[TableReference], enum_values_to_rename: List[Tuple[str, str]]):\n        log.info(f'Setting new values for enum {enum_name} in schema {enum_schema}')\n        drop_type(enum_schema, enum_name)\n        create_type(connection, enum_schema, enum_name, new_values)",
            "gen_import": [
                "import logging",
                "from typing import List",
                "from alembic_postgresql_enum.get_enum_data import TableReference",
                "from alembic_postgresql_enum.sql_commands.enum_type import create_type, drop_type, rename_type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/sync_enum_values",
            "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
            "signature": "def sync_enum_values(cls, operations, enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[Tuple[str, str]], enum_values_to_rename: Iterable[Tuple[str, str]] = tuple()):",
            "comment": "Replace enum values with `new_values`\n:param operations:\n    ...\n:param str enum_schema:\n    Schema name.\n:param enum_name:\n    Enumeration type name.\n:param list new_values:\n    List of enumeration values that should exist after this migration\n    executes.\n:param list affected_columns:\n    List of columns that references this enum.\n    First value is table_name,\n    second value is column_name\n:param enum_values_to_rename:\n    Iterable of tuples containing old_name and new_name\n    enum_values_to_rename=[\n        ('tree', 'three') # to fix typo\n    ]\n    If there was server default with old_name it will be renamed accordingly",
            "comment_free_code": "@classmethod\ndef sync_enum_values(cls, operations, enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[Tuple[str, str]], enum_values_to_rename: Iterable[Tuple[str, str]]=tuple()):\n    \n    if operations.migration_context.dialect.name != 'postgresql':\n        log.warning(f'This library only supports postgresql, but you are using {operations.migration_context.dialect.name}, skipping')\n        return\n    enum_values_to_rename = list(enum_values_to_rename)\n    with get_connection(operations) as connection:\n        table_references = []\n        for affected_column in affected_columns:\n            if isinstance(affected_column, tuple):\n                table_name = affected_column[0]\n                column_name = affected_column[1]\n                if len(affected_column) > 2:\n                    column_type = affected_column[2]\n                else:\n                    column_type = ColumnType.COMMON\n                column_default = get_column_default(connection, enum_schema, table_name, column_name)\n                table_references.append(TableReference(table_name, column_name, table_schema=enum_schema, column_type=column_type, existing_server_default=column_default))\n            elif isinstance(affected_column, TableReference):\n                if affected_column.table_schema is Unspecified:\n                    affected_column = TableReference(table_name=affected_column.table_name, column_name=affected_column.column_name, table_schema=enum_schema, column_type=affected_column.column_type, existing_server_default=affected_column.existing_server_default)\n                table_references.append(affected_column)\n            else:\n                raise ValueError('Affected columns must contain tuples or TableReferences')\n        cls._set_enum_values(connection, enum_schema, enum_name, new_values, table_references, enum_values_to_rename)",
            "start_lineno": 114,
            "end_lineno": 189,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                0,
                18,
                51,
                27,
                29
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/_set_enum_values"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "alembic_postgresql_enum/connection.py/get_connection",
                    "alembic_postgresql_enum/sql_commands/column_default.py/get_column_default"
                ],
                "Class Dependency": [
                    "alembic_postgresql_enum/get_enum_data/types.py/ColumnType",
                    "alembic_postgresql_enum/get_enum_data/types.py/TableReference"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 44,
            "gen_code": "class SyncEnumValuesOp:\n    operation_name = 'change_enum_variants'\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f'alembic.{__name__}')\n        log.info(f'Initializing SyncEnumValuesOp with schema: {schema}, name: {name}, old_values: {old_values}, new_values: {new_values}, affected_columns: {affected_columns}')\n\n    def sync_enum_values(cls, operations, enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[Tuple[str, str]], enum_values_to_rename: Iterable[Tuple[str, str]] = tuple()):\n        log.info(f'Syncing enum values for {enum_name} in schema {enum_schema}')\n        drop_type(enum_schema, enum_name)\n        create_type(operations.get_bind(), enum_schema, enum_name, new_values)",
            "gen_import": [
                "import logging",
                "from typing import List, Tuple, Iterable",
                "from alembic_postgresql_enum.get_enum_data import TableReference",
                "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new, create_type, drop_type, rename_type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/to_diff_tuple",
            "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
            "signature": "def to_diff_tuple(self) -> Tuple[Any, ...]:",
            "comment": null,
            "comment_free_code": "def to_diff_tuple(self) -> Tuple[Any, ...]:\n    return (self.operation_name, self.old_values, self.new_values, self.affected_columns)",
            "start_lineno": 191,
            "end_lineno": 197,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 45,
            "gen_code": "class SyncEnumValuesOp:\n    operation_name = 'change_enum_variants'\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f'alembic.{__name__}')\n        log.info(f'Initializing SyncEnumValuesOp with schema: {schema}, name: {name}, old_values: {old_values}, new_values: {new_values}, affected_columns: {affected_columns}')\n\n    def to_diff_tuple(self) -> Tuple[Any, ...]:\n        log.info(f'Converting SyncEnumValuesOp for {self.name} to diff tuple')\n        return ('SyncEnumValuesOp', self.schema, self.name, self.old_values, self.new_values, self.affected_columns)",
            "gen_import": [
                "import logging",
                "from typing import List, Tuple, Any, Iterable",
                "from alembic_postgresql_enum.get_enum_data import TableReference",
                "from alembic_postgresql_enum.sql_commands.enum_type import create_type, drop_type, rename_type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/is_column_type_import_needed",
            "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
            "signature": "def is_column_type_import_needed(self) -> bool:",
            "comment": null,
            "comment_free_code": "@property\ndef is_column_type_import_needed(self) -> bool:\n    return any((affected_column.is_column_type_import_needed for affected_column in self.affected_columns))",
            "start_lineno": 200,
            "end_lineno": 201,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 46,
            "gen_code": "class SyncEnumValuesOp:\n    operation_name = 'change_enum_variants'\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f'alembic.{__name__}')\n        log.info(f'Initializing SyncEnumValuesOp with schema: {schema}, name: {name}, old_values: {old_values}, new_values: {new_values}, affected_columns: {affected_columns}')\n\n    def is_column_type_import_needed(self) -> bool:\n        # Assuming the function checks if column type import is needed based on the context\n        # This is a placeholder logic\n        return any(['Enum' in str(column.type) for column in self.affected_columns])",
            "gen_import": [
                "import logging",
                "from typing import List",
                "from alembic_postgresql_enum.get_enum_data import TableReference",
                "from alembic_postgresql_enum.sql_commands.column_default import get_column_default, drop_default, set_default, rename_default_if_required",
                "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators, drop_comparison_operators",
                "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new, drop_type, rename_type, create_type",
                "from alembic_postgresql_enum.connection import get_connection"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/sync_enum_values.py",
            "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
            "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/render_sync_enum_value_op",
            "class": null,
            "signature": "def render_sync_enum_value_op(autogen_context: AutogenContext, op: SyncEnumValuesOp):",
            "comment": null,
            "comment_free_code": "@alembic.autogenerate.render.renderers.dispatch_for(SyncEnumValuesOp)\ndef render_sync_enum_value_op(autogen_context: AutogenContext, op: SyncEnumValuesOp):\n    if op.is_column_type_import_needed:\n        autogen_context.imports.add('from alembic_postgresql_enum import ColumnType')\n    autogen_context.imports.add('from alembic_postgresql_enum import TableReference')\n    return f'op.sync_enum_values({op.schema!r}, {op.name!r}, {op.new_values!r},\\n                    {op.affected_columns!r},\\n                    enum_values_to_rename=[])'",
            "start_lineno": 205,
            "end_lineno": 214,
            "local_variables": {
                "module": [
                    "log = logging.getLogger(f\"alembic.{__name__}\")"
                ],
                "SyncEnumValuesOp": [
                    "operation_name = \"change_enum_variants\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                48,
                54
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import get_column_default",
                    "alembic_postgresql_enum.sql_commands.column_default.get_column_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import drop_default",
                    "alembic_postgresql_enum.sql_commands.column_default.drop_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import set_default",
                    "alembic_postgresql_enum.sql_commands.column_default.set_default"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.column_default import rename_default_if_required",
                    "alembic_postgresql_enum.sql_commands.column_default.rename_default_if_required"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.create_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.comparison_operators import drop_comparison_operators",
                    "alembic_postgresql_enum.sql_commands.comparison_operators.drop_comparison_operators"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new",
                    "alembic_postgresql_enum.sql_commands.enum_type.cast_old_enum_type_to_new"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import drop_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.drop_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import rename_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.rename_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.sql_commands.enum_type import create_type",
                    "alembic_postgresql_enum.sql_commands.enum_type.create_type"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.connection import get_connection",
                    "alembic_postgresql_enum.connection.get_connection"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import logging",
                    "logging"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from typing import TYPE_CHECKING",
                    "typing.TYPE_CHECKING"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.autogenerate",
                    "alembic.autogenerate"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.base",
                    "alembic.operations.base"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "import alembic.operations.ops",
                    "alembic.operations.ops"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.exc import DataError",
                    "sqlalchemy.exc.DataError"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data.types import Unspecified",
                    "alembic_postgresql_enum.get_enum_data.types.Unspecified"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import TableReference",
                    "alembic_postgresql_enum.get_enum_data.TableReference"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from alembic_postgresql_enum.get_enum_data import ColumnType",
                    "alembic_postgresql_enum.get_enum_data.ColumnType"
                ],
                [
                    "alembic_postgresql_enum/operations/sync_enum_values.py",
                    "from sqlalchemy.engine import Connection",
                    "sqlalchemy.engine.Connection"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/is_column_type_import_needed"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 47,
            "gen_code": "def render_sync_enum_value_op(autogen_context: AutogenContext, op: SyncEnumValuesOp):\n    # Assuming the function renders a sync enum values operation\n    # This is a placeholder logic\n    return f'op.sync_enum_values(schema=\"{op.schema}\", name=\"{op.name}\", old_values={op.old_values}, new_values={op.new_values}, affected_columns={[(col.table_name, col.column_name) for col in op.affected_columns]})'",
            "gen_import": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/enum_lifecycle_base.py",
            "relative_path": "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
            "fqn_list": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/__init__",
            "class": "alembic_postgresql_enum/operations/enum_lifecycle_base.py.EnumLifecycleOp",
            "signature": "def __init__(self, schema: str, name: str, enum_values: Iterable[str]):",
            "comment": null,
            "comment_free_code": "def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n    self.schema = schema\n    self.name = name\n    self.enum_values = enum_values",
            "start_lineno": 8,
            "end_lineno": 16,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Any",
                    "typing.Any"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 48,
            "gen_code": "class EnumLifecycleOp(ABC):\n    def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n        self.schema = schema\n        self.name = name\n        self.enum_values = list(enum_values)\n\n    @abstractmethod\n    def operation_name(self) -> str:\n        pass\n\n    @abstractmethod\n    def to_diff_tuple(self) -> tuple:\n        pass",
            "gen_import": [
                "from abc import ABC, abstractmethod",
                "from typing import Iterable",
                "import alembic"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/enum_lifecycle_base.py",
            "relative_path": "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
            "fqn_list": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/operation_name",
            "class": "alembic_postgresql_enum/operations/enum_lifecycle_base.py.EnumLifecycleOp",
            "signature": "def operation_name(self) -> str:",
            "comment": null,
            "comment_free_code": "@property\n@abstractmethod\ndef operation_name(self) -> str:\n    pass",
            "start_lineno": 20,
            "end_lineno": 21,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Any",
                    "typing.Any"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 49,
            "gen_code": "class EnumLifecycleOp:\n    def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n        self.schema = schema\n        self.name = name\n        self.enum_values = list(enum_values)\n\n    def operation_name(self) -> str:\n        # This method should be implemented in subclasses\n        raise NotImplementedError('Subclasses must implement this method.')",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/enum_lifecycle_base.py",
            "relative_path": "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
            "fqn_list": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/to_diff_tuple",
            "class": "alembic_postgresql_enum/operations/enum_lifecycle_base.py.EnumLifecycleOp",
            "signature": "def to_diff_tuple(self) -> Tuple[Any, ...]:",
            "comment": null,
            "comment_free_code": "def to_diff_tuple(self) -> Tuple[Any, ...]:\n    return (self.operation_name, self.name, self.schema, self.enum_values)",
            "start_lineno": 23,
            "end_lineno": 24,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                58
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Iterable",
                    "typing.Iterable"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Tuple",
                    "typing.Tuple"
                ],
                [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                    "from typing import Any",
                    "typing.Any"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/operation_name"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 50,
            "gen_code": "class EnumLifecycleOp:\n    def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n        self.schema = schema\n        self.name = name\n        self.enum_values = list(enum_values)\n\n    def to_diff_tuple(self) -> Tuple[Any, ...]:\n        # This method should return a tuple representing the diff operation\n        # This is a placeholder logic\n        return ('EnumLifecycleOp', self.schema, self.name, self.enum_values)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/create_enum.py",
            "relative_path": "alembic_postgresql_enum/operations/create_enum.py",
            "fqn_list": "alembic_postgresql_enum/operations/create_enum.py/CreateEnumOp/reverse",
            "class": "alembic_postgresql_enum/operations/create_enum.py.CreateEnumOp",
            "signature": "def reverse(self):",
            "comment": null,
            "comment_free_code": "def reverse(self):\n    from .drop_enum import DropEnumOp\n    return DropEnumOp(name=self.name, schema=self.schema, enum_values=self.enum_values)",
            "start_lineno": 10,
            "end_lineno": 17,
            "local_variables": {
                "CreateEnumOp": [
                    "operation_name = \"create_enum\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "from enum_lifecycle_base import EnumLifecycleOp",
                    "enum_lifecycle_base.EnumLifecycleOp"
                ],
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "from drop_enum import DropEnumOp",
                    "drop_enum.DropEnumOp"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 51,
            "gen_code": "class CreateEnumOp(EnumLifecycleOp):\n    operation_name = 'create_enum'\n\n    def reverse(self):\n        # This method returns the reverse operation of creating an enum, which is dropping it\n        return DropEnumOp(self.schema, self.name, self.enum_values)",
            "gen_import": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic_postgresql_enum.operations.enum_lifecycle_base import EnumLifecycleOp",
                "from alembic_postgresql_enum.operations.drop_enum import DropEnumOp"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/create_enum.py",
            "relative_path": "alembic_postgresql_enum/operations/create_enum.py",
            "fqn_list": "alembic_postgresql_enum/operations/create_enum.py/render_create_enum_op",
            "class": null,
            "signature": "def render_create_enum_op(autogen_context: AutogenContext, op: CreateEnumOp):",
            "comment": null,
            "comment_free_code": "@alembic.autogenerate.render.renderers.dispatch_for(CreateEnumOp)\ndef render_create_enum_op(autogen_context: AutogenContext, op: CreateEnumOp):\n    assert autogen_context.dialect is not None\n    if op.schema != autogen_context.dialect.default_schema_name:\n        return f\"\\n            sa.Enum({', '.join(map(repr, op.enum_values))}, name='{op.name}', schema='{op.schema}').create(op.get_bind())\\n            \".strip()\n    return f\"\\n        sa.Enum({', '.join(map(repr, op.enum_values))}, name='{op.name}').create(op.get_bind())\\n        \".strip()",
            "start_lineno": 21,
            "end_lineno": 30,
            "local_variables": {
                "CreateEnumOp": [
                    "operation_name = \"create_enum\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                60
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "from enum_lifecycle_base import EnumLifecycleOp",
                    "enum_lifecycle_base.EnumLifecycleOp"
                ],
                [
                    "alembic_postgresql_enum/operations/create_enum.py",
                    "from drop_enum import DropEnumOp",
                    "drop_enum.DropEnumOp"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/operations/create_enum.py/CreateEnumOp"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 52,
            "gen_code": "def render_create_enum_op(autogen_context: AutogenContext, op: CreateEnumOp):\n    args = ', '.join([f'\\'{arg}\\'' for arg in op.enum_values])\n    return f\"op.create_enum(name='{op.name}', values=[{args}])\"",
            "gen_import": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic.operations import ops",
                "from alembic_postgresql_enum.operations.create_enum import CreateEnumOp"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/drop_enum.py",
            "relative_path": "alembic_postgresql_enum/operations/drop_enum.py",
            "fqn_list": "alembic_postgresql_enum/operations/drop_enum.py/DropEnumOp/reverse",
            "class": "alembic_postgresql_enum/operations/drop_enum.py.DropEnumOp",
            "signature": "def reverse(self):",
            "comment": null,
            "comment_free_code": "def reverse(self):\n    from .create_enum import CreateEnumOp\n    return CreateEnumOp(name=self.name, schema=self.schema, enum_values=self.enum_values)",
            "start_lineno": 10,
            "end_lineno": 17,
            "local_variables": {
                "DropEnumOp": [
                    "operation_name = \"drop_enum\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                60
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "from enum_lifecycle_base import EnumLifecycleOp",
                    "enum_lifecycle_base.EnumLifecycleOp"
                ],
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "from create_enum import CreateEnumOp",
                    "create_enum.CreateEnumOp"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/operations/create_enum.py/CreateEnumOp"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 53,
            "gen_code": "def reverse(self):\n    return CreateEnumOp(schema=self.schema, name=self.name, enum_values=self.enum_values)",
            "gen_import": [
                "from alembic_postgresql_enum.operations.create_enum import CreateEnumOp"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/alembic-postgresql-enum/alembic_postgresql_enum/operations/drop_enum.py",
            "relative_path": "alembic_postgresql_enum/operations/drop_enum.py",
            "fqn_list": "alembic_postgresql_enum/operations/drop_enum.py/render_drop_enum_op",
            "class": null,
            "signature": "def render_drop_enum_op(autogen_context: AutogenContext, op: DropEnumOp):",
            "comment": null,
            "comment_free_code": "@alembic.autogenerate.render.renderers.dispatch_for(DropEnumOp)\ndef render_drop_enum_op(autogen_context: AutogenContext, op: DropEnumOp):\n    assert autogen_context.dialect is not None\n    if op.schema != autogen_context.dialect.default_schema_name:\n        return f\"\\n            sa.Enum({', '.join(map(repr, op.enum_values))}, name='{op.name}', schema='{op.schema}').drop(op.get_bind())\\n            \".strip()\n    return f\"\\n        sa.Enum({', '.join(map(repr, op.enum_values))}, name='{op.name}').drop(op.get_bind())\\n        \".strip()",
            "start_lineno": 21,
            "end_lineno": 30,
            "local_variables": {
                "DropEnumOp": [
                    "operation_name = \"drop_enum\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                63
            ],
            "local_import": [
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "import alembic",
                    "alembic"
                ]
            ],
            "third_import": [
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "from alembic.autogenerate.api import AutogenContext",
                    "alembic.autogenerate.api.AutogenContext"
                ],
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "from enum_lifecycle_base import EnumLifecycleOp",
                    "enum_lifecycle_base.EnumLifecycleOp"
                ],
                [
                    "alembic_postgresql_enum/operations/drop_enum.py",
                    "from create_enum import CreateEnumOp",
                    "create_enum.CreateEnumOp"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "alembic_postgresql_enum/operations/drop_enum.py/DropEnumOp"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 54,
            "gen_code": "def render_drop_enum_op(autogen_context: AutogenContext, op: DropEnumOp):\n    return f\"op.drop_enum(name='{op.name}')\"",
            "gen_import": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic_postgresql_enum.operations.drop_enum import DropEnumOp"
            ]
        }
    ]
}