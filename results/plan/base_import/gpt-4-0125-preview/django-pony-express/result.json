{
    "implementation": [
        {
            "key_id": 1,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/__init__",
            "imports": [
                "from typing import Union",
                "from django.db.models import QuerySet"
            ],
            "code": "def __init__(self, recipient_email_list: Union[list, tuple, QuerySet] = None, **kwargs) -> None:\n    self._errors = []\n    self.service_class = None\n    self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []"
        },
        {
            "key_id": 9,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/__init__",
            "imports": [
                "from typing import Optional, Union, List",
                "from django.core.mail import EmailMultiAlternatives",
                "import logging"
            ],
            "code": "def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[List] = None, **kwargs) -> None:\n    self.SUBJECT_PREFIX = None\n    self.FROM_EMAIL = None\n    self.REPLY_TO_ADDRESS = []\n    self._errors = []\n    self.subject = None\n    self.template_name = None\n    self.template_txt_name = None\n    self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []\n    self.cc_email_list = []\n    self.bcc_email_list = []\n    self.attachment_list = attachment_list if attachment_list is not None else []\n    self._logger = logging.getLogger('django_pony_express')"
        },
        {
            "key_id": 0,
            "fqn": "manage.py/main",
            "imports": [
                "import os",
                "import sys",
                "from django.core.management import execute_from_command_line"
            ],
            "code": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        execute_from_command_line(sys.argv)\n    except Exception as e:\n        print(f'Error executing command line: {e}')\n        sys.exit(1)"
        },
        {
            "key_id": 2,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/is_valid",
            "imports": [
                "from typing import Union, Optional",
                "from django.db.models import QuerySet",
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "from django.utils.translation import gettext_lazy as _",
                "from django_pony_express.errors import EmailServiceConfigError"
            ],
            "code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.recipient_email_list:\n        if raise_exception:\n            raise EmailServiceConfigError(_('Recipient email list cannot be empty.'))\n        else:\n            self._errors.append(_('Recipient email list cannot be empty.'))\n            return False\n    return True"
        },
        {
            "key_id": 3,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list",
            "imports": [],
            "code": "def get_recipient_list(self) -> list:\n    if isinstance(self.recipient_email_list, (list, tuple, QuerySet)):\n        return list(self.recipient_email_list)\n    return [self.recipient_email_list]"
        },
        {
            "key_id": 4,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_email_from_recipient",
            "imports": [],
            "code": "def get_email_from_recipient(self, recipient) -> str:\n    if hasattr(recipient, 'email'):\n        return recipient.email\n    elif isinstance(recipient, str):\n        return recipient\n    else:\n        raise ValueError(_('Invalid recipient type. Must be a string or have an email attribute.'))"
        },
        {
            "key_id": 5,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_context_data",
            "imports": [
                "from django.template.loader import render_to_string"
            ],
            "code": "def get_context_data(self) -> dict:\n    context = {}\n    # Assuming there's a method to get additional context or override this to add more context\n    return context"
        },
        {
            "key_id": 6,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/has_errors",
            "imports": [
                "from django.db.models import QuerySet",
                "from typing import Union, List"
            ],
            "code": "def has_errors(self) -> bool:\n    return len(self._errors) > 0"
        },
        {
            "key_id": 7,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/errors",
            "imports": [],
            "code": "def errors(self) -> List[str]:\n    return self._errors"
        },
        {
            "key_id": 8,
            "fqn": "django_pony_express/services/base.py/BaseEmailServiceFactory/process",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "from django_pony_express.errors import EmailServiceConfigError, EmailServiceAttachmentError",
                "import logging"
            ],
            "code": "def process(self, raise_exception: bool = True) -> int:\n    if not self.is_valid(raise_exception=raise_exception):\n        if raise_exception:\n            raise EmailServiceConfigError('Invalid email service configuration.')\n        else:\n            return 0\n    emails_sent = 0\n    for recipient in self.get_recipient_list():\n        context = self.get_context_data()\n        subject = render_to_string(self.service_class.template_name, context).strip()\n        body = render_to_string(self.service_class.template_txt_name, context).strip()\n        email = EmailMultiAlternatives(subject, body, self.service_class.FROM_EMAIL, [recipient])\n        try:\n            self.service_class._add_attachments(email)\n            email.send()\n            emails_sent += 1\n        except Exception as e:\n            logging.getLogger('django_pony_express').error(f'Error sending email: {str(e)}')\n            self._errors.append(str(e))\n            if raise_exception:\n                raise EmailServiceAttachmentError(f'Failed to attach files: {str(e)}')\n    return emails_sent"
        },
        {
            "key_id": 10,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_get_logger",
            "imports": [
                "import logging"
            ],
            "code": "def _get_logger(self) -> logging.Logger:\n    if not self._logger:\n        self._logger = logging.getLogger('django_pony_express')\n    return self._logger"
        },
        {
            "key_id": 11,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_context_data",
            "imports": [
                "from django.utils.translation import gettext as _"
            ],
            "code": "def get_context_data(self) -> dict:\n    context = {\n        'subject': self.subject or _('No Subject'),\n        'from_email': self.FROM_EMAIL,\n        'reply_to': self.REPLY_TO_ADDRESS,\n        'recipient_list': self.recipient_email_list,\n        'cc_list': self.cc_email_list,\n        'bcc_list': self.bcc_email_list,\n        'attachments': self.attachment_list\n    }\n    return context"
        },
        {
            "key_id": 12,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_subject",
            "imports": [
                "from django.conf import settings"
            ],
            "code": "def get_subject(self) -> str:\n    prefix = self.SUBJECT_PREFIX or settings.EMAIL_SUBJECT_PREFIX\n    return f'{prefix} {self.subject}' if self.subject else ''"
        },
        {
            "key_id": 13,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_from_email",
            "imports": [
                "from django.conf import settings"
            ],
            "code": "def get_from_email(self) -> str:\n    return self.FROM_EMAIL or settings.DEFAULT_FROM_EMAIL"
        },
        {
            "key_id": 14,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_cc_emails",
            "imports": [],
            "code": "def get_cc_emails(self) -> list:\n    return self.cc_email_list"
        },
        {
            "key_id": 15,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_bcc_emails",
            "imports": [],
            "code": "def get_bcc_emails(self) -> list:\n    return self.bcc_email_list"
        },
        {
            "key_id": 16,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_reply_to_emails",
            "imports": [],
            "code": "def get_reply_to_emails(self) -> list:\n    return self.REPLY_TO_ADDRESS or []"
        },
        {
            "key_id": 17,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_translation",
            "imports": [
                "from django.utils.translation import gettext_lazy as _",
                "from django.utils import translation"
            ],
            "code": "def get_translation(self) -> Union[str, None]:\n    if not hasattr(self, 'template_name') or self.template_name is None:\n        return None\n    with translation.override(self.get_translation()):\n        return _(self.template_name)"
        },
        {
            "key_id": 18,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/get_attachments",
            "imports": [],
            "code": "def get_attachments(self) -> list:\n    return self.attachment_list if self.attachment_list else []"
        },
        {
            "key_id": 19,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_add_attachments",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives"
            ],
            "code": "def _add_attachments(self, msg: EmailMultiAlternatives):\n    for attachment in self.get_attachments():\n        if isinstance(attachment, tuple) and len(attachment) == 3:\n            msg.attach(*attachment)\n        else:\n            self._logger.error('Invalid attachment format. Expected a tuple of (filename, content, mimetype).')"
        },
        {
            "key_id": 20,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string"
            ],
            "code": "def _build_mail_object(self) -> EmailMultiAlternatives:\n    subject = self.get_subject()\n    body = render_to_string(self.template_name, self.get_context_data())\n    email = EmailMultiAlternatives(subject, body, self.get_from_email(), self.recipient_email_list, cc=self.cc_email_list, bcc=self.bcc_email_list, reply_to=self.get_reply_to_emails())\n    self._add_attachments(email)\n    return email"
        },
        {
            "key_id": 21,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/is_valid",
            "imports": [],
            "code": "def is_valid(self, raise_exception: bool = True) -> bool:\n    if not self.recipient_email_list:\n        if raise_exception:\n            raise ValueError('Recipient email list cannot be empty.')\n        else:\n            self._errors.append('Recipient email list cannot be empty.')\n            return False\n    return True"
        },
        {
            "key_id": 22,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/has_errors",
            "imports": [
                "import logging",
                "from typing import Optional, Union, List"
            ],
            "code": "class BaseEmailService:\n    def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[List] = None, **kwargs) -> None:\n        self.SUBJECT_PREFIX = None\n        self.FROM_EMAIL = None\n        self.REPLY_TO_ADDRESS = []\n        self._errors = []\n        self.subject = None\n        self.template_name = None\n        self.template_txt_name = None\n        self.recipient_email_list = recipient_email_list if recipient_email_list is not None else []\n        self.cc_email_list = []\n        self.bcc_email_list = []\n        self.attachment_list = attachment_list if attachment_list is not None else []\n        self._logger = logging.getLogger('django_pony_express')\n\n    def has_errors(self) -> bool:\n        return len(self._errors) > 0"
        },
        {
            "key_id": 23,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/errors",
            "imports": [],
            "code": "def errors(self) -> list:\n        return self._errors"
        },
        {
            "key_id": 24,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "import logging"
            ],
            "code": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:\n        try:\n            msg.send()\n            self._logger.info('Email sent successfully.')\n            return True\n        except Exception as e:\n            self._logger.error(f'Failed to send email: {e}')\n            self._errors.append(str(e))\n            return False"
        },
        {
            "key_id": 25,
            "fqn": "django_pony_express/services/base.py/BaseEmailService/process",
            "imports": [
                "from django.core.mail import EmailMultiAlternatives",
                "from django.template.loader import render_to_string",
                "import logging"
            ],
            "code": "def process(self, raise_exception: bool = True) -> bool:\n        if not self.is_valid(raise_exception=raise_exception):\n            if raise_exception:\n                raise ValueError('Email data is not valid.')\n            else:\n                return False\n        email_content_html = render_to_string(self.template_name, self.get_context_data())\n        email_content_text = render_to_string(self.template_txt_name, self.get_context_data())\n        msg = EmailMultiAlternatives(subject=self.get_subject(), body=email_content_text, from_email=self.get_from_email(), to=self.recipient_email_list, cc=self.cc_email_list, bcc=self.bcc_email_list, reply_to=self.REPLY_TO_ADDRESS)\n        msg.attach_alternative(email_content_html, 'text/html')\n        for attachment in self.get_attachments():\n            msg.attach(attachment.name, attachment.content, attachment.mime_type)\n        return self._send_and_log_email(msg)"
        },
        {
            "key_id": 26,
            "fqn": "django_pony_express/services/asynchronous/thread.py/ThreadEmailService/process",
            "imports": [
                "from threading import Thread",
                "from django_pony_express.services.base import BaseEmailService"
            ],
            "code": "class ThreadEmailService(BaseEmailService):\n    def process(self, raise_exception: bool = True) -> None:\n        thread = Thread(target=super().process, args=(raise_exception,))\n        thread.start()"
        }
    ]
}