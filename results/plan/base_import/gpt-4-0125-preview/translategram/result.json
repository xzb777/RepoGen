{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "translategram/translategram/translator_services.py/MtranslateTranslatorService/__init__",
            "imports": [
                "from translategram.translategram.service_libs.mtranslate import translate"
            ],
            "code": "def __init__(self) -> None:\n    self.service = translate"
        },
        {
            "key_id": 1,
            "fqn": "translategram/translategram/cache.py/PickleCache/__init__",
            "imports": [
                "import os",
                "import pickle",
                "from typing import Any",
                "from pathlib import Path"
            ],
            "code": "def __init__(self, obj: Any, filename: str = 'translation.data') -> None:\n    self.obj = obj\n    self.filename = filename\n    self.filepath = Path(filename)\n    if not self.filepath.exists():\n        with open(self.filepath, 'wb') as file:\n            pickle.dump(obj, file)\n\ndef __del__(self) -> None:\n    with open(self.filepath, 'wb') as file:\n        pickle.dump(self.obj, file)"
        },
        {
            "key_id": 3,
            "fqn": "translategram/translategram/translator.py/Translator/__init__",
            "imports": [
                "from typing import Type, Optional",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Optional[Type[Cache]] = None) -> None:\n    self.translator_service = translator_service\n    self.cache_system = cache_system"
        },
        {
            "key_id": 6,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/__init__",
            "imports": [
                "from typing import Type, Union",
                "from translategram.translategram.translator import Translator",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache",
                "from telegram.ext import ContextTypes, CommandHandler, ApplicationBuilder",
                "from telegram import Update"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None] = None) -> None:\n    self._translator_service = translator_service()\n    self._cache_system = cache_system\n\nasync def handler_translator(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, source_lang: str = 'auto') -> None:\n    user_lang = update.effective_user.language_code if update.effective_user else 'en'\n    if self._cache_system:\n        msg = await self._cache_system.retrieve(key=f'{message}_{user_lang}')\n    else:\n        msg = None\n    if not msg:\n        msg = self._translator_service.translate(message, target_language=user_lang, source_language=source_lang)\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)"
        },
        {
            "key_id": 2,
            "fqn": "translategram/translategram/cache.py/PickleCache/__del__",
            "imports": [
                "import pickle",
                "from pathlib import Path"
            ],
            "code": "def __init__(self, obj: Any, filename: str = 'translation.data') -> None:\n    self.obj = obj\n    self.filename = filename\n    self.filepath = Path(filename)\n    if not self.filepath.exists():\n        with open(self.filepath, 'wb') as file:\n            pickle.dump(obj, file)\n\ndef __del__(self) -> None:\n    with open(self.filepath, 'wb') as file:\n        pickle.dump(self.obj, file)"
        },
        {
            "key_id": 4,
            "fqn": "translategram/translategram/translator.py/Translator/handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Type, Optional",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Optional[Type[Cache]] = None) -> None:\n    self.translator_service = translator_service\n    self.cache_system = cache_system\n\ndef handler_translator(self, message: str, source_lang: str) -> Callable[[Any, Any, str], Coroutine[Any, Any, Any]]:\n    async def wrapper(update: Any, context: Any, message: str) -> None:\n        translated_message = self.translator_service.translate(message, source_lang)\n        await context.bot.send_message(chat_id=update.effective_chat.id, text=translated_message)\n    return wrapper"
        },
        {
            "key_id": 5,
            "fqn": "translategram/translategram/translator.py/Translator/dynamic_handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Type, Optional",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Optional[Type[Cache]] = None) -> None:\n    self.translator_service = translator_service\n    self.cache_system = cache_system\n\ndef dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> Callable[[Any, Any], Coroutine[Any, Any, Any]]:\n    async def wrapper(update: Any, context: Any) -> None:\n        original_message = message_func(update, context)\n        translated_message = self.translator_service.translate(original_message, source_lang)\n        await context.bot.send_message(chat_id=update.effective_chat.id, text=translated_message)\n    return wrapper"
        },
        {
            "key_id": 7,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Union, Type",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache",
                "from telegram.ext import ContextTypes",
                "from telegram import Update"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None] = None) -> None:\n    self._translator_service = translator_service()\n    self._cache_system = cache_system\n\nasync def handler_translator(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str, source_lang: str = 'auto') -> None:\n    user_lang = update.effective_user.language_code if update.effective_user else 'en'\n    if self._cache_system:\n        msg = await self._cache_system.retrieve(key=f'{message}_{user_lang}')\n    else:\n        msg = None\n    if not msg:\n        msg = self._translator_service.translate(message, target_language=user_lang, source_language=source_lang)\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)"
        },
        {
            "key_id": 8,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/dynamic_handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, Union, Type",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache",
                "from telegram.ext import ContextTypes",
                "from telegram import Update"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None] = None) -> None:\n    self._translator_service = translator_service()\n    self._cache_system = cache_system\n\nasync def dynamic_handler_translator(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> None:\n    user_lang = update.effective_user.language_code if update.effective_user else 'en'\n    original_message = message_func(update, context)\n    if self._cache_system:\n        msg = await self._cache_system.retrieve(key=f'{original_message}_{user_lang}')\n    else:\n        msg = None\n    if not msg:\n        msg = self._translator_service.translate(original_message, target_language=user_lang, source_language=source_lang)\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)"
        }
    ]
}