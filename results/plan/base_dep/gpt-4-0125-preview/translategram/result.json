{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "translategram/translategram/translator_services.py/MtranslateTranslatorService/__init__",
            "imports": [
                "from mtranslate import translate"
            ],
            "code": "def __init__(self):\n    self.service = translate"
        },
        {
            "key_id": 1,
            "fqn": "translategram/translategram/cache.py/PickleCache/__init__",
            "imports": [
                "import pickle",
                "from pathlib import Path"
            ],
            "code": "def __init__(self, obj: object, filename: str = 'translation.data') -> None:\n    self.obj = obj\n    self.filename = filename\n    self.filepath = Path(self.filename)\n    if self.filepath.exists():\n        with self.filepath.open('rb') as file:\n            self.loaded_data = pickle.load(file)\n    else:\n        self.loaded_data = None\n\n    def save(self):\n        with self.filepath.open('wb') as file:\n            pickle.dump(self.obj, file)\n\n    def load(self):\n        if self.filepath.exists():\n            with self.filepath.open('rb') as file:\n                self.loaded_data = pickle.load(file)\n        return self.loaded_data"
        },
        {
            "key_id": 3,
            "fqn": "translategram/translategram/translator.py/Translator/__init__",
            "imports": [
                "from typing import Type, Union",
                "from .cache import Cache",
                "from .translator_services import TranslatorService"
            ],
            "code": "def __init__(self, translator_service: TranslatorService, cache_system: Union[Type[Cache], None] = None) -> None:\n    self.translator_service = translator_service\n    self.cache_system = cache_system if cache_system else None"
        },
        {
            "key_id": 6,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/__init__",
            "imports": [
                "from typing import Type, Union",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache",
                "from telegram.ext import CallbackContext",
                "from telegram import Update",
                "import asyncio"
            ],
            "code": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None] = None) -> None:\n    self.translator_service = translator_service()\n    self.cache_system = cache_system() if cache_system else None\n\n    async def translate_message(self, update: Update, context: CallbackContext, message: str, source_lang: str = 'auto', target_lang: str = 'en') -> None:\n        if self.cache_system:\n            cache_key = f'{message}_{source_lang}_{target_lang}'\n            translated_message = self.cache_system.load(cache_key)\n            if not translated_message:\n                translated_message = self.translator_service.translate(message, source_lang, target_lang)\n                self.cache_system.save(cache_key, translated_message)\n        else:\n            translated_message = self.translator_service.translate(message, source_lang, target_lang)\n        await context.bot.send_message(chat_id=update.effective_chat.id, text=translated_message)"
        },
        {
            "key_id": 2,
            "fqn": "translategram/translategram/cache.py/PickleCache/__del__",
            "imports": [
                "import pickle",
                "from pathlib import Path"
            ],
            "code": "def __del__(self) -> None:\n    if self.filepath.exists():\n        with self.filepath.open('wb') as file:\n            pickle.dump(self.loaded_data, file)"
        },
        {
            "key_id": 4,
            "fqn": "translategram/translategram/translator.py/Translator/handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, TypeVar, Union",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "def handler_translator(self, message: str, source_lang: str) -> Callable[[Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]:\n    async def wrapper(func: Callable[..., object]) -> Callable[[Any, Any, str], Coroutine[Any, Any, Any]]:\n        async def inner(update: Any, context: Any, message: str) -> Coroutine[Any, Any, Any]:\n            translated_message = await self.translator_service.translate(message, source_lang)\n            if self.cache_system is not None:\n                self.cache_system.save(message, translated_message)\n            return await func(update, context, translated_message)\n        return inner\n    return wrapper"
        },
        {
            "key_id": 5,
            "fqn": "translategram/translategram/translator.py/Translator/dynamic_handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine, TypeVar, Union",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]:\n    async def wrapper(func: Callable[..., object]) -> Callable[[Any, Any], Coroutine[Any, Any, Any]]:\n        async def inner(update: Any, context: Any) -> Coroutine[Any, Any, Any]:\n            original_message = message_func(update, context)\n            translated_message = await self.translator_service.translate(original_message, source_lang)\n            if self.cache_system is not None:\n                self.cache_system.save(original_message, translated_message)\n            return await func(update, context, translated_message)\n        return inner\n    return wrapper"
        },
        {
            "key_id": 7,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine",
                "from telegram import Update",
                "from telegram.ext import CallbackContext",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "async def translate_message(self, update: Update, context: CallbackContext, message: str, source_lang: str = 'auto', target_lang: str = 'en') -> None:\n    user_lang = update.effective_user.language_code if update.effective_user else 'en'\n    cache_key = f'{message}_{source_lang}_{target_lang}'\n    translated_message = ''\n    if self.cache_system:\n        translated_message = self.cache_system.load(cache_key)\n        if not translated_message:\n            translated_message = await self.translator_service.translate(message, source_lang, target_lang)\n            self.cache_system.save(cache_key, translated_message)\n    else:\n        translated_message = await self.translator_service.translate(message, source_lang, target_lang)\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=translated_message)"
        },
        {
            "key_id": 8,
            "fqn": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/dynamic_handler_translator",
            "imports": [
                "from typing import Callable, Any, Coroutine",
                "from telegram import Update",
                "from telegram.ext import CallbackContext",
                "from translategram.translategram.translator_services import TranslatorService",
                "from translategram.translategram.cache import Cache"
            ],
            "code": "async def translate_message(self, update: Update, context: CallbackContext, message_func: Callable[[str, Any], str], source_lang: str = 'auto', target_lang: str = 'en') -> None:\n    original_message = message_func(update, context)\n    user_lang = update.effective_user.language_code if update.effective_user else 'en'\n    cache_key = f'{original_message}_{source_lang}_{target_lang}'\n    translated_message = ''\n    if self.cache_system:\n        translated_message = self.cache_system.load(cache_key)\n        if not translated_message:\n            translated_message = await self.translator_service.translate(original_message, source_lang, target_lang)\n            self.cache_system.save(cache_key, translated_message)\n    else:\n        translated_message = await self.translator_service.translate(original_message, source_lang, target_lang)\n    await context.bot.send_message(chat_id=update.effective_chat.id, text=translated_message)"
        }
    ]
}