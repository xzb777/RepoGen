{
    "implementation": [
        {
            "key_id": 14,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/__init__",
            "imports": [
                "from typing import Optional",
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "class RawSourceVisitor:\n    def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n        self.logger = logging.getLogger(__name__)\n        self.raw_source = raw_source\n        self.block_at_line = block_at_line\n        self.grammar = Grammar(\n            r\"\"\"\n            maccarone = human_source maccarone_chunk*\n            maccarone_chunk = snippet human_source?\n\n            snippet = snippet_open (ai_source snippet_close)?\n            snippet_open = snippet_open_single / snippet_open_multi\n            snippet_open_single = guidance_open guidance_inner \">>\" nl\n            snippet_open_multi = guidance_open nl guidance_lines guidance_close\n            snippet_close = ws \"#<</>>\" nl\n\n            guidance_open = ws \"#<<\"\n            guidance_close = ws \"#>>\" nl\n            guidance_line = ws \"#\" guidance_inner nl\n            guidance_lines = guidance_line+\n            guidance_inner = ~\"((?!>>).)*\"\n\n            human_source = source_line*\n            ai_source = source_line*\n            source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n            ws = ~\"[ \\t]*\"\n            nl = ws ~\"[\\r\\n]\"\n            \"\"\"\n        )"
        },
        {
            "key_id": 3,
            "fqn": "examples/todo.py/Todo/__init__",
            "imports": [
                "from typing import Optional",
                "from .load_todos import load_todos"
            ],
            "code": "class Todo:\n    def __init__(self, description: str, status: str = 'not done', id: Optional[int] = None):\n        self.description = description\n        self.status = status\n        self.id = id\n\n        todos = load_todos()\n        todos.append(self)\n        print(f'Todo added: {self.description} with status {self.status}')"
        },
        {
            "key_id": 11,
            "fqn": "src/maccarone/preprocessor.py/MissingPiece/get_line_pos",
            "imports": [
                "from typing import Tuple"
            ],
            "code": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:\n    lines = raw_source.split('\\n')\n    for i, line in enumerate(lines):\n        if '#<<' in line or '#>>' in line:\n            return i, line.find('#')\n    return -1, -1"
        },
        {
            "key_id": 12,
            "fqn": "src/maccarone/preprocessor.py/MissingPiece/complete",
            "imports": [
                "from typing import Optional"
            ],
            "code": "def complete(self, replacement: Optional[str]) -> str:\n    if replacement is None:\n        return ''\n    return replacement"
        },
        {
            "key_id": 13,
            "fqn": "src/maccarone/preprocessor.py/find_line_number",
            "imports": [],
            "code": "def find_line_number(text: str, pos: int) -> int:\n    return text.count('\\n', 0, pos) + 1"
        },
        {
            "key_id": 15,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/generic_visit",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def generic_visit(self, node: Node, visited_children: List[Node]) -> None:\n    self.logger.info(f'Visiting node: {node.expr_name}')\n    for child in visited_children:\n        self.logger.debug(f'Child node: {child}')"
        },
        {
            "key_id": 16,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone",
            "imports": [],
            "code": "def visit_maccarone(self, node: Node, visited_children: list) -> None:\n    self.logger.info('Processing maccarone block')\n    # Implementation for processing a maccarone block\n    # This is a placeholder for the actual logic, which would likely involve\n    # further parsing and handling of the child nodes representing code snippets\n    # and other elements within a maccarone block."
        },
        {
            "key_id": 17,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone_chunk",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def visit_maccarone_chunk(self, node: Node, visited_children: list):\n    # Extracts the AI source and human source from the visited children\n    ai_source, human_source = None, None\n    for child in visited_children:\n        if isinstance(child, Node) and child.expr_name == 'ai_source':\n            ai_source = child.text\n        elif isinstance(child, Node) and child.expr_name == 'human_source':\n            human_source = child.text\n    # Process the AI and human sources as needed\n    # This is a placeholder for the logic to handle the maccarone chunk\n    # For example, combining or transforming the sources\n    # Return the processed result\n    return ai_source, human_source"
        },
        {
            "key_id": 18,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def visit_snippet(self, node: Node, visited_children: list):\n    # This method processes a snippet node\n    # Extract snippet details from children nodes\n    snippet_details = {'open': None, 'close': None, 'content': None}\n    for child in visited_children:\n        if child.expr_name == 'snippet_open':\n            snippet_details['open'] = child.text\n        elif child.expr_name == 'ai_source':\n            snippet_details['content'] = child.text\n        elif child.expr_name == 'snippet_close':\n            snippet_details['close'] = child.text\n    # Process the snippet details as needed\n    # This could involve formatting or validation\n    # Return the processed snippet details\n    return snippet_details"
        },
        {
            "key_id": 19,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def visit_snippet_open(self, node: Node, visited_children: list):\n    # Identifies the opening of a snippet and processes it\n    # This could involve checking for specific markers or attributes\n    # For this example, we'll just return the text of the node\n    return node.text"
        },
        {
            "key_id": 20,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_single",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def visit_snippet_open_single(self, node: Node, visited_children: list):\n    # Processes a single-line snippet opening\n    # This might involve extracting specific directives or options\n    # For simplicity, we'll return the node's text, but real logic would be more complex\n    return node.text"
        },
        {
            "key_id": 21,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_multi",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def visit_snippet_open_multi(self, node: Node, visited_children: list):\n    # Handles the opening of a multi-line snippet\n    # This could involve complex parsing of the opening lines\n    # For this example, we'll assume it's similar to a single-line open but with additional checks\n    return node.text"
        },
        {
            "key_id": 22,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_open",
            "imports": [
                "from parsimonious.nodes import Node",
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "class RawSourceVisitor:\n    def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n        self.logger = logging.getLogger(__name__)\n        self.raw_source = raw_source\n        self.block_at_line = block_at_line\n        self.grammar = Grammar(\n            r\"\"\"\n            maccarone = human_source maccarone_chunk*\n            maccarone_chunk = snippet human_source?\n\n            snippet = snippet_open (ai_source snippet_close)?\n            snippet_open = snippet_open_single / snippet_open_multi\n            snippet_open_single = guidance_open guidance_inner \">>\" nl\n            snippet_open_multi = guidance_open nl guidance_lines guidance_close\n            snippet_close = ws \"#<</>>\" nl\n\n            guidance_open = ws \"#<<\"\n            guidance_close = ws \"#>>\" nl\n            guidance_line = ws \"#\" guidance_inner nl\n            guidance_lines = guidance_line+\n            guidance_inner = ~\"((?!>>).)*\"\n\n            human_source = source_line*\n            ai_source = source_line*\n            source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n            ws = ~\"[ \\t]*\"\n            nl = ws ~\"[\\r\\n]\"\n            \"\"\"\n        )\n\n    def visit_guidance_open(self, node: Node, visited_children: list):\n        self.logger.debug('Visiting guidance open')\n        # Here, you would implement logic based on the node and visited_children\n        # For example, parsing the guidance open to understand the required action\n        return node"
        },
        {
            "key_id": 23,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_line",
            "imports": [
                "from parsimonious.nodes import Node"
            ],
            "code": "class RawSourceVisitor:\n    def visit_guidance_line(self, node: Node, visited_children: list):\n        self.logger.debug('Visiting guidance line')\n        # Implement logic to handle a guidance line\n        # This could involve parsing the line's content and acting accordingly\n        return node"
        },
        {
            "key_id": 24,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_lines",
            "imports": [
                "from parsimonious.nodes import Node"
            ],
            "code": "class RawSourceVisitor:\n    def visit_guidance_lines(self, node: Node, visited_children: list):\n        self.logger.debug('Visiting guidance lines')\n        # Handle multiple guidance lines\n        # This might involve aggregating data from multiple lines or preparing it for further processing\n        return node"
        },
        {
            "key_id": 25,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_inner",
            "imports": [
                "from parsimonious.nodes import Node"
            ],
            "code": "class RawSourceVisitor:\n    def visit_guidance_inner(self, node: Node, visited_children: list):\n        self.logger.debug('Visiting guidance inner')\n        # Process the inner content of a guidance block\n        # This could involve detailed parsing or transformation of the content\n        return node"
        },
        {
            "key_id": 26,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_human_source",
            "imports": [
                "from parsimonious.nodes import Node"
            ],
            "code": "class RawSourceVisitor:\n    def visit_human_source(self, node: Node, visited_children: list):\n        self.logger.debug('Visiting human source')\n        # Handle human-written source code\n        # This might involve identifying areas for AI to generate code or leaving as-is\n        return node"
        },
        {
            "key_id": 27,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_ai_source",
            "imports": [
                "from parsimonious.nodes import Node",
                "import logging",
                "from parsimonious.grammar import Grammar"
            ],
            "code": "class RawSourceVisitor:\n    def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n        self.logger = logging.getLogger(__name__)\n        self.raw_source = raw_source\n        self.block_at_line = block_at_line\n        self.grammar = Grammar(\n            r\"\"\"\n            maccarone = human_source maccarone_chunk*\n            maccarone_chunk = snippet human_source?\n\n            snippet = snippet_open (ai_source snippet_close)?\n            snippet_open = snippet_open_single / snippet_open_multi\n            snippet_open_single = guidance_open guidance_inner \">>\" nl\n            snippet_open_multi = guidance_open nl guidance_lines guidance_close\n            snippet_close = ws \"#<</>>\" nl\n\n            guidance_open = ws \"#<<\"\n            guidance_close = ws \"#>>\" nl\n            guidance_line = ws \"#\" guidance_inner nl\n            guidance_lines = guidance_line+\n            guidance_inner = ~\"((?!>>).)*\"\n\n            human_source = source_line*\n            ai_source = source_line*\n            source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n            ws = ~\"[ \\t]*\"\n            nl = ws ~\"[\\r\\n]\"\n            \"\"\"\n        )\n\n    def visit_ai_source(self, node: Node, visited_children: list):\n        # Logic to process AI-generated source code segments\n        self.logger.info('Visiting AI source node')\n        # Example processing logic\n        ai_source_code = ''.join(child.text for child in visited_children if isinstance(child, Node))\n        return ai_source_code"
        },
        {
            "key_id": 28,
            "fqn": "src/maccarone/preprocessor.py/raw_source_to_pieces",
            "imports": [
                "from typing import List, Optional",
                "from src.maccarone.preprocessor import RawSourceVisitor, Piece"
            ],
            "code": "def raw_source_to_pieces(input: str, block_at_line: Optional[int] = None) -> List[Piece]:\n    visitor = RawSourceVisitor(input, block_at_line)\n    parsed = visitor.grammar.parse(input)\n    pieces = visitor.visit(parsed)\n    return pieces"
        },
        {
            "key_id": 29,
            "fqn": "src/maccarone/preprocessor.py/raw_pieces_to_tagged_input",
            "imports": [
                "from typing import List",
                "from src.maccarone.preprocessor import Piece"
            ],
            "code": "def raw_pieces_to_tagged_input(raw_pieces: List[Piece]) -> str:\n    tagged_input = ''\n    for piece in raw_pieces:\n        if piece.is_ai_generated:\n            tagged_input += f'<ai>{piece.content}</ai>'\n        else:\n            tagged_input += piece.content\n    return tagged_input"
        },
        {
            "key_id": 30,
            "fqn": "src/maccarone/preprocessor.py/tagged_input_to_tagged_output",
            "imports": [
                "from src.maccarone.openai import ChatAPI"
            ],
            "code": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: ChatAPI) -> str:\n    response = chat_api.complete_chat(tagged_input)\n    return response"
        },
        {
            "key_id": 31,
            "fqn": "src/maccarone/preprocessor.py/tagged_output_to_completed_pieces",
            "imports": [
                "from typing import Dict"
            ],
            "code": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:\n    completed_pieces = {}\n    # Example parsing logic to extract and map completed pieces from tagged_output\n    # This is a placeholder for actual implementation details\n    return completed_pieces"
        },
        {
            "key_id": 32,
            "fqn": "src/maccarone/preprocessor.py/pieces_to_final_source",
            "imports": [
                "from typing import List, Dict"
            ],
            "code": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:\n    final_source = ''\n    for piece in raw_pieces:\n        if isinstance(piece, PresentPiece):\n            final_source += piece.content\n        elif piece.id in completed_pieces:\n            final_source += completed_pieces[piece.id]\n        else:\n            raise ValueError(f'Missing completion for piece id {piece.id}')\n    return final_source"
        },
        {
            "key_id": 33,
            "fqn": "src/maccarone/preprocessor.py/preprocess_maccarone",
            "imports": [
                "from typing import Optional",
                "from src.maccarone.openai import ChatAPI"
            ],
            "code": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int] = None) -> str:\n    raw_pieces = raw_source_to_pieces(raw_source, block_at_line)\n    tagged_input = raw_pieces_to_tagged_input(raw_pieces)\n    tagged_output = tagged_input_to_tagged_output(tagged_input, chat_api)\n    completed_pieces = tagged_output_to_completed_pieces(tagged_output)\n    final_source = pieces_to_final_source(raw_pieces, completed_pieces)\n    return final_source"
        },
        {
            "key_id": 34,
            "fqn": "src/maccarone/openai.py/complete_chat",
            "imports": [
                "from typing import List, Dict, Callable"
            ],
            "code": "def complete_chat(messages: List[Dict[str, str]], model = 'gpt-4', on_token: Callable[[int], None] = lambda p: None) -> str:\n    # Assuming a mock implementation for the interaction with OpenAI's API\n    response = 'Mocked response based on the input messages and model'\n    on_token(len(response))\n    return response"
        },
        {
            "key_id": 35,
            "fqn": "src/maccarone/openai.py/ChatAPI/complete_chat",
            "imports": [
                "from typing import List, Dict"
            ],
            "code": "class ChatAPI:\n    def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model = 'gpt-4') -> str:\n        # Assuming a mock implementation for handling chat completion\n        response = 'Mocked chat completion based on chat_name, messages, and model'\n        return response"
        },
        {
            "key_id": 38,
            "fqn": "src/maccarone/scripts/preprocess.py/parse_args",
            "imports": [
                "import argparse"
            ],
            "code": "def parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser(description='Process the arguments for Maccarone preprocessing.')\n    parser.add_argument('--path', type=str, help='Path to the source file or directory')\n    parser.add_argument('--print', action='store_true', help='Print the processed output instead of rewriting the file')\n    parser.add_argument('--rewrite', action='store_true', help='Rewrite the source file with the processed output')\n    parser.add_argument('--suffix', type=str, default='.py', help='File suffix to filter when processing a directory')\n    parser.add_argument('--block_at_line', type=int, help='Process a specific block starting at the given line number')\n    return parser.parse_args()"
        },
        {
            "key_id": 36,
            "fqn": "src/maccarone/scripts/preprocess.py/preprocess",
            "imports": [
                "import logging",
                "from src.maccarone.preprocessor import preprocess_maccarone",
                "from src.maccarone.openai import ChatAPI"
            ],
            "code": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:\n    logger = logging.getLogger(__name__)\n    logger.info('Preprocessing file: %s', mn_path)\n    chat_api = ChatAPI()\n    try:\n        processed_source = preprocess_maccarone(mn_path, chat_api, block_at_line)\n        if rewrite:\n            with open(mn_path, 'w') as f:\n                f.write(processed_source)\n        if print_:\n            print(processed_source)\n    except Exception as e:\n        logger.error('Error during preprocessing: %s', e)\n        raise"
        },
        {
            "key_id": 37,
            "fqn": "src/maccarone/scripts/preprocess.py/main",
            "imports": [
                "import argparse",
                "import logging",
                "from src.maccarone.scripts.preprocess import preprocess"
            ],
            "code": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int] = None) -> None:\n    logger = logging.getLogger(__name__)\n    logger.info('Starting main preprocessing routine')\n    preprocess(path, print_, rewrite, block_at_line)"
        },
        {
            "key_id": 39,
            "fqn": "src/maccarone/scripts/preprocess.py/script_main",
            "imports": [
                "import argparse",
                "from src.maccarone.scripts.preprocess import main",
                "import sys"
            ],
            "code": "def script_main():\n    parser = argparse.ArgumentParser(description='Preprocess files with Maccarone.')\n    parser.add_argument('path', type=str, help='Path to the file or directory to preprocess')\n    parser.add_argument('--print', action='store_true', help='Print the processed output instead of rewriting the file')\n    parser.add_argument('--rewrite', action='store_true', help='Rewrite the source file with the processed output')\n    parser.add_argument('--suffix', type=str, default='.py', help='File suffix to filter by when preprocessing a directory')\n    parser.add_argument('--block-at-line', type=int, default=None, help='Specific line at which to block and wait for input')\n    args = parser.parse_args()\n    try:\n        main(args.path, args.print, args.rewrite, args.suffix, args.block_at_line)\n    except Exception as e:\n        sys.stderr.write(f'Error: {e}\\n')\n        sys.exit(1)"
        },
        {
            "key_id": 4,
            "fqn": "examples/todo.py/load_todos",
            "imports": [
                "import json",
                "from examples.todo import Todo"
            ],
            "code": "def load_todos() -> list[Todo]:\n    try:\n        with open('todos.json', 'r') as f:\n            todos_data = json.load(f)\n        todos = [Todo(**todo) for todo in todos_data]\n        return todos\n    except FileNotFoundError:\n        return []"
        },
        {
            "key_id": 5,
            "fqn": "examples/todo.py/save_todos",
            "imports": [
                "import json",
                "from dataclasses import asdict"
            ],
            "code": "def save_todos(todos: list[Todo]) -> None:\n    with open('todos.json', 'w') as f:\n        json.dump([asdict(todo) for todo in todos], f)"
        },
        {
            "key_id": 6,
            "fqn": "examples/todo.py/add_todo",
            "imports": [
                "from examples.todo import load_todos",
                "from examples.todo import save_todos",
                "from examples.todo import Todo"
            ],
            "code": "def add_todo(description):\n    todos = load_todos()\n    max_id = max([todo.id for todo in todos], default=0) + 1\n    new_todo = Todo(description, 'not done', max_id)\n    todos.append(new_todo)\n    save_todos(todos)"
        },
        {
            "key_id": 7,
            "fqn": "examples/todo.py/remove_todo",
            "imports": [
                "from examples.todo import load_todos",
                "from examples.todo import save_todos"
            ],
            "code": "def remove_todo(id):\n    todos = load_todos()\n    todos = [todo for todo in todos if todo.id != id]\n    save_todos(todos)"
        },
        {
            "key_id": 8,
            "fqn": "examples/todo.py/print_todos",
            "imports": [
                "from examples.todo import load_todos"
            ],
            "code": "def print_todos():\n    todos = load_todos()\n    for todo in todos:\n        print(f'ID: {todo.id}, Description: {todo.description}, Status: {todo.status}')"
        },
        {
            "key_id": 9,
            "fqn": "examples/todo.py/main",
            "imports": [
                "import argparse",
                "from examples.todo import add_todo",
                "from examples.todo import remove_todo",
                "from examples.todo import print_todos"
            ],
            "code": "def main():\n    parser = argparse.ArgumentParser(description='Manage your todos.')\n    parser.add_argument('--add', type=str, help='Add a new todo')\n    parser.add_argument('--remove', type=int, help='Remove a todo by ID')\n    parser.add_argument('--print', action='store_true', help='Print all todos')\n    args = parser.parse_args()\n\n    if args.add:\n        add_todo(args.add)\n    elif args.remove is not None:\n        remove_todo(args.remove)\n    elif args.print:\n        print_todos()\n\nif __name__ == '__main__':\n    main()"
        },
        {
            "key_id": 0,
            "fqn": "examples/file_sizes_ext.py/main",
            "imports": [
                "import argparse",
                "import os"
            ],
            "code": "def main(path: str, extension: str | None = None):\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    if extension:\n        filenames = [f for f in filenames if f.endswith(extension)]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(fn, size)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='List the size of files in a directory, optionally filtered by extension.')\n    parser.add_argument('path', type=str, help='Path to directory')\n    parser.add_argument('--extension', type=str, help='File extension to filter by', default=None)\n    args = parser.parse_args()\n    main(args.path, args.extension)"
        },
        {
            "key_id": 10,
            "fqn": "examples/file_sizes.py/main",
            "imports": [
                "import os",
                "import argparse"
            ],
            "code": "def main(path: str):\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(fn, size)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='List the size of files in a directory.')\n    parser.add_argument('path', type=str, help='Directory path to list files from')\n    args = parser.parse_args()\n    main(args.path)"
        },
        {
            "key_id": 1,
            "fqn": "examples/add.py/add_two_numbers",
            "imports": [],
            "code": "def add_two_numbers(x, y):\n    return x + y"
        },
        {
            "key_id": 2,
            "fqn": "examples/fizzbuzz.py/main",
            "imports": [
                "import argparse"
            ],
            "code": "def main(n: int):\n    for i in range(1, n + 1):\n        if i % 15 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Play FizzBuzz up to a given number.')\n    parser.add_argument('n', type=int, help='Number to play FizzBuzz up to')\n    args = parser.parse_args()\n    main(args.n)"
        }
    ]
}