{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_app_context.py",
            "relative_path": "nest/core/pynest_app_context.py",
            "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
            "signature": "def is_initialized(self):",
            "comment": "Property to check if the application context is initialized.\n\nReturns:\n    bool: True if the application context is initialized, False otherwise.",
            "comment_free_code": "@property\ndef is_initialized(self):\n    \n    return self._is_initialized",
            "start_lineno": 30,
            "end_lineno": 37,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ],
                "PyNestApplicationContext": [
                    "_is_initialized = False",
                    "_module_compiler = ModuleCompiler()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 1,
            "gen_code": "def is_initialized(self, value: bool):\n        if not isinstance(value, bool):\n            raise ValueError('Value must be a boolean')\n        self._is_initialized = value",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_app_context.py",
            "relative_path": "nest/core/pynest_app_context.py",
            "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/init",
            "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
            "signature": "def init(self):",
            "comment": "Initializes the application context. If the context is already initialized, it returns itself.\n\nReturns:\n    PyNestApplicationContext: The initialized application context.",
            "comment_free_code": "def init(self):\n    \n    if self._is_initialized:\n        return self\n    self._is_initialized = True\n    return self",
            "start_lineno": 49,
            "end_lineno": 60,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ],
                "PyNestApplicationContext": [
                    "_is_initialized = False",
                    "_module_compiler = ModuleCompiler()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 2,
            "gen_code": "class PyNestApplicationContext:\n    _is_initialized = False\n    _module_compiler = ModuleCompiler()\n\n    def __init__(self, container: PyNestContainer, context_module: Union[Type, None] = None):\n        self.container = container\n        self.context_module = context_module\n        self._is_initialized = False",
            "gen_import": [
                "from typing import Type, Union",
                "from nest.core.pynest_container import PyNestContainer",
                "from nest.core.module_compiler import ModuleCompiler"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_app_context.py",
            "relative_path": "nest/core/pynest_app_context.py",
            "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/__init__",
            "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
            "signature": "def __init__(self, container: PyNestContainer, context_module: Union[Module, None] = None):",
            "comment": "Constructor for the PyNestApplicationContext.\n\nArgs:\n    container (PyNestContainer): The container for the application.\n    context_module (Union[Module, None], optional): The initial context module of the application.",
            "comment_free_code": "def __init__(self, container: PyNestContainer, context_module: Union[Module, None]=None):\n    \n    self.container = container\n    self.context_module: Module = context_module\n    self.logger = logging.getLogger(PyNestApplicationContext.__name__)",
            "start_lineno": 62,
            "end_lineno": 74,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ],
                "PyNestApplicationContext": [
                    "_is_initialized = False",
                    "_module_compiler = ModuleCompiler()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 3,
            "gen_code": "class PyNestApplicationContext:\n    _is_initialized = False\n    _module_compiler = ModuleCompiler()\n\n    def __init__(self, container: PyNestContainer, context_module: Union[Type, None] = None):\n        self.container = container\n        self.context_module = context_module\n        self._is_initialized = False",
            "gen_import": [
                "from typing import Union, Type",
                "from nest.core.pynest_container import PyNestContainer",
                "from nest.core.module_compiler import ModuleCompiler"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_app_context.py",
            "relative_path": "nest/core/pynest_app_context.py",
            "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/select_context_module",
            "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
            "signature": "def select_context_module(self):",
            "comment": "Selects the first module from the container as the context module.",
            "comment_free_code": "def select_context_module(self):\n    \n    modules = self.container.modules.values()\n    self.context_module = next(iter(modules), None)",
            "start_lineno": 76,
            "end_lineno": 81,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ],
                "PyNestApplicationContext": [
                    "_is_initialized = False",
                    "_module_compiler = ModuleCompiler()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 4,
            "gen_code": "def select_context_module(self):\n        if self.context_module is not None:\n            return self.context_module\n        raise ValueError('No context module defined')",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_app_context.py",
            "relative_path": "nest/core/pynest_app_context.py",
            "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/select",
            "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
            "signature": "def select(self, module: T) -> T:",
            "comment": "Selects a specific module as the current context module based on the provided module class - The selected Module is the AppModule that contains all the application's graph.\n\nArgs:\n    module (Module): The module class to select.\n\nReturns:\n    PyNestApplicationContext: A new application context with the selected module.\n\nRaises:\n    UnknownModuleException: If the specified module is not found in the application's modules.",
            "comment_free_code": "def select(self, module: T) -> T:\n    \n    modules_container = self.container.modules\n    module_token_factory = self.container.module_token_factory\n    metadata = self._module_compiler.extract_metadata(module)\n    token = module_token_factory.create(metadata['type'], metadata['dynamic_metadata'])\n    selected_module = modules_container.get(token)\n    if selected_module is None:\n        raise UnknownModuleException()\n    return PyNestApplicationContext(self.container, selected_module)",
            "start_lineno": 83,
            "end_lineno": 107,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")"
                ],
                "PyNestApplicationContext": [
                    "_is_initialized = False",
                    "_module_compiler = ModuleCompiler()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_app_context.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_app_context.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": true,
            "keyid": 5,
            "gen_code": "T = TypeVar('T')\n\n    def select(self, module: Type[T]) -> T:\n        if not self._is_initialized:\n            raise RuntimeError('Application context is not initialized')\n        return self.container.get_instance(module)",
            "gen_import": [
                "from typing import TypeVar, Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_factory.py",
            "relative_path": "nest/core/pynest_factory.py",
            "fqn_list": "nest/core/pynest_factory.py/PyNestFactory/create",
            "class": "nest/core/pynest_factory.py.PyNestFactory",
            "signature": "def create(main_module: Type[ModuleType], **kwargs) -> PyNestApp:",
            "comment": "Create a PyNest application with the specified main module class.\n\nArgs:\n    main_module (ModuleType): The main module for the PyNest application.\n    **kwargs: Additional keyword arguments for the FastAPI server.\n\nReturns:\n    PyNestApp: The created PyNest application.",
            "comment_free_code": "@staticmethod\ndef create(main_module: Type[ModuleType], **kwargs) -> PyNestApp:\n    \n    container = PyNestContainer()\n    container.add_module(main_module)\n    http_server = PyNestFactory._create_server(**kwargs)\n    return PyNestApp(container, http_server)",
            "start_lineno": 16,
            "end_lineno": 30,
            "local_variables": {
                "module": [
                    "ModuleType = TypeVar(\"ModuleType\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_factory.py",
                    "from nest.core.pynest_application import PyNestApp",
                    "nest.core.pynest_application.PyNestApp"
                ],
                [
                    "nest/core/pynest_factory.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_factory.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_factory.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/pynest_factory.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 6,
            "gen_code": "def create(main_module: Type[ModuleType], **kwargs) -> PyNestApp:\n    container = PyNestContainer()\n    app_context = container.init_app(main_module, **kwargs)\n    return PyNestApp(container, app_context)",
            "gen_import": [
                "from typing import Type",
                "from nest.core.pynest_application import PyNestApp",
                "from nest.core.pynest_container import PyNestContainer"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_factory.py",
            "relative_path": "nest/core/pynest_factory.py",
            "fqn_list": "nest/core/pynest_factory.py/PyNestFactory/_create_server",
            "class": "nest/core/pynest_factory.py.PyNestFactory",
            "signature": "def _create_server(**kwargs) -> FastAPI:",
            "comment": "Create a FastAPI server.\n\nArgs:\n    **kwargs: Additional keyword arguments for the FastAPI server.\n\nReturns:\n    FastAPI: The created FastAPI server.",
            "comment_free_code": "@staticmethod\ndef _create_server(**kwargs) -> FastAPI:\n    \n    return FastAPI(**kwargs)",
            "start_lineno": 33,
            "end_lineno": 43,
            "local_variables": {
                "module": [
                    "ModuleType = TypeVar(\"ModuleType\")"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_factory.py",
                    "from nest.core.pynest_application import PyNestApp",
                    "nest.core.pynest_application.PyNestApp"
                ],
                [
                    "nest/core/pynest_factory.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_factory.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/pynest_factory.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/pynest_factory.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 7,
            "gen_code": "def _create_server(**kwargs) -> FastAPI:\n    app = FastAPI(**kwargs)\n    # Additional server configuration can go here\n    return app",
            "gen_import": [
                "from fastapi import FastAPI"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/__new__",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def __new__(cls):",
            "comment": "Create a singleton instance of PyNestContainer.",
            "comment_free_code": "def __new__(cls):\n    \n    if cls._instance is None:\n        cls._instance = super(PyNestContainer, cls).__new__(cls)\n    return cls._instance",
            "start_lineno": 34,
            "end_lineno": 38,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 8,
            "gen_code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(PyNestContainer, cls).__new__(cls)\n            cls._dependencies = {}\n        return cls._instance",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/__init__",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def __init__(self):",
            "comment": "Initialize the PyNestContainer.",
            "comment_free_code": "def __init__(self):\n    \n    if not hasattr(self, '_initialized'):\n        self.logger = logging.getLogger('pynest')\n        self._injector = Injector()\n        self._global_modules = set()\n        self._modules = ModulesContainer()\n        self._module_token_factory = ModuleTokenFactory()\n        self._module_compiler = ModuleCompiler(self._module_token_factory)\n        self._modules_metadata = {}\n        self._initialized = True",
            "start_lineno": 40,
            "end_lineno": 50,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 9,
            "gen_code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self",
            "gen_import": [
                "from typing import Any, List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/modules",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def modules(self):",
            "comment": null,
            "comment_free_code": "@property\ndef modules(self):\n    return self._modules",
            "start_lineno": 53,
            "end_lineno": 54,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 10,
            "gen_code": "def modules(self):\n    return self._dependencies.keys()",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/module_token_factory",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def module_token_factory(self):",
            "comment": null,
            "comment_free_code": "@property\ndef module_token_factory(self):\n    return self._module_token_factory",
            "start_lineno": 57,
            "end_lineno": 58,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 11,
            "gen_code": "def module_token_factory(self) -> Any:\n    # This method would generate a unique token for each module\n    # For simplicity, let's assume it returns a simple hash based on module name\n    return hash('module_name')",
            "gen_import": [
                "from typing import Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/modules_metadata",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def modules_metadata(self):",
            "comment": null,
            "comment_free_code": "@property\ndef modules_metadata(self):\n    return self._modules_metadata",
            "start_lineno": 61,
            "end_lineno": 62,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 12,
            "gen_code": "def modules_metadata(self):\n    return {module: metadata for module, metadata in self._dependencies.items() if 'metadata' in metadata}",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/module_compiler",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def module_compiler(self):",
            "comment": null,
            "comment_free_code": "@property\ndef module_compiler(self):\n    return self._module_compiler",
            "start_lineno": 65,
            "end_lineno": 66,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 13,
            "gen_code": "def module_compiler(self):\n    compiled_modules = []\n    for module, metadata in self._dependencies.items():\n        if 'metadata' in metadata:\n            compiled_modules.append((module, metadata['metadata']))\n    return compiled_modules",
            "gen_import": [
                "from typing import List, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/get_instance",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def get_instance(self, dependency: TProvider, provider: Optional[Union[TProvider, TController]] = None):",
            "comment": null,
            "comment_free_code": "def get_instance(self, dependency: TProvider, provider: Optional[Union[TProvider, TController]]=None):\n    try:\n        self._injector.binder.bind(dependency, scope=singleton)\n        instance = self._injector.get(dependency)\n        self.logger.info(click.style(dependency.__name__ + ' Detected ', fg='blue'))\n    except UnknownProvider:\n        raise Exception(f'Unknown provider {provider}')\n    return instance",
            "start_lineno": 68,
            "end_lineno": 79,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 14,
            "gen_code": "def get_instance(self, dependency: Type[TProvider], provider: Optional[Union[Type[TProvider], Type[TController]]] = None):\n    if provider and provider in self._dependencies:\n        return self._dependencies[provider]['instance']\n    elif dependency in self._dependencies:\n        return self._dependencies[dependency]['instance']\n    else:\n        raise ValueError(f'No instance found for dependency: {dependency}')",
            "gen_import": [
                "from typing import Type, Optional, Union"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_module",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_module(self, metaclass) -> dict:",
            "comment": "Add a module to the container.\n\nArgs:\n    metaclass: The metaclass of the module to be added.\n\nReturns:\n    dict: A dictionary containing the module reference and a\n    boolean flag indicating if it was newly inserted.",
            "comment_free_code": "def add_module(self, metaclass) -> dict:\n    \n    module_factory = self._module_compiler.compile(metaclass)\n    token = module_factory.token\n    if self._modules.has(token):\n        return {'module_ref': self.modules.get(token), 'inserted': False}\n    return {'module_ref': self.register_module(module_factory), 'inserted': True}",
            "start_lineno": 81,
            "end_lineno": 96,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                34
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 15,
            "gen_code": "def add_module(self, metaclass) -> dict:\n    module_name = metaclass.__name__\n    if module_name not in self._dependencies:\n        self._dependencies[module_name] = {'instance': metaclass(), 'metadata': {}}\n    return self._dependencies[module_name]",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/register_module",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def register_module(self, module_factory: ModuleFactory) -> Module:",
            "comment": "Register a module in the container.\n\nThis method creates a module reference from the provided module factory, registers\nthe module within the container, adds metadata, imports, providers, and controllers\nassociated with the module, and logs the detection of the module.\n\nArgs:\n    module_factory (ModuleFactory): The factory object that contains the type and metadata\n                                    for creating the module.\n\nReturns:\n    Module: The module reference that has been registered in the container.",
            "comment_free_code": "def register_module(self, module_factory: ModuleFactory) -> Module:\n    \n    module_ref = Module(module_factory.type, self)\n    module_ref.token = module_factory.token\n    self._modules[module_factory.token] = module_ref\n    self.add_metadata(module_factory.token, module_factory.dynamic_metadata)\n    self.add_import(module_factory.token)\n    self.add_providers(self._get_providers(module_factory.token), module_factory.token)\n    self.add_controllers(self._get_controllers(module_factory.token), module_factory.token)\n    self.logger.info(click.style(module_factory.type.__name__ + ' Detected ', fg='green'))\n    return module_ref",
            "start_lineno": 98,
            "end_lineno": 131,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 16,
            "gen_code": "def register_module(self, module_factory: Type[ModuleFactory]) -> Type[Module]:\n    module_instance = module_factory()\n    module_name = module_factory.__name__\n    if module_name not in self._dependencies:\n        self._dependencies[module_name] = {'instance': module_instance, 'metadata': {}}\n    else:\n        raise ValueError(f'Module {module_name} is already registered')\n    return module_instance",
            "gen_import": [
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_metadata",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_metadata(self, token: str, module_metadata) -> None:",
            "comment": "Add metadata for a module.",
            "comment_free_code": "def add_metadata(self, token: str, module_metadata) -> None:\n    \n    if module_metadata:\n        self._modules_metadata[token] = module_metadata",
            "start_lineno": 133,
            "end_lineno": 136,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 17,
            "gen_code": "def add_metadata(self, token: str, module_metadata) -> None:\n    if token not in self._dependencies:\n        self._dependencies[token] = {'metadata': module_metadata}\n    else:\n        self._dependencies[token]['metadata'].update(module_metadata)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_import",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_import(self, token: str):",
            "comment": "Add imports for a module.",
            "comment_free_code": "def add_import(self, token: str):\n    \n    if not self.modules.has(token):\n        return\n    module_metadata = self._modules_metadata.get(token)\n    module_ref: Module = self.modules.get(token)\n    imports_mod: List[Any] = module_metadata.get('imports')\n    self.add_modules(imports_mod)\n    module_ref.add_imports(imports_mod)",
            "start_lineno": 138,
            "end_lineno": 146,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                34
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 18,
            "gen_code": "def add_import(self, token: str):\n    if 'imports' not in self._dependencies[token]:\n        self._dependencies[token]['imports'] = []\n    self._dependencies[token]['imports'].append(token)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_modules",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_modules(self, modules: List[Any]) -> None:",
            "comment": "Add multiple modules to the container.",
            "comment_free_code": "def add_modules(self, modules: List[Any]) -> None:\n    \n    if modules:\n        for module in modules:\n            self.add_module(module)",
            "start_lineno": 148,
            "end_lineno": 152,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                39
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/add_module"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 19,
            "gen_code": "def add_modules(self, modules: List[Any]) -> None:\n    for module in modules:\n        self.add_module(module)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_providers",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_providers(self, providers: List[Any], module_token: str) -> None:",
            "comment": "Add multiple providers to a module.",
            "comment_free_code": "def add_providers(self, providers: List[Any], module_token: str) -> None:\n    \n    for provider in providers:\n        self.add_provider(module_token, provider)",
            "start_lineno": 154,
            "end_lineno": 157,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 20,
            "gen_code": "def add_providers(self, providers: List[Any], module_token: str) -> None:\n    if 'providers' not in self._dependencies[module_token]:\n        self._dependencies[module_token]['providers'] = []\n    self._dependencies[module_token]['providers'].extend(providers)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_provider",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_provider(self, token: str, provider):",
            "comment": "Add a provider to a module.",
            "comment_free_code": "def add_provider(self, token: str, provider):\n    \n    module_ref: Module = self.modules[token]\n    if not provider:\n        raise CircularDependencyException(module_ref.metatype)\n    if not module_ref:\n        raise UnknownModuleException()\n    if not hasattr(provider, INJECTABLE_TOKEN):\n        error_message = f\"\\n            {click.style(provider.__name__, fg='red')} is not injectable. \\n            To make {provider.__name__} injectable, apply the {click.style('@Injectable decorator', fg='green')}\\n            to the class definition, or remove {click.style(provider.__name__, fg='red')} from the provider array\\n            of the Module class. Please check your code and ensure that the decorator is correctly applied to the\\n            class.\\n            \"\n        raise NoneInjectableException(error_message)\n    for (dependency_name, dependency_instance) in getattr(provider, DEPENDENCIES).items():\n        try:\n            instance = self.get_instance(dependency_instance, provider)\n            setattr(provider, dependency_name, instance)\n        except Exception as e:\n            self.logger.error(e)\n            raise e\n    module_ref.add_provider(provider)",
            "start_lineno": 159,
            "end_lineno": 188,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                38
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules",
                    "nest/core/pynest_container.py/PyNestContainer/get_instance"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 21,
            "gen_code": "def add_provider(self, token: str, provider):\n    if 'providers' not in self._dependencies[token]:\n        self._dependencies[token]['providers'] = [provider]\n    else:\n        if provider not in self._dependencies[token]['providers']:\n            self._dependencies[token]['providers'].append(provider)",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/_get_providers",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def _get_providers(self, token: str) -> List[Any]:",
            "comment": "Get providers from the module metadata.",
            "comment_free_code": "def _get_providers(self, token: str) -> List[Any]:\n    \n    return self.modules_metadata[token]['providers']",
            "start_lineno": 190,
            "end_lineno": 192,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                36
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules_metadata"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 22,
            "gen_code": "def _get_providers(self, token: str) -> List[Any]:\n    if token in self._dependencies:\n        return self._dependencies[token]['providers']\n    else:\n        return []",
            "gen_import": [
                "from typing import List, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_controllers",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_controllers(self, controllers: List[Any], module_token: str) -> None:",
            "comment": "Add multiple controllers to a module.",
            "comment_free_code": "def add_controllers(self, controllers: List[Any], module_token: str) -> None:\n    \n    for controller in controllers:\n        self._add_controller(module_token, controller)",
            "start_lineno": 194,
            "end_lineno": 197,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 23,
            "gen_code": "def add_controllers(self, controllers: List[Any], module_token: str) -> None:\n    if module_token not in self._dependencies:\n        self._dependencies[module_token] = {'controllers': [], 'providers': []}\n    for controller in controllers:\n        self._dependencies[module_token]['controllers'].append(controller)",
            "gen_import": [
                "from typing import List, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/_add_controller",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def _add_controller(self, token: str, controller: TController) -> None:",
            "comment": "Add a controller to a module.",
            "comment_free_code": "def _add_controller(self, token: str, controller: TController) -> None:\n    \n    if not self.modules.has(token):\n        raise UnknownModuleException()\n    module_ref: Module = self.modules[token]\n    module_ref.add_controller(controller)\n    if hasattr(controller, DEPENDENCIES):\n        for (provider_name, provider_type) in getattr(controller, DEPENDENCIES).items():\n            instance = self.get_instance(provider_type, controller)\n            setattr(controller, provider_name, instance)",
            "start_lineno": 199,
            "end_lineno": 210,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                38
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules",
                    "nest/core/pynest_container.py/PyNestContainer/get_instance"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 24,
            "gen_code": "def _add_controller(self, token: str, controller: Type) -> None:\n    if token not in self._dependencies:\n        self._dependencies[token] = {'controllers': [], 'providers': []}\n    self._dependencies[token]['controllers'].append(controller)",
            "gen_import": [
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/_get_controllers",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def _get_controllers(self, token: str) -> List[Any]:",
            "comment": "Get controllers from the module metadata.",
            "comment_free_code": "def _get_controllers(self, token: str) -> List[Any]:\n    \n    return self.modules_metadata[token]['controllers']",
            "start_lineno": 212,
            "end_lineno": 214,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                36
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules_metadata"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 25,
            "gen_code": "def _get_controllers(self, token: str) -> List[Any]:\n    if token in self._dependencies:\n        return self._dependencies[token]['controllers']\n    else:\n        return []",
            "gen_import": [
                "from typing import List, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/clear",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def clear(self):",
            "comment": "Clear all modules from the container.",
            "comment_free_code": "def clear(self):\n    \n    self.modules.clear()",
            "start_lineno": 216,
            "end_lineno": 218,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                34
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 26,
            "gen_code": "def clear(self):\n    self._dependencies = {}",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_related_module",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def add_related_module(self, related_module, token: str) -> None:",
            "comment": null,
            "comment_free_code": "def add_related_module(self, related_module, token: str) -> None:\n    if not self.modules.has(token):\n        return\n    module_ref = self.modules.get(token)\n    compile_related_module = self.module_compiler.compile(related_module)\n    related = self.modules.get(compile_related_module.token)\n    module_ref.add_import(related)",
            "start_lineno": 221,
            "end_lineno": 227,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                37
            ],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer/modules",
                    "nest/core/pynest_container.py/PyNestContainer/module_compiler"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 27,
            "gen_code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self\n\n    def add_related_module(self, related_module, token: str) -> None:\n        if token not in self._dependencies:\n            self._dependencies[token] = {'related_modules': []}\n        self._dependencies[token]['related_modules'].append(related_module)\n        print(f'Added related module {related_module} to {token}')",
            "gen_import": [
                "from typing import Any, List"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_container.py",
            "relative_path": "nest/core/pynest_container.py",
            "fqn_list": "nest/core/pynest_container.py/PyNestContainer/get_module_by_key",
            "class": "nest/core/pynest_container.py.PyNestContainer",
            "signature": "def get_module_by_key(self, module_key: str) -> Module:",
            "comment": null,
            "comment_free_code": "def get_module_by_key(self, module_key: str) -> Module:\n    return self._modules[module_key]",
            "start_lineno": 231,
            "end_lineno": 232,
            "local_variables": {
                "module": [
                    "TController = type(\"TController\", (), {})",
                    "TProvider = type(\"TProvider\", (), {})"
                ],
                "PyNestContainer": [
                    "_instance = None",
                    "_dependencies = None"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import CircularDependencyException",
                    "nest.common.exceptions.CircularDependencyException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import NoneInjectableException",
                    "nest.common.exceptions.NoneInjectableException"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import Module",
                    "nest.common.module.Module"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleCompiler",
                    "nest.common.module.ModuleCompiler"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleFactory",
                    "nest.common.module.ModuleFactory"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModulesContainer",
                    "nest.common.module.ModulesContainer"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.module import ModuleTokenFactory",
                    "nest.common.module.ModuleTokenFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_container.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/pynest_container.py",
                    "import click",
                    "click"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import Injector",
                    "injector.Injector"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import UnknownProvider",
                    "injector.UnknownProvider"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from injector import singleton",
                    "injector.singleton"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/pynest_container.py",
                    "from nest.common.exceptions import UnknownModuleException",
                    "nest.common.exceptions.UnknownModuleException"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 28,
            "gen_code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self\n\n    def get_module_by_key(self, module_key: str) -> Any:\n        module = self._dependencies.get(module_key)\n        if not module:\n            raise KeyError(f'Module with key {module_key} not found')\n        return module",
            "gen_import": [
                "from typing import Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_application.py",
            "relative_path": "nest/core/pynest_application.py",
            "fqn_list": "nest/core/pynest_application.py/PyNestApp/is_listening",
            "class": "nest/core/pynest_application.py.PyNestApp",
            "signature": "def is_listening(self) -> bool:",
            "comment": null,
            "comment_free_code": "@property\ndef is_listening(self) -> bool:\n    return self._is_listening",
            "start_lineno": 19,
            "end_lineno": 20,
            "local_variables": {
                "PyNestApp": [
                    "_is_listening = False"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_application.py",
                    "from nest.common.route_resolver import RoutesResolver",
                    "nest.common.route_resolver.RoutesResolver"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_app_context import PyNestApplicationContext",
                    "nest.core.pynest_app_context.PyNestApplicationContext"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_application.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 29,
            "gen_code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def is_listening(self) -> bool:\n        return self._is_listening",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_application.py",
            "relative_path": "nest/core/pynest_application.py",
            "fqn_list": "nest/core/pynest_application.py/PyNestApp/__init__",
            "class": "nest/core/pynest_application.py.PyNestApp",
            "signature": "def __init__(self, container: PyNestContainer, http_server: FastAPI):",
            "comment": "Initialize the PyNestApp with the given container and HTTP server.\n\nArgs:\n    container (PyNestContainer): The PyNestContainer container instance.\n    http_server (FastAPI): The FastAPI server instance.",
            "comment_free_code": "def __init__(self, container: PyNestContainer, http_server: FastAPI):\n    \n    self.container = container\n    self.http_server = http_server\n    super().__init__(self.container)\n    self.routes_resolver = RoutesResolver(self.container, self.http_server)\n    self.select_context_module()\n    self.register_routes()",
            "start_lineno": 22,
            "end_lineno": 35,
            "local_variables": {
                "PyNestApp": [
                    "_is_listening = False"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                26,
                31
            ],
            "local_import": [
                [
                    "nest/core/pynest_application.py",
                    "from nest.common.route_resolver import RoutesResolver",
                    "nest.common.route_resolver.RoutesResolver"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_app_context import PyNestApplicationContext",
                    "nest.core.pynest_app_context.PyNestApplicationContext"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_application.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "nest/core/pynest_app_context.py/PyNestApplicationContext/select_context_module"
                ],
                "Class Dependency": [
                    "nest/core/pynest_container.py/PyNestContainer"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 30,
            "gen_code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()",
            "gen_import": [
                "from fastapi import FastAPI",
                "from nest.core.pynest_container import PyNestContainer"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_application.py",
            "relative_path": "nest/core/pynest_application.py",
            "fqn_list": "nest/core/pynest_application.py/PyNestApp/use",
            "class": "nest/core/pynest_application.py.PyNestApp",
            "signature": "def use(self, middleware: type, **options) -> \"PyNestApp\":",
            "comment": "Add middleware to the FastAPI server.\n\nArgs:\n    middleware (type): The middleware class.\n    **options (Any): Additional options for the middleware.\n\nReturns:\n    PyNestApp: The current instance of PyNestApp, allowing method chaining.",
            "comment_free_code": "def use(self, middleware: type, **options: Any) -> 'PyNestApp':\n    \n    self.http_server.add_middleware(middleware, **options)\n    return self",
            "start_lineno": 37,
            "end_lineno": 49,
            "local_variables": {
                "PyNestApp": [
                    "_is_listening = False"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_application.py",
                    "from nest.common.route_resolver import RoutesResolver",
                    "nest.common.route_resolver.RoutesResolver"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_app_context import PyNestApplicationContext",
                    "nest.core.pynest_app_context.PyNestApplicationContext"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_application.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 31,
            "gen_code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def use(self, middleware: Type, **options) -> 'PyNestApp':\n        # Assuming middleware is a class\n        self.http_server.middleware('http')(middleware(**options))\n        return self",
            "gen_import": [
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_application.py",
            "relative_path": "nest/core/pynest_application.py",
            "fqn_list": "nest/core/pynest_application.py/PyNestApp/get_server",
            "class": "nest/core/pynest_application.py.PyNestApp",
            "signature": "def get_server(self) -> FastAPI:",
            "comment": "Get the FastAPI server instance.\n\nReturns:\n    FastAPI: The FastAPI server instance.",
            "comment_free_code": "def get_server(self) -> FastAPI:\n    \n    return self.http_server",
            "start_lineno": 51,
            "end_lineno": 58,
            "local_variables": {
                "PyNestApp": [
                    "_is_listening = False"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_application.py",
                    "from nest.common.route_resolver import RoutesResolver",
                    "nest.common.route_resolver.RoutesResolver"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_app_context import PyNestApplicationContext",
                    "nest.core.pynest_app_context.PyNestApplicationContext"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_application.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 32,
            "gen_code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def get_server(self) -> FastAPI:\n        return self.http_server",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/pynest_application.py",
            "relative_path": "nest/core/pynest_application.py",
            "fqn_list": "nest/core/pynest_application.py/PyNestApp/register_routes",
            "class": "nest/core/pynest_application.py.PyNestApp",
            "signature": "def register_routes(self):",
            "comment": "Register the routes using the RoutesResolver.",
            "comment_free_code": "def register_routes(self):\n    \n    self.routes_resolver.register_routes()",
            "start_lineno": 60,
            "end_lineno": 64,
            "local_variables": {
                "PyNestApp": [
                    "_is_listening = False"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/pynest_application.py",
                    "from nest.common.route_resolver import RoutesResolver",
                    "nest.common.route_resolver.RoutesResolver"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_app_context import PyNestApplicationContext",
                    "nest.core.pynest_app_context.PyNestApplicationContext"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from nest.core.pynest_container import PyNestContainer",
                    "nest.core.pynest_container.PyNestContainer"
                ]
            ],
            "third_import": [
                [
                    "nest/core/pynest_application.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/pynest_application.py",
                    "from fastapi import FastAPI",
                    "fastapi.FastAPI"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 33,
            "gen_code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def register_routes(self):\n        for module in self.container.modules.values():\n            for controller in module.controllers:\n                router = APIRouter()\n                controller_cls = controller()\n                controller_cls.add_routes(router)\n                self.http_server.include_router(router)",
            "gen_import": [
                "from fastapi import APIRouter"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/injectable.py",
            "relative_path": "nest/core/decorators/injectable.py",
            "fqn_list": "nest/core/decorators/injectable.py/Injectable",
            "class": null,
            "signature": "def Injectable(target_class: Optional[Type] = None, *args, **kwargs) -> Callable:",
            "comment": "Decorator to mark a class as injectable and handle its dependencies.\n\nArgs:\n    target_class (Type, optional): The class to be decorated.\n\nReturns:\n    Callable: The decorator function.",
            "comment_free_code": "def Injectable(target_class: Optional[Type]=None, *args, **kwargs) -> Callable:\n    \n\n    def decorator(decorated_class: Type) -> Type:\n        \n        if '__init__' not in decorated_class.__dict__:\n\n            def init_method(self, *args, **kwargs):\n                pass\n            decorated_class.__init__ = init_method\n        dependencies = parse_dependencies(decorated_class)\n        setattr(decorated_class, DEPENDENCIES, dependencies)\n        setattr(decorated_class, INJECTABLE_TOKEN, True)\n        setattr(decorated_class, INJECTABLE_NAME, decorated_class.__name__)\n        inject(decorated_class)\n        return decorated_class\n    if target_class is not None:\n        return decorator(target_class)\n    return decorator",
            "start_lineno": 7,
            "end_lineno": 49,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/injectable.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/injectable.py",
                    "from injector import inject",
                    "injector.inject"
                ],
                [
                    "nest/core/decorators/injectable.py",
                    "from nest.common.constants import DEPENDENCIES",
                    "nest.common.constants.DEPENDENCIES"
                ],
                [
                    "nest/core/decorators/injectable.py",
                    "from nest.common.constants import INJECTABLE_NAME",
                    "nest.common.constants.INJECTABLE_NAME"
                ],
                [
                    "nest/core/decorators/injectable.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ],
                [
                    "nest/core/decorators/injectable.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/injectable.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/injectable.py",
                    "from typing import Callable",
                    "typing.Callable"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 34,
            "gen_code": "def Injectable(target_class: Optional[Type] = None, *args, **kwargs) -> Callable:\n    def decorator(cls):\n        # Here you can implement dependency injection logic\n        return cls\n    if target_class is None:\n        return decorator\n    else:\n        return decorator(target_class)",
            "gen_import": [
                "from typing import Callable, Optional, Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/Controller",
            "class": null,
            "signature": "def Controller(prefix: Optional[str] = None, tag: Optional[str] = None):",
            "comment": "Decorator that turns a class into a controller, allowing you to define\nroutes using FastAPI decorators.\n\nArgs:\n    prefix (str, optional): The prefix to use for all routes.\n    tag (str, optional): The tag to use for OpenAPI documentation.\n\nReturns:\n    class: The decorated class.",
            "comment_free_code": "def Controller(prefix: Optional[str]=None, tag: Optional[str]=None):\n    \n    route_prefix = process_prefix(prefix, tag)\n\n    def wrapper(cls: Type) -> Type[ClassBasedView]:\n        router = APIRouter(tags=[tag] if tag else None)\n        process_dependencies(cls)\n        set_instance_variables(cls)\n        ensure_init_method(cls)\n        add_routes(cls, router, route_prefix)\n        cls.get_router = classmethod(lambda cls: router)\n        return ClassBasedView(router=router, cls=cls)\n    return wrapper",
            "start_lineno": 10,
            "end_lineno": 46,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 35,
            "gen_code": "def Controller(prefix: Optional[str] = None, tag: Optional[str] = None):\n    def decorator(cls):\n        cls._prefix = prefix\n        cls._tag = tag\n        # Additional setup can be done here\n        return cls\n    return decorator",
            "gen_import": [
                "from typing import Optional"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/process_prefix",
            "class": null,
            "signature": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:",
            "comment": "Process and format the prefix.",
            "comment_free_code": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:\n    \n    if route_prefix is None:\n        if tag_name is None:\n            return None\n        else:\n            route_prefix = tag_name\n    if not route_prefix.startswith('/'):\n        route_prefix = '/' + route_prefix\n    if route_prefix.endswith('/'):\n        route_prefix = route_prefix.rstrip('/')\n    return route_prefix",
            "start_lineno": 49,
            "end_lineno": 63,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": true,
            "keyid": 36,
            "gen_code": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:\n    # Assuming this function processes and returns a formatted prefix\n    if route_prefix:\n        return f'/{route_prefix.strip('/')}'\n    return '/'",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/process_dependencies",
            "class": null,
            "signature": "def process_dependencies(cls: Type) -> None:",
            "comment": "Parse and set dependencies for the class.",
            "comment_free_code": "def process_dependencies(cls: Type) -> None:\n    \n    dependencies = parse_dependencies(cls)\n    setattr(cls, '__dependencies__', dependencies)",
            "start_lineno": 66,
            "end_lineno": 69,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 37,
            "gen_code": "def process_dependencies(cls: Type) -> None:\n    # Here you can implement logic to process and inject dependencies\n    # This is a placeholder for dependency processing logic\n    pass",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/set_instance_variables",
            "class": null,
            "signature": "def set_instance_variables(cls: Type) -> None:",
            "comment": "Set instance variables for the class.",
            "comment_free_code": "def set_instance_variables(cls: Type) -> None:\n    \n    non_dependency_vars = get_instance_variables(cls)\n    for (key, value) in non_dependency_vars.items():\n        setattr(cls, key, value)",
            "start_lineno": 72,
            "end_lineno": 76,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 38,
            "gen_code": "def set_instance_variables(cls: Type) -> None:\n    for name, value in vars(cls).items():\n        if not name.startswith('_') and not callable(value):\n            setattr(cls, name, value)",
            "gen_import": [
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/ensure_init_method",
            "class": null,
            "signature": "def ensure_init_method(cls: Type) -> None:",
            "comment": "Ensure the class has an __init__ method.",
            "comment_free_code": "def ensure_init_method(cls: Type) -> None:\n    \n    if not hasattr(cls, '__init__'):\n        raise AttributeError('Class must have an __init__ method')\n    try:\n        delattr(cls, '__init__')\n    except AttributeError:\n        pass",
            "start_lineno": 79,
            "end_lineno": 86,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 39,
            "gen_code": "def ensure_init_method(cls: Type) -> None:\n    if not hasattr(cls, '__init__'):\n        def __init__(self, *args, **kwargs):\n            super(cls, self).__init__(*args, **kwargs)\n        cls.__init__ = __init__",
            "gen_import": [
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/add_routes",
            "class": null,
            "signature": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:",
            "comment": "Add routes from class methods to the router.",
            "comment_free_code": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:\n    \n    for (method_name, method_function) in cls.__dict__.items():\n        if callable(method_function) and hasattr(method_function, '__http_method__'):\n            validate_method_decorator(method_function, method_name)\n            configure_method_route(method_function, route_prefix)\n            add_route_to_router(router, method_function)",
            "start_lineno": 89,
            "end_lineno": 95,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 40,
            "gen_code": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:\n    for name, method in cls.__dict__.items():\n        if callable(method) and hasattr(method, 'route_info'):\n            route_info = getattr(method, 'route_info')\n            path = route_prefix + route_info.get('path', '')\n            router.add_api_route(path, method, methods=[route_info['method']], tags=[route_info.get('tag', 'default')])",
            "gen_import": [
                "from fastapi import APIRouter",
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/validate_method_decorator",
            "class": null,
            "signature": "def validate_method_decorator(method_function: callable, method_name: str) -> None:",
            "comment": "Validate that the method has a proper HTTP method decorator.",
            "comment_free_code": "def validate_method_decorator(method_function: callable, method_name: str) -> None:\n    \n    if not hasattr(method_function, '__route_path__') or not method_function.__route_path__:\n        raise AssertionError(f'Missing path for method {method_name}')\n    if not isinstance(method_function.__http_method__, HTTPMethod):\n        raise AssertionError(f'Invalid method {method_function.__http_method__}')",
            "start_lineno": 98,
            "end_lineno": 107,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 41,
            "gen_code": "def validate_method_decorator(method_function: Callable, method_name: str) -> None:\n    if not hasattr(method_function, 'route_info'):\n        raise Exception(f'Method {method_name} is missing route_info attribute. Ensure the route decorator is applied.')",
            "gen_import": [
                "from typing import Callable"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/configure_method_route",
            "class": null,
            "signature": "def configure_method_route(method_function: callable, route_prefix: str) -> None:",
            "comment": "Configure the route for the method.",
            "comment_free_code": "def configure_method_route(method_function: callable, route_prefix: str) -> None:\n    \n    if not method_function.__route_path__.startswith('/'):\n        method_function.__route_path__ = '/' + method_function.__route_path__\n    method_function.__route_path__ = route_prefix + method_function.__route_path__ if route_prefix else method_function.__route_path__\n    if method_function.__route_path__ != '/' and method_function.__route_path__.endswith('/'):\n        method_function.__route_path__ = method_function.__route_path__.rstrip('/')",
            "start_lineno": 110,
            "end_lineno": 127,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 42,
            "gen_code": "def configure_method_route(method_function: Callable, route_prefix: str) -> None:\n    if hasattr(method_function, 'route_info'):\n        route_info = getattr(method_function, 'route_info')\n        route_info['path'] = route_prefix + route_info.get('path', '')",
            "gen_import": [
                "from typing import Callable"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/controller.py",
            "relative_path": "nest/core/decorators/controller.py",
            "fqn_list": "nest/core/decorators/controller.py/add_route_to_router",
            "class": null,
            "signature": "def add_route_to_router(router: APIRouter, method_function: callable) -> None:",
            "comment": "Add the configured route to the router.",
            "comment_free_code": "def add_route_to_router(router: APIRouter, method_function: callable) -> None:\n    \n    route_kwargs = {'path': method_function.__route_path__, 'endpoint': method_function, 'methods': [method_function.__http_method__.value], **method_function.__kwargs__}\n    if hasattr(method_function, 'status_code'):\n        route_kwargs['status_code'] = method_function.status_code\n    router.add_api_route(**route_kwargs)",
            "start_lineno": 130,
            "end_lineno": 142,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.class_based_view import class_based_view as ClassBasedView",
                    "nest.core.decorators.class_based_view.class_based_view"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import get_instance_variables",
                    "nest.core.decorators.utils.get_instance_variables"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.utils import parse_dependencies",
                    "nest.core.decorators.utils.parse_dependencies"
                ]
            ],
            "third_import": [
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from typing import Optional",
                    "typing.Optional"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from fastapi.routing import APIRouter",
                    "fastapi.routing.APIRouter"
                ],
                [
                    "nest/core/decorators/controller.py",
                    "from nest.core.decorators.http_method import HTTPMethod",
                    "nest.core.decorators.http_method.HTTPMethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 43,
            "gen_code": "def add_route_to_router(router: APIRouter, method_function: callable) -> None:\n    router.add_api_route(method_function.__route__, method_function, methods=[method_function.__method__])",
            "gen_import": [
                "from fastapi import APIRouter"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/route",
            "class": null,
            "signature": "def route(http_method: HTTPMethod, route_path: Union[str, List[str]] = \"/\", **kwargs):",
            "comment": "Decorator that defines a route for the controller.\n\nArgs:\n    http_method (HTTPMethod): The HTTP method for the route (GET, POST, DELETE, PUT, PATCH).\n    route_path (Union[str, List[str]]): The route path for the route. example: \"/users\"\n    **kwargs: Additional keyword arguments to configure the route.\n\nReturns:\n    function: The decorated function.",
            "comment_free_code": "def route(http_method: HTTPMethod, route_path: Union[str, List[str]]='/', **kwargs):\n    \n\n    def decorator(func):\n        func.__http_method__ = http_method\n        func.__route_path__ = route_path\n        func.__kwargs__ = kwargs\n        return func\n    return decorator",
            "start_lineno": 15,
            "end_lineno": 35,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 44,
            "gen_code": "class HTTPMethod(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    DELETE = 'DELETE'\n    PUT = 'PUT'\n    PATCH = 'PATCH'\n    HEAD = 'HEAD'\n    OPTIONS = 'OPTIONS'\n\ndef route(http_method: HTTPMethod, route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable) -> Callable:\n        if not hasattr(func, '__routes__'):\n            func.__routes__ = []\n        func.__routes__.append((http_method.value, route_path))\n        func.__method__ = http_method.value\n        func.__route__ = route_path\n        return func\n    return decorator",
            "gen_import": [
                "from enum import Enum",
                "from typing import Union, List, Callable, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Get",
            "class": null,
            "signature": "def Get(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Get(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.GET, route_path, **kwargs)",
            "start_lineno": 38,
            "end_lineno": 39,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 45,
            "gen_code": "def Get(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.GET, route_path, **kwargs)",
            "gen_import": [
                "from typing import Union, List, Callable, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Post",
            "class": null,
            "signature": "def Post(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Post(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.POST, route_path, **kwargs)",
            "start_lineno": 42,
            "end_lineno": 43,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 46,
            "gen_code": "def Post(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.POST, route_path, **kwargs)",
            "gen_import": [
                "from typing import Union, List, Callable, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Delete",
            "class": null,
            "signature": "def Delete(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Delete(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.DELETE, route_path, **kwargs)",
            "start_lineno": 46,
            "end_lineno": 47,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 47,
            "gen_code": "def Delete(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.DELETE, route_path, **kwargs)",
            "gen_import": [
                "from typing import Union, List, Callable, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Put",
            "class": null,
            "signature": "def Put(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Put(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.PUT, route_path, **kwargs)",
            "start_lineno": 50,
            "end_lineno": 51,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 48,
            "gen_code": "def Put(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.put, route_path, kwargs))\n        return func\n    return decorator",
            "gen_import": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Patch",
            "class": null,
            "signature": "def Patch(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Patch(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.PATCH, route_path, **kwargs)",
            "start_lineno": 54,
            "end_lineno": 55,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 49,
            "gen_code": "def Patch(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.patch, route_path, kwargs))\n        return func\n    return decorator",
            "gen_import": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Head",
            "class": null,
            "signature": "def Head(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Head(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.HEAD, route_path, **kwargs)",
            "start_lineno": 58,
            "end_lineno": 59,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 50,
            "gen_code": "def Head(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.head, route_path, kwargs))\n        return func\n    return decorator",
            "gen_import": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_method.py",
            "relative_path": "nest/core/decorators/http_method.py",
            "fqn_list": "nest/core/decorators/http_method.py/Options",
            "class": null,
            "signature": "def Options(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:",
            "comment": null,
            "comment_free_code": "def Options(route_path: Union[str, List[str]]='/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.OPTIONS, route_path, **kwargs)",
            "start_lineno": 62,
            "end_lineno": 63,
            "local_variables": {
                "HTTPMethod": [
                    "GET = \"GET\"",
                    "POST = \"POST\"",
                    "DELETE = \"DELETE\"",
                    "PUT = \"PUT\"",
                    "PATCH = \"PATCH\"",
                    "HEAD = \"HEAD\"",
                    "OPTIONS = \"OPTIONS\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                72,
                73
            ],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_method.py",
                    "from enum import Enum",
                    "enum.Enum"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/http_method.py",
                    "from typing import Union",
                    "typing.Union"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "nest/core/decorators/http_method.py/route"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/decorators/http_method.py/HTTPMethod"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 51,
            "gen_code": "def Options(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.options, route_path, kwargs))\n        return func\n    return decorator",
            "gen_import": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/database.py",
            "relative_path": "nest/core/decorators/database.py",
            "fqn_list": "nest/core/decorators/database.py/db_request_handler",
            "class": null,
            "signature": "def db_request_handler(func):",
            "comment": "Decorator that handles database requests, including error handling and session management.\n\nArgs:\n    func (function): The function to be decorated.\n\nReturns:\n    function: The decorated function.",
            "comment_free_code": "def db_request_handler(func):\n    \n\n    def wrapper(self, *args, **kwargs):\n        try:\n            s = time.time()\n            result = func(self, *args, **kwargs)\n            p_time = time.time() - s\n            logging.info(f'request finished after {p_time}')\n            if hasattr(self, 'session'):\n                self.session.close()\n            return result\n        except Exception as e:\n            logging.error(e)\n            if hasattr(self, 'session'):\n                self.session.rollback()\n                self.session.close()\n            return HTTPException(status_code=500, detail=str(e))\n    return wrapper",
            "start_lineno": 11,
            "end_lineno": 40,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/database.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/decorators/database.py",
                    "import time",
                    "time"
                ],
                [
                    "nest/core/decorators/database.py",
                    "from fastapi.exceptions import HTTPException",
                    "fastapi.exceptions.HTTPException"
                ],
                [
                    "nest/core/decorators/database.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 52,
            "gen_code": "logger = logging.getLogger(__name__)\n\n@contextmanager\ndef db_request_handler(func: Callable):\n    try:\n        yield\n        func()\n    except Exception as e:\n        logger.error(f'Database request failed: {e}')\n        raise\n    finally:\n        logger.info('Database request succeeded')",
            "gen_import": [
                "from typing import Callable",
                "from sqlalchemy.orm import Session",
                "from contextlib import contextmanager",
                "import logging"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/database.py",
            "relative_path": "nest/core/decorators/database.py",
            "fqn_list": "nest/core/decorators/database.py/async_db_request_handler",
            "class": null,
            "signature": "def async_db_request_handler(func):",
            "comment": "Asynchronous decorator that handles database requests, including error handling,\nsession management, and logging for async functions.\n\nArgs:\n    func (function): The async function to be decorated.\n\nReturns:\n    function: The decorated async function.",
            "comment_free_code": "def async_db_request_handler(func):\n    \n\n    async def wrapper(*args, **kwargs):\n        try:\n            start_time = time.time()\n            result = await func(*args, **kwargs)\n            process_time = time.time() - start_time\n            logger.info(f'Async request finished after {process_time} seconds')\n            return result\n        except Exception as e:\n            self = args[0] if args else None\n            session = getattr(self, 'session', None)\n            if session:\n                session_type = 'class'\n            else:\n                session = [arg for arg in args if isinstance(arg, AsyncSession)][0]\n                if session:\n                    session_type = 'function'\n                else:\n                    raise ValueError('AsyncSession not provided to the function')\n            logger.error(f'Error in async request: {e}')\n            if session and session_type == 'function' and session.in_transaction():\n                await session.rollback()\n            elif session and session_type == 'class':\n                async with session() as session:\n                    await session.rollback()\n            return HTTPException(status_code=500, detail=str(e))\n    return wrapper",
            "start_lineno": 43,
            "end_lineno": 84,
            "local_variables": {
                "module": [
                    "logger = logging.getLogger(__name__)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/database.py",
                    "import logging",
                    "logging"
                ],
                [
                    "nest/core/decorators/database.py",
                    "import time",
                    "time"
                ],
                [
                    "nest/core/decorators/database.py",
                    "from fastapi.exceptions import HTTPException",
                    "fastapi.exceptions.HTTPException"
                ],
                [
                    "nest/core/decorators/database.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 53,
            "gen_code": "def async_db_request_handler(func):\n    @wraps(func)\n    async def wrapper(*args, **kwargs):\n        try:\n            return await func(*args, **kwargs)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail=str(e))\n    return wrapper",
            "gen_import": [
                "from functools import wraps",
                "from fastapi import HTTPException"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/http_code.py",
            "relative_path": "nest/core/decorators/http_code.py",
            "fqn_list": "nest/core/decorators/http_code.py/HttpCode",
            "class": null,
            "signature": "def HttpCode(status_code: int):",
            "comment": "Decorator that sets the HTTP status code for a route.\n\nArgs:\n    status_code (int): The HTTP status code for the response.",
            "comment_free_code": "def HttpCode(status_code: int):\n    \n\n    def decorator(func):\n        if not hasattr(func, STATUS_CODE_TOKEN):\n            setattr(func, STATUS_CODE_TOKEN, status_code)\n        return func\n    return decorator",
            "start_lineno": 4,
            "end_lineno": 17,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/http_code.py",
                    "from nest.common.constants import STATUS_CODE_TOKEN",
                    "nest.common.constants.STATUS_CODE_TOKEN"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 54,
            "gen_code": "def HttpCode(status_code: int):\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            response = await func(*args, **kwargs)\n            return response, status_code\n        return wrapper\n    return decorator",
            "gen_import": [
                "from fastapi import status"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/module.py",
            "relative_path": "nest/core/decorators/module.py",
            "fqn_list": "nest/core/decorators/module.py/Module/__init__",
            "class": "nest/core/decorators/module.py.Module",
            "signature": "def __init__(self, imports = None, controllers = None, providers = None, exports = None, is_global: bool = False):",
            "comment": null,
            "comment_free_code": "def __init__(self, imports=None, controllers=None, providers=None, exports=None, is_global: bool=False):\n    self.controllers = controllers or []\n    self.providers = providers or []\n    self.imports = imports or []\n    self.exports = exports\n    self.is_global = is_global",
            "start_lineno": 5,
            "end_lineno": 17,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/module.py",
                    "from nest.common.constants import ModuleMetadata",
                    "nest.common.constants.ModuleMetadata"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 55,
            "gen_code": "class Module:\n    def __init__(self, imports: Optional[List[Type]] = None, controllers: Optional[List[Type]] = None, providers: Optional[List[Type]] = None, exports: Optional[List[Type]] = None, is_global: bool = False):\n        self.imports = imports or []\n        self.controllers = controllers or []\n        self.providers = providers or []\n        self.exports = exports or []\n        self.is_global = is_global",
            "gen_import": [
                "from typing import Optional, List, Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/module.py",
            "relative_path": "nest/core/decorators/module.py",
            "fqn_list": "nest/core/decorators/module.py/Module/__call__",
            "class": "nest/core/decorators/module.py.Module",
            "signature": "def __call__(self, cls):",
            "comment": null,
            "comment_free_code": "def __call__(self, cls):\n    setattr(cls, ModuleMetadata.CONTROLLERS, self.controllers)\n    setattr(cls, ModuleMetadata.PROVIDERS, self.providers)\n    setattr(cls, ModuleMetadata.IMPORTS, self.imports)\n    setattr(cls, ModuleMetadata.EXPORTS, self.exports)\n    setattr(cls, '__is_module__', True)\n    setattr(cls, '__is_global__', self.is_global)\n    return cls",
            "start_lineno": 19,
            "end_lineno": 27,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/decorators/module.py",
                    "from nest.common.constants import ModuleMetadata",
                    "nest.common.constants.ModuleMetadata"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 56,
            "gen_code": "class Module:\n    def __init__(self, imports=None, controllers=None, providers=None, exports=None, is_global=False):\n        self.imports = imports or []\n        self.controllers = controllers or []\n        self.providers = providers or []\n        self.exports = exports or []\n        self.is_global = is_global\n\n    def __call__(self, cls):\n        cls.is_global = self.is_global\n        cls.imports = self.imports\n        cls.controllers = self.controllers\n        cls.providers = self.providers\n        cls.exports = self.exports\n        return cls",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/utils.py",
            "relative_path": "nest/core/decorators/utils.py",
            "fqn_list": "nest/core/decorators/utils.py/get_instance_variables",
            "class": null,
            "signature": "def get_instance_variables(cls):",
            "comment": "Retrieves instance variables assigned in the __init__ method of a class,\nexcluding those that are injected dependencies.\n\nArgs:\n    cls (type): The class to inspect.\n\nReturns:\n    dict: A dictionary with variable names as keys and their assigned values.",
            "comment_free_code": "def get_instance_variables(cls):\n    \n    try:\n        source = inspect.getsource(cls.__init__).strip()\n        tree = ast.parse(source)\n        dependencies = set((param.name for param in inspect.signature(cls.__init__).parameters.values() if param.annotation != param.empty and getattr(param.annotation, '__injectable__', False)))\n        instance_vars = {}\n        for node in ast.walk(tree):\n            if isinstance(node, ast.Assign):\n                for target in node.targets:\n                    if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self'):\n                        if target.attr not in dependencies:\n                            instance_vars[target.attr] = ast.get_source_segment(source, node.value)\n        return instance_vars\n    except Exception as e:\n        return {}",
            "start_lineno": 7,
            "end_lineno": 48,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/utils.py",
                    "import ast",
                    "ast"
                ],
                [
                    "nest/core/decorators/utils.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "nest/core/decorators/utils.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 57,
            "gen_code": "def get_instance_variables(cls: Type) -> List[str]:\n    return [var for var in vars(cls) if not var.startswith('_') and not callable(getattr(cls, var))]",
            "gen_import": [
                "from typing import List, Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/utils.py",
            "relative_path": "nest/core/decorators/utils.py",
            "fqn_list": "nest/core/decorators/utils.py/get_non_dependencies_params",
            "class": null,
            "signature": "def get_non_dependencies_params(cls):",
            "comment": null,
            "comment_free_code": "def get_non_dependencies_params(cls):\n    source = inspect.getsource(cls.__init__).strip()\n    tree = ast.parse(source)\n    non_dependencies = {}\n    for node in ast.walk(tree):\n        if isinstance(node, ast.Attribute):\n            non_dependencies[node.attr] = node.value.id\n    return non_dependencies",
            "start_lineno": 51,
            "end_lineno": 58,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/utils.py",
                    "import ast",
                    "ast"
                ],
                [
                    "nest/core/decorators/utils.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "nest/core/decorators/utils.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 58,
            "gen_code": "def get_non_dependencies_params(cls):\n    sig = signature(cls.__init__)\n    return [param.name for param in sig.parameters.values() if param.name != 'self' and param.default is param.empty]",
            "gen_import": [
                "from inspect import signature"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/utils.py",
            "relative_path": "nest/core/decorators/utils.py",
            "fqn_list": "nest/core/decorators/utils.py/parse_dependencies",
            "class": null,
            "signature": "def parse_dependencies(cls):",
            "comment": null,
            "comment_free_code": "def parse_dependencies(cls):\n    signature = inspect.signature(cls.__init__)\n    dependecies = {}\n    for param in signature.parameters.values():\n        try:\n            if param.annotation != param.empty and hasattr(param.annotation, '__dict__') and (INJECTABLE_TOKEN in param.annotation.__dict__):\n                dependecies[param.name] = param.annotation\n        except Exception as e:\n            raise e\n    return dependecies",
            "start_lineno": 61,
            "end_lineno": 74,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/utils.py",
                    "import ast",
                    "ast"
                ],
                [
                    "nest/core/decorators/utils.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "nest/core/decorators/utils.py",
                    "from nest.common.constants import INJECTABLE_TOKEN",
                    "nest.common.constants.INJECTABLE_TOKEN"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 59,
            "gen_code": "def parse_dependencies(cls: Type) -> List[Any]:\n    dependencies = []\n    for name, attribute in cls.__annotations__.items():\n        if hasattr(attribute, '__origin__') and attribute.__origin__ is not None:\n            dependencies.append((name, attribute.__origin__))\n        else:\n            dependencies.append((name, attribute))\n    return dependencies",
            "gen_import": [
                "from typing import Type, List, Any"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/class_based_view.py",
            "relative_path": "nest/core/decorators/class_based_view.py",
            "fqn_list": "nest/core/decorators/class_based_view.py/class_based_view",
            "class": null,
            "signature": "def class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:",
            "comment": "Replaces any methods of the provided class `cls` that are endpoints of routes in `router` with updated\nfunction calls that will properly inject an instance of `cls`.",
            "comment_free_code": "def class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:\n    \n    _init_cbv(cls)\n    cbv_router = APIRouter()\n    function_members = inspect.getmembers(cls, inspect.isfunction)\n    functions_set = set((func for (_, func) in function_members))\n    cbv_routes = [route for route in router.routes if isinstance(route, (Route, WebSocketRoute)) and route.endpoint in functions_set]\n    for route in cbv_routes:\n        router.routes.remove(route)\n        _update_cbv_route_endpoint_signature(cls, route)\n        cbv_router.routes.append(route)\n    router.include_router(cbv_router)\n    return cls",
            "start_lineno": 20,
            "end_lineno": 40,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")",
                    "K = TypeVar(\"K\", bound=Callable[..., Any])",
                    "CBV_CLASS_KEY = \"__cbv_class__\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/class_based_view.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import get_type_hints",
                    "typing.get_type_hints"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from fastapi import APIRouter",
                    "fastapi.APIRouter"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from fastapi import Depends",
                    "fastapi.Depends"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from pydantic.typing import is_classvar",
                    "pydantic.typing.is_classvar"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from starlette.routing import Route",
                    "starlette.routing.Route"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from starlette.routing import WebSocketRoute",
                    "starlette.routing.WebSocketRoute"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 60,
            "gen_code": "T = TypeVar('T')\n\ndef class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:\n    instance = cls()\n    for route in router.routes:\n        if isinstance(route.endpoint, Callable) and route.name in dir(cls):\n            setattr(instance, route.name, route.endpoint)\n    return instance",
            "gen_import": [
                "from fastapi import APIRouter",
                "from typing import Type, TypeVar, Callable"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/class_based_view.py",
            "relative_path": "nest/core/decorators/class_based_view.py",
            "fqn_list": "nest/core/decorators/class_based_view.py/_init_cbv",
            "class": null,
            "signature": "def _init_cbv(cls: Type[Any]) -> None:",
            "comment": "Idempotently modifies the provided `cls`, performing the following modifications:\n* The `__init__` function is updated to set any class-annotated dependencies as instance attributes\n* The `__signature__` attribute is updated to indicate to FastAPI what arguments should be passed to the initializer",
            "comment_free_code": "def _init_cbv(cls: Type[Any]) -> None:\n    \n    if getattr(cls, CBV_CLASS_KEY, False):\n        return\n    old_init: Callable[..., Any] = cls.__init__\n    old_signature = inspect.signature(old_init)\n    old_parameters = list(old_signature.parameters.values())[1:]\n    new_parameters = [x for x in old_parameters if x.kind not in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD)]\n    dependency_names: List[str] = []\n    for (name, hint) in get_type_hints(cls).items():\n        if is_classvar(hint):\n            continue\n        parameter_kwargs = {'default': getattr(cls, name, Ellipsis)}\n        dependency_names.append(name)\n        new_parameters.append(inspect.Parameter(name=name, kind=inspect.Parameter.KEYWORD_ONLY, annotation=hint, **parameter_kwargs))\n    new_signature = old_signature.replace(parameters=new_parameters)\n\n    def new_init(self: Any, *args: Any, **kwargs: Any) -> None:\n        for dep_name in dependency_names:\n            dep_value = kwargs.pop(dep_name)\n            setattr(self, dep_name, dep_value)\n        old_init(self, *args, **kwargs)\n    setattr(cls, '__signature__', new_signature)\n    setattr(cls, '__init__', new_init)\n    setattr(cls, CBV_CLASS_KEY, True)",
            "start_lineno": 43,
            "end_lineno": 86,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")",
                    "K = TypeVar(\"K\", bound=Callable[..., Any])",
                    "CBV_CLASS_KEY = \"__cbv_class__\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/class_based_view.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import get_type_hints",
                    "typing.get_type_hints"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from fastapi import APIRouter",
                    "fastapi.APIRouter"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from fastapi import Depends",
                    "fastapi.Depends"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from pydantic.typing import is_classvar",
                    "pydantic.typing.is_classvar"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from starlette.routing import Route",
                    "starlette.routing.Route"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from starlette.routing import WebSocketRoute",
                    "starlette.routing.WebSocketRoute"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 61,
            "gen_code": "def _init_cbv(cls: Type) -> None:\n    if not hasattr(cls, '__cbv_instance__'):\n        cls.__cbv_instance__ = cls()",
            "gen_import": [
                "from typing import Type"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/decorators/class_based_view.py",
            "relative_path": "nest/core/decorators/class_based_view.py",
            "fqn_list": "nest/core/decorators/class_based_view.py/_update_cbv_route_endpoint_signature",
            "class": null,
            "signature": "def _update_cbv_route_endpoint_signature(cls: Type[Any], route: Union[Route, WebSocketRoute]) -> None:",
            "comment": "Fixes the endpoint signature for a cbv route to ensure FastAPI performs dependency injection properly.",
            "comment_free_code": "def _update_cbv_route_endpoint_signature(cls: Type[Any], route: Union[Route, WebSocketRoute]) -> None:\n    \n    old_endpoint = route.endpoint\n    old_signature = inspect.signature(old_endpoint)\n    old_parameters: List[inspect.Parameter] = list(old_signature.parameters.values())\n    old_first_parameter = old_parameters[0]\n    new_first_parameter = old_first_parameter.replace(default=Depends(cls))\n    new_parameters = [new_first_parameter] + [parameter.replace(kind=inspect.Parameter.KEYWORD_ONLY) for parameter in old_parameters[1:]]\n    new_signature = old_signature.replace(parameters=new_parameters)\n    setattr(route.endpoint, '__signature__', new_signature)",
            "start_lineno": 89,
            "end_lineno": 105,
            "local_variables": {
                "module": [
                    "T = TypeVar(\"T\")",
                    "K = TypeVar(\"K\", bound=Callable[..., Any])",
                    "CBV_CLASS_KEY = \"__cbv_class__\""
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/decorators/class_based_view.py",
                    "import inspect",
                    "inspect"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Callable",
                    "typing.Callable"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Type",
                    "typing.Type"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import TypeVar",
                    "typing.TypeVar"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import Union",
                    "typing.Union"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from typing import get_type_hints",
                    "typing.get_type_hints"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from fastapi import APIRouter",
                    "fastapi.APIRouter"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from fastapi import Depends",
                    "fastapi.Depends"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from pydantic.typing import is_classvar",
                    "pydantic.typing.is_classvar"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from starlette.routing import Route",
                    "starlette.routing.Route"
                ],
                [
                    "nest/core/decorators/class_based_view.py",
                    "from starlette.routing import WebSocketRoute",
                    "starlette.routing.WebSocketRoute"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 62,
            "gen_code": "def _update_cbv_route_endpoint_signature(cls: Type, route: Union[Route, WebSocketRoute]) -> None:\n    if hasattr(cls, '__annotations__'):\n        for name, type_hint in cls.__annotations__.items():\n            if name in dir(route.endpoint):\n                setattr(route.endpoint, name, getattr(cls, name))",
            "gen_import": [
                "from typing import Type, Union",
                "from fastapi.routing import Route, WebSocketRoute"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/base_config.py",
            "relative_path": "nest/core/database/base_config.py",
            "fqn_list": "nest/core/database/base_config.py/ConfigFactoryBase/__init__",
            "class": "nest/core/database/base_config.py.ConfigFactoryBase",
            "signature": "def __init__(self, db_type: str):",
            "comment": "Initializes the ConfigFactory instance.\n\nArgs:\n    db_type (str): The type of database.",
            "comment_free_code": "def __init__(self, db_type: str):\n    \n    self.db_type = db_type",
            "start_lineno": 13,
            "end_lineno": 21,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/database/base_config.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 63,
            "gen_code": "class ConfigFactoryBase:\n    def __init__(self, db_type: str):\n        self.db_type = db_type",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/base_config.py",
            "relative_path": "nest/core/database/base_config.py",
            "fqn_list": "nest/core/database/base_config.py/ConfigFactoryBase/get_config",
            "class": "nest/core/database/base_config.py.ConfigFactoryBase",
            "signature": "def get_config(self):",
            "comment": "Returns the appropriate ORM configuration class based on the database type.\n\nReturns:\n    class: The ORM configuration class.\n\nRaises:\n    Exception: If the database type is not supported.",
            "comment_free_code": "def get_config(self):\n    \n    assert self.db_type, 'db_type is required'",
            "start_lineno": 23,
            "end_lineno": 34,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/database/base_config.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 64,
            "gen_code": "class ConfigFactoryBase:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'postgresql':\n            return URL.create(drivername='postgresql', username='user', password='pass', host='localhost', port=5432, database='db_name')\n        elif self.db_type == 'sqlite':\n            return URL.create(drivername='sqlite', database=':memory:')\n        else:\n            raise ValueError('Unsupported database type')",
            "gen_import": [
                "from sqlalchemy.engine.url import URL"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/base_config.py",
            "relative_path": "nest/core/database/base_config.py",
            "fqn_list": "nest/core/database/base_config.py/BaseConfig/get_engine_url",
            "class": "nest/core/database/base_config.py.BaseConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "@abstractmethod\ndef get_engine_url(self) -> str:\n    \n    pass",
            "start_lineno": 44,
            "end_lineno": 52,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/database/base_config.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 65,
            "gen_code": "def get_engine_url(self) -> str:\n    raise NotImplementedError('Subclasses should implement this method to return the engine URL')",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/base_config.py",
            "relative_path": "nest/core/database/base_config.py",
            "fqn_list": "nest/core/database/base_config.py/BaseProvider/__init__",
            "class": "nest/core/database/base_config.py.BaseProvider",
            "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):",
            "comment": "Initializes the BaseOdmProvider instance.\n\nArgs:\n    host (str): The database host.\n    db_name (str): The name of the database.\n    port (int): The database port number.\n    user (str): The username for database authentication.\n    password (str): The password for database authentication.",
            "comment_free_code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    \n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port",
            "start_lineno": 61,
            "end_lineno": 77,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/database/base_config.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 66,
            "gen_code": "class BaseProvider:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n        self.config: Dict[str, Any] = {\n            'host': self.host,\n            'db_name': self.db_name,\n            'user': self.user,\n            'password': self.password,\n            'port': self.port\n        }\n\n    def get_engine_url(self) -> str:\n        raise NotImplementedError('This method should be implemented by subclasses.')",
            "gen_import": [
                "from typing import Any, Dict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/base_config.py",
            "relative_path": "nest/core/database/base_config.py",
            "fqn_list": "nest/core/database/base_config.py/BaseProvider/get_engine_url",
            "class": "nest/core/database/base_config.py.BaseProvider",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    pass",
            "start_lineno": 79,
            "end_lineno": 87,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "nest/core/database/base_config.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 67,
            "gen_code": "class BaseProvider:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n        self.config: Dict[str, Any] = {\n            'host': self.host,\n            'db_name': self.db_name,\n            'user': self.user,\n            'password': self.password,\n            'port': self.port\n        }\n\n    def get_engine_url(self) -> str:\n        raise NotImplementedError('This method should be implemented by subclasses.')",
            "gen_import": []
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/odm_provider.py",
            "relative_path": "nest/core/database/odm_provider.py",
            "fqn_list": "nest/core/database/odm_provider.py/OdmProvider/__init__",
            "class": "nest/core/database/odm_provider.py.OdmProvider",
            "signature": "def __init__(self, db_type = \"mongodb\", config_params: dict = None, document_models: List[Document] = None):",
            "comment": "Initializes the OrmService instance.\n\nArgs:\n    db_type (str, optional): The type of database. Defaults to \"mongodb\".\n    config_params (dict, optional): Configuration parameters specific to the chosen database type.\n                                    Defaults to None.\n    document_models (beanie.Document): a list of beanie.Document instances",
            "comment_free_code": "def __init__(self, db_type='mongodb', config_params: dict=None, document_models: List[Document]=None):\n    \n    self.config_object = ConfigFactory(db_type=db_type).get_config()\n    self.config = self.config_object(**config_params)\n    self.config_url = self.config.get_engine_url()\n    self.document_models = document_models",
            "start_lineno": 25,
            "end_lineno": 44,
            "local_variables": {
                "OdmProvider": [
                    "client = AsyncIOMotorClient(self.config_url)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/odm_provider.py",
                    "from nest.core.database.odm_config import ConfigFactory",
                    "nest.core.database.odm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/odm_provider.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/database/odm_provider.py",
                    "from beanie import Document",
                    "beanie.Document"
                ],
                [
                    "nest/core/database/odm_provider.py",
                    "from beanie import init_beanie",
                    "beanie.init_beanie"
                ],
                [
                    "nest/core/database/odm_provider.py",
                    "from motor.motor_asyncio import AsyncIOMotorClient",
                    "motor.motor_asyncio.AsyncIOMotorClient"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 68,
            "gen_code": "class OdmProvider:\n    def __init__(self, db_type: str = 'mongodb', config_params: dict = None, document_models: Optional[List[Document]] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.document_models = document_models\n        self.client = AsyncIOMotorClient(self.config_params['engine_url'])\n\n    def check_document_models(self):\n        if not self.document_models:\n            raise ValueError('Document models list cannot be empty')",
            "gen_import": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from typing import List, Optional",
                "from beanie import Document"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/odm_provider.py",
            "relative_path": "nest/core/database/odm_provider.py",
            "fqn_list": "nest/core/database/odm_provider.py/OdmProvider/check_document_models",
            "class": "nest/core/database/odm_provider.py.OdmProvider",
            "signature": "def check_document_models(self):",
            "comment": "Checks that the document_models argument is a list of beanie.Document instances.",
            "comment_free_code": "def check_document_models(self):\n    \n    if not isinstance(self.document_models, list):\n        raise Exception('document_models should be a list')\n    for document_model in self.document_models:\n        if not issubclass(document_model, Document):\n            raise Exception('Each item in document_models should be a subclass of beanie.Document')",
            "start_lineno": 53,
            "end_lineno": 64,
            "local_variables": {
                "OdmProvider": [
                    "client = AsyncIOMotorClient(self.config_url)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/odm_provider.py",
                    "from nest.core.database.odm_config import ConfigFactory",
                    "nest.core.database.odm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/odm_provider.py",
                    "from typing import List",
                    "typing.List"
                ],
                [
                    "nest/core/database/odm_provider.py",
                    "from beanie import Document",
                    "beanie.Document"
                ],
                [
                    "nest/core/database/odm_provider.py",
                    "from beanie import init_beanie",
                    "beanie.init_beanie"
                ],
                [
                    "nest/core/database/odm_provider.py",
                    "from motor.motor_asyncio import AsyncIOMotorClient",
                    "motor.motor_asyncio.AsyncIOMotorClient"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "class OdmProvider:\n    def __init__(self, db_type: str = 'mongodb', config_params: dict = None, document_models: Optional[List[Document]] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.document_models = document_models\n        self.client = AsyncIOMotorClient(self.config_params['engine_url'])\n\n    def check_document_models(self):\n        if not self.document_models:\n            raise ValueError('Document models list cannot be empty')",
            "gen_import": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from typing import List, Optional",
                "from beanie import Document"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/__init__",
            "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
            "signature": "def __init__(self, db_type: str = \"postgresql\", config_params: dict = None, async_mode: bool = False, **kwargs):",
            "comment": "Initializes the BaseOrmProvider instance.\n\nArgs:\n    db_type (str): The type of database. Defaults to \"postgresql\".\n    config_params (dict): Configuration parameters for the database.\n    async_mode (bool): Flag to indicate if the provider is asynchronous.",
            "comment_free_code": "def __init__(self, db_type: str='postgresql', config_params: dict=None, async_mode: bool=False, **kwargs):\n    \n    self.Base = Base\n    config_factory = AsyncConfigFactory if async_mode else ConfigFactory\n    engine_function = create_async_engine if async_mode else create_engine\n    if 'engine_params' in kwargs:\n        engine_params: Dict[str, Any] = kwargs.pop('engine_params')\n    else:\n        engine_params = {}\n    session_function = async_sessionmaker if async_mode else sessionmaker\n    if 'session_params' in kwargs:\n        session_params: Dict[str, Any] = kwargs.pop('session_params')\n    else:\n        session_params = {}\n    self.config = config_factory(db_type=db_type).get_config()\n    self.config_url = self.config(**config_params).get_engine_url()\n    self.engine = engine_function(self.config_url, **engine_params)\n    self.session = session_function(self.engine, **session_params)",
            "start_lineno": 21,
            "end_lineno": 55,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                110
            ],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/database/orm_provider.py/Base"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 70,
            "gen_code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def get_db(self):\n        db = self.Session()\n        try:\n            yield db\n        finally:\n            db.close()",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/create_all",
            "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
            "signature": "def create_all(self):",
            "comment": null,
            "comment_free_code": "@abstractmethod\ndef create_all(self):\n    pass",
            "start_lineno": 58,
            "end_lineno": 59,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 71,
            "gen_code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def create_all(self):\n        # Assuming all models are imported and Base.metadata.create_all is called\n        Base.metadata.create_all(self.engine)",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/drop_all",
            "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
            "signature": "def drop_all(self):",
            "comment": null,
            "comment_free_code": "@abstractmethod\ndef drop_all(self):\n    pass",
            "start_lineno": 62,
            "end_lineno": 63,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 72,
            "gen_code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def drop_all(self):\n        # Assuming all models are imported and Base.metadata.drop_all is called\n        Base.metadata.drop_all(self.engine)",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/get_db",
            "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
            "signature": "def get_db(self):",
            "comment": null,
            "comment_free_code": "@abstractmethod\ndef get_db(self):\n    pass",
            "start_lineno": 66,
            "end_lineno": 67,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 73,
            "gen_code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def get_db(self) -> Generator:\n        db = self.Session()\n        try:\n            yield db\n        finally:\n            db.close()",
            "gen_import": [
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy import create_engine",
                "from typing import Generator"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/__init__",
            "class": "nest/core/database/orm_provider.py.OrmProvider",
            "signature": "def __init__(self, db_type: str = \"postgresql\", config_params: dict = None):",
            "comment": null,
            "comment_free_code": "def __init__(self, db_type: str='postgresql', config_params: dict=None):\n    super().__init__(db_type=db_type, config_params=config_params)",
            "start_lineno": 75,
            "end_lineno": 76,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 74,
            "gen_code": "class OrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def create_all(self):\n        # This method should be implemented to handle database schema creation\n        pass\n\n    def drop_all(self):\n        # This method should be implemented to handle database schema deletion\n        pass\n\n    def get_db(self):\n        db = self.Session()\n        try:\n            yield db\n        finally:\n            db.close()",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/create_all",
            "class": "nest/core/database/orm_provider.py.OrmProvider",
            "signature": "def create_all(self):",
            "comment": null,
            "comment_free_code": "def create_all(self):\n    self.Base.metadata.create_all(bind=self.engine)",
            "start_lineno": 78,
            "end_lineno": 79,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 75,
            "gen_code": "class OrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.Session = sessionmaker(bind=self.engine, class_=AsyncSession, expire_on_commit=False)\n\n    async def create_all(self):\n        async with self.Session() as session:\n            await session.run_sync(Base.metadata.create_all)",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/drop_all",
            "class": "nest/core/database/orm_provider.py.OrmProvider",
            "signature": "def drop_all(self):",
            "comment": null,
            "comment_free_code": "def drop_all(self):\n    self.Base.metadata.drop_all(bind=self.engine)",
            "start_lineno": 81,
            "end_lineno": 82,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 76,
            "gen_code": "class OrmProvider:\n    async def drop_all(self):\n        async with self.Session() as session:\n            await session.run_sync(Base.metadata.drop_all)",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import create_async_engine"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/get_db",
            "class": "nest/core/database/orm_provider.py.OrmProvider",
            "signature": "def get_db(self) -> Session:",
            "comment": null,
            "comment_free_code": "def get_db(self) -> Session:\n    db = self.session()\n    try:\n        return db\n    except Exception as e:\n        raise e\n    finally:\n        db.close()",
            "start_lineno": 84,
            "end_lineno": 91,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 77,
            "gen_code": "class OrmProvider:\n    async def get_db(self) -> AsyncGenerator[AsyncSession, None]:\n        async with self.Session() as session:\n            async with session.begin():\n                yield session\n            await session.commit()",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import AsyncGenerator"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_provider.py",
            "relative_path": "nest/core/database/orm_provider.py",
            "fqn_list": "nest/core/database/orm_provider.py/AsyncOrmProvider/__init__",
            "class": "nest/core/database/orm_provider.py.AsyncOrmProvider",
            "signature": "def __init__(self, db_type: str = \"postgresql\", config_params: dict = None, **kwargs):",
            "comment": null,
            "comment_free_code": "def __init__(self, db_type: str='postgresql', config_params: dict=None, **kwargs):\n    kwargs['engine_params'] = dict(echo=True)\n    kwargs['session_params'] = dict(expire_on_commit=False, class_=AsyncSession)\n    super().__init__(db_type=db_type, config_params=config_params, async_mode=True, **kwargs)",
            "start_lineno": 99,
            "end_lineno": 106,
            "local_variables": {
                "AsyncOrmProvider": [
                    "db = self.session()",
                    "db = self.session()"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import AsyncConfigFactory",
                    "nest.core.database.orm_config.AsyncConfigFactory"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from nest.core.database.orm_config import ConfigFactory",
                    "nest.core.database.orm_config.ConfigFactory"
                ]
            ],
            "third_import": [
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import ABC",
                    "abc.ABC"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from abc import abstractmethod",
                    "abc.abstractmethod"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from contextlib import asynccontextmanager",
                    "contextlib.asynccontextmanager"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Any",
                    "typing.Any"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from typing import Dict",
                    "typing.Dict"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy import create_engine",
                    "sqlalchemy.create_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import AsyncSession",
                    "sqlalchemy.ext.asyncio.AsyncSession"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import async_sessionmaker",
                    "sqlalchemy.ext.asyncio.async_sessionmaker"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.ext.asyncio import create_async_engine",
                    "sqlalchemy.ext.asyncio.create_async_engine"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import DeclarativeBase",
                    "sqlalchemy.orm.DeclarativeBase"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import Session",
                    "sqlalchemy.orm.Session"
                ],
                [
                    "nest/core/database/orm_provider.py",
                    "from sqlalchemy.orm import sessionmaker",
                    "sqlalchemy.orm.sessionmaker"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 78,
            "gen_code": "class AsyncOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.Session = sessionmaker(bind=self.engine, class_=AsyncSession, expire_on_commit=False)\n\n    async def get_db(self):\n        async with self.Session() as session:\n            async with session.begin():\n                yield session\n            await session.commit()",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/odm_config.py",
            "relative_path": "nest/core/database/odm_config.py",
            "fqn_list": "nest/core/database/odm_config.py/MongoDBConfig/__init__",
            "class": "nest/core/database/odm_config.py.MongoDBConfig",
            "signature": "def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):",
            "comment": "Initializes the MongoDBConfig instance.\n\nArgs:\n    host (str): The database host.\n    db_name (str): The name of the database.\n    user (str): The username for database authentication.\n    password (str): The password for database authentication.\n    port (int): The database port number.\n    srv (bool): Whether to use the SRV connection string.",
            "comment_free_code": "def __init__(self, host: str, db_name: str, user: str=None, password: str=None, port: int=27017, srv: bool=False):\n    \n    self.srv = srv\n    super().__init__(host, db_name, user, password, port)",
            "start_lineno": 18,
            "end_lineno": 40,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 79,
            "gen_code": "class MongoDBConfig:\n    def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.srv = srv\n        self.client = None\n\n    def connect(self):\n        try:\n            connection_string = f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}' if self.srv else f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}'\n            self.client = MongoClient(connection_string)\n            print('MongoDB connection successful')\n        except Exception as e:\n            print(f'Error connecting to MongoDB: {e}')",
            "gen_import": [
                "from pymongo import MongoClient"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/odm_config.py",
            "relative_path": "nest/core/database/odm_config.py",
            "fqn_list": "nest/core/database/odm_config.py/MongoDBConfig/get_engine_url",
            "class": "nest/core/database/odm_config.py.MongoDBConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    if self.user and self.password:\n        return f\"mongodb{('+srv' if self.srv else '')}://{self.user}:{self.password}@{self.host}:{self.port}\"\n    return f\"mongodb{('+srv' if self.srv else '')}://{self.host}:{self.port}\"",
            "start_lineno": 42,
            "end_lineno": 52,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 80,
            "gen_code": "class MongoDBConfig:\n    def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.srv = srv\n        self.client = None\n\n    def get_engine_url(self) -> str:\n        connection_string = f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}' if self.srv else f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}'\n        return connection_string",
            "gen_import": [
                "from pymongo import MongoClient"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/odm_config.py",
            "relative_path": "nest/core/database/odm_config.py",
            "fqn_list": "nest/core/database/odm_config.py/ConfigFactory/__init__",
            "class": "nest/core/database/odm_config.py.ConfigFactory",
            "signature": "def __init__(self, db_type: str):",
            "comment": "Initializes the ConfigFactory instance.\n\nArgs:\n    db_type (str): The type of database.",
            "comment_free_code": "def __init__(self, db_type: str):\n    \n    super().__init__(db_type)",
            "start_lineno": 64,
            "end_lineno": 72,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 81,
            "gen_code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'mongodb':\n            return MongoDBConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')",
            "gen_import": [
                "from .odm_config import MongoDBConfig"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/odm_config.py",
            "relative_path": "nest/core/database/odm_config.py",
            "fqn_list": "nest/core/database/odm_config.py/ConfigFactory/get_config",
            "class": "nest/core/database/odm_config.py.ConfigFactory",
            "signature": "def get_config(self):",
            "comment": "Returns the appropriate ODM configuration class based on the database type.\n\nReturns:\n    class: The ODM configuration class.\n\nRaises:\n    Exception: If the database type is not supported.",
            "comment_free_code": "def get_config(self):\n    \n    if self.db_type == 'mongodb':\n        return MongoDBConfig\n    else:\n        raise Exception(f'Database type {self.db_type} is not supported')",
            "start_lineno": 74,
            "end_lineno": 88,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                127
            ],
            "local_import": [
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/odm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/database/odm_config.py/MongoDBConfig"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 82,
            "gen_code": "def get_config(self):\n    if self.db_type == 'mongodb':\n        return MongoDBConfig()\n    else:\n        raise ValueError(f'Unsupported database type: {self.db_type}')",
            "gen_import": [
                "from nest.core.database.odm_config import MongoDBConfig"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/PostgresConfig/__init__",
            "class": "nest/core/database/orm_config.py.PostgresConfig",
            "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):",
            "comment": "Initializes the PostgresConfig instance.\n\nArgs:\n    host (str): The database host.\n    db_name (str): The name of the database.\n    user (str): The username for database authentication.\n    password (str): The password for database authentication.\n    port (int): The database port number.",
            "comment_free_code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    \n    super().__init__(host, db_name, user, password, port)",
            "start_lineno": 17,
            "end_lineno": 29,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 83,
            "gen_code": "class PostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.engine_url = f'postgresql://{user}:{password}@{host}:{port}/{db_name}'\n\n    def get_engine(self):\n        engine = create_engine(self.engine_url)\n        return engine\n\n    def get_session(self):\n        engine = self.get_engine()\n        Session = sessionmaker(bind=engine)\n        return Session()",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/PostgresConfig/get_engine_url",
            "class": "nest/core/database/orm_config.py.PostgresConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    return f'postgresql+psycopg2://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "start_lineno": 31,
            "end_lineno": 39,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 84,
            "gen_code": "def get_engine_url(self) -> str:\n    return f'postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/MySQLConfig/__init__",
            "class": "nest/core/database/orm_config.py.MySQLConfig",
            "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):",
            "comment": "Initializes the MySQLConfig instance.\n\nArgs:\n    host (str): The database host.\n    db_name (str): The name of the database.\n    user (str): The username for database authentication.\n    password (str): The password for database authentication.\n    port (int): The database port number.",
            "comment_free_code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    \n    super().__init__(host, db_name, user, password, port)",
            "start_lineno": 55,
            "end_lineno": 67,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 85,
            "gen_code": "class MySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.engine_url = f'mysql+pymysql://{user}:{password}@{host}:{port}/{db_name}'\n\n    def get_engine(self):\n        engine = create_engine(self.engine_url)\n        return engine\n\n    def get_session(self):\n        engine = self.get_engine()\n        Session = sessionmaker(bind=engine)\n        return Session()",
            "gen_import": [
                "import pymysql",
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/MySQLConfig/get_engine_url",
            "class": "nest/core/database/orm_config.py.MySQLConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    return f'mysql+mysqlconnector://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "start_lineno": 69,
            "end_lineno": 77,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 86,
            "gen_code": "def get_engine_url(self) -> str:\n    return f'mysql+pymysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/SQLiteConfig/__init__",
            "class": "nest/core/database/orm_config.py.SQLiteConfig",
            "signature": "def __init__(self, db_name: str):",
            "comment": "Initializes the SQLiteConfig instance.\n\nArgs:\n    db_name (str): The name of the SQLite database file.",
            "comment_free_code": "def __init__(self, db_name: str):\n    \n    self.db_name = db_name",
            "start_lineno": 89,
            "end_lineno": 97,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 87,
            "gen_code": "class SQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n        self.engine_url = f'sqlite:///{db_name}'\n\n    def get_engine(self):\n        engine = create_engine(self.engine_url, connect_args={'check_same_thread': False})\n        return engine\n\n    def get_session(self):\n        engine = self.get_engine()\n        Session = sessionmaker(bind=engine)\n        return Session()",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/SQLiteConfig/get_engine_url",
            "class": "nest/core/database/orm_config.py.SQLiteConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    return f'sqlite:///{self.db_name}.db'",
            "start_lineno": 99,
            "end_lineno": 107,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 88,
            "gen_code": "def get_engine_url(self) -> str:\n    return f'sqlite:///{self.db_name}'",
            "gen_import": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncSQLiteConfig/__init__",
            "class": "nest/core/database/orm_config.py.AsyncSQLiteConfig",
            "signature": "def __init__(self, db_name: str):",
            "comment": "Initializes the SQLiteConfig instance.\n\nArgs:\n    db_name (str): The name of the SQLite database file.",
            "comment_free_code": "def __init__(self, db_name: str):\n    \n    super().__init__(db_name)",
            "start_lineno": 119,
            "end_lineno": 127,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 89,
            "gen_code": "class AsyncSQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n        self.async_engine = create_async_engine(f'sqlite+aiosqlite:///{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'sqlite+aiosqlite:///{self.db_name}'",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncSQLiteConfig/get_engine_url",
            "class": "nest/core/database/orm_config.py.AsyncSQLiteConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    return f'sqlite+aiosqlite:///{self.db_name}.db'",
            "start_lineno": 129,
            "end_lineno": 137,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 90,
            "gen_code": "def get_engine_url(self) -> str:\n    return f'sqlite+aiosqlite:///{self.db_name}'",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncPostgresConfig/__init__",
            "class": "nest/core/database/orm_config.py.AsyncPostgresConfig",
            "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):",
            "comment": "Initializes the PostgresConfig instance.\n\nArgs:\n    host (str): The database host.\n    db_name (str): The name of the database.\n    user (str): The username for database authentication.\n    password (str): The password for database authentication.\n    port (int): The database port number.",
            "comment_free_code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    \n    super().__init__(host, db_name, user, password, port)",
            "start_lineno": 141,
            "end_lineno": 153,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 91,
            "gen_code": "class AsyncPostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'postgresql+asyncpg://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncPostgresConfig/get_engine_url",
            "class": "nest/core/database/orm_config.py.AsyncPostgresConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "start_lineno": 155,
            "end_lineno": 163,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 92,
            "gen_code": "class AsyncPostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'postgresql+asyncpg://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncMySQLConfig/__init__",
            "class": "nest/core/database/orm_config.py.AsyncMySQLConfig",
            "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):",
            "comment": "Initializes the MySQLConfig instance.\n\nArgs:\n    host (str): The database host.\n    db_name (str): The name of the database.\n    user (str): The username for database authentication.\n    password (str): The password for database authentication.\n    port (int): The database port number.",
            "comment_free_code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    \n    super().__init__(host, db_name, user, password, port)",
            "start_lineno": 167,
            "end_lineno": 179,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 93,
            "gen_code": "class AsyncMySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'mysql+aiomysql://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncMySQLConfig/get_engine_url",
            "class": "nest/core/database/orm_config.py.AsyncMySQLConfig",
            "signature": "def get_engine_url(self) -> str:",
            "comment": "Returns the engine URL for the ORM.\n\nReturns:\n    str: The engine URL.",
            "comment_free_code": "def get_engine_url(self) -> str:\n    \n    return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "start_lineno": 181,
            "end_lineno": 189,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 94,
            "gen_code": "class AsyncMySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'mysql+aiomysql://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'",
            "gen_import": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/ConfigFactory/__init__",
            "class": "nest/core/database/orm_config.py.ConfigFactory",
            "signature": "def __init__(self, db_type: str):",
            "comment": "Initializes the ConfigFactory instance.\n\nArgs:\n    db_type (str): The type of database.",
            "comment_free_code": "def __init__(self, db_type: str):\n    \n    super().__init__(db_type)",
            "start_lineno": 201,
            "end_lineno": 209,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 95,
            "gen_code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'sqlite':\n            return AsyncSQLiteConfig\n        elif self.db_type == 'postgresql':\n            return AsyncPostgresConfig\n        elif self.db_type == 'mysql':\n            return AsyncMySQLConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')",
            "gen_import": [
                "from .orm_config import AsyncSQLiteConfig, AsyncPostgresConfig, AsyncMySQLConfig"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/ConfigFactory/get_config",
            "class": "nest/core/database/orm_config.py.ConfigFactory",
            "signature": "def get_config(self):",
            "comment": "Returns the appropriate ORM configuration class based on the database type.\n\nReturns:\n    class: The ORM configuration class.\n\nRaises:\n    Exception: If the database type is not supported.",
            "comment_free_code": "def get_config(self):\n    \n    if self.db_type == 'postgresql':\n        return PostgresConfig\n    elif self.db_type == 'mysql':\n        return MySQLConfig\n    elif self.db_type == 'sqlite':\n        return SQLiteConfig\n    else:\n        raise Exception(f'Database type {self.db_type} is not supported')",
            "start_lineno": 211,
            "end_lineno": 229,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                136,
                139,
                133
            ],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/database/orm_config.py/MySQLConfig",
                    "nest/core/database/orm_config.py/SQLiteConfig",
                    "nest/core/database/orm_config.py/PostgresConfig"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 96,
            "gen_code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'postgresql':\n            return PostgresConfig\n        elif self.db_type == 'mysql':\n            return MySQLConfig\n        elif self.db_type == 'sqlite':\n            return SQLiteConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')",
            "gen_import": [
                "from .orm_config import PostgresConfig, MySQLConfig, SQLiteConfig"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncConfigFactory/__init__",
            "class": "nest/core/database/orm_config.py.AsyncConfigFactory",
            "signature": "def __init__(self, db_type: str):",
            "comment": "Initializes the ConfigFactory instance.\n\nArgs:\n    db_type (str): The type of database.",
            "comment_free_code": "def __init__(self, db_type: str):\n    \n    super().__init__(db_type)",
            "start_lineno": 233,
            "end_lineno": 241,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 97,
            "gen_code": "class AsyncConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'sqlite':\n            return AsyncSQLiteConfig\n        elif self.db_type == 'postgresql':\n            return AsyncPostgresConfig\n        elif self.db_type == 'mysql':\n            return AsyncMySQLConfig\n        else:\n            raise ValueError(f'Unsupported async database type: {self.db_type}')",
            "gen_import": [
                "from .orm_config import AsyncSQLiteConfig, AsyncPostgresConfig, AsyncMySQLConfig"
            ]
        },
        {
            "path": "/home/gudako/repo/repogen/data/PyNest/nest/core/database/orm_config.py",
            "relative_path": "nest/core/database/orm_config.py",
            "fqn_list": "nest/core/database/orm_config.py/AsyncConfigFactory/get_config",
            "class": "nest/core/database/orm_config.py.AsyncConfigFactory",
            "signature": "def get_config(self):",
            "comment": "Returns the appropriate ORM configuration class based on the database type.\n\nReturns:\n    class: The ORM configuration class.\n\nRaises:\n    Exception: If the database type is not supported.",
            "comment_free_code": "def get_config(self):\n    \n    if self.db_type == 'postgresql':\n        return AsyncPostgresConfig\n    elif self.db_type == 'mysql':\n        return AsyncMySQLConfig\n    elif self.db_type == 'sqlite':\n        return AsyncSQLiteConfig\n    else:\n        raise Exception(f'Database type {self.db_type} is not supported')",
            "start_lineno": 243,
            "end_lineno": 261,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                145,
                148,
                142
            ],
            "local_import": [
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseConfig",
                    "nest.core.database.base_config.BaseConfig"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import BaseProvider",
                    "nest.core.database.base_config.BaseProvider"
                ],
                [
                    "nest/core/database/orm_config.py",
                    "from nest.core.database.base_config import ConfigFactoryBase",
                    "nest.core.database.base_config.ConfigFactoryBase"
                ]
            ],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "nest/core/database/orm_config.py/AsyncPostgresConfig",
                    "nest/core/database/orm_config.py/AsyncMySQLConfig",
                    "nest/core/database/orm_config.py/AsyncSQLiteConfig"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 98,
            "gen_code": "class AsyncConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'sqlite':\n            return AsyncSQLiteConfig\n        elif self.db_type == 'postgresql':\n            return AsyncPostgresConfig\n        elif self.db_type == 'mysql':\n            return AsyncMySQLConfig\n        else:\n            raise ValueError(f'Unsupported async database type: {self.db_type}')",
            "gen_import": [
                "from .orm_config import AsyncPostgresConfig, AsyncMySQLConfig, AsyncSQLiteConfig"
            ]
        }
    ]
}