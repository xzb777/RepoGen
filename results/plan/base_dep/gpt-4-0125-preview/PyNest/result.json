{
    "implementation": [
        {
            "key_id": 3,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/__init__",
            "imports": [
                "from typing import Union, Type",
                "from nest.core.pynest_container import PyNestContainer",
                "from nest.core.module_compiler import ModuleCompiler"
            ],
            "code": "class PyNestApplicationContext:\n    _is_initialized = False\n    _module_compiler = ModuleCompiler()\n\n    def __init__(self, container: PyNestContainer, context_module: Union[Type, None] = None):\n        self.container = container\n        self.context_module = context_module\n        self._is_initialized = False"
        },
        {
            "key_id": 9,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/__init__",
            "imports": [
                "from typing import Any, List"
            ],
            "code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self"
        },
        {
            "key_id": 30,
            "fqn": "nest/core/pynest_application.py/PyNestApp/__init__",
            "imports": [
                "from fastapi import FastAPI",
                "from nest.core.pynest_container import PyNestContainer"
            ],
            "code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()"
        },
        {
            "key_id": 55,
            "fqn": "nest/core/decorators/module.py/Module/__init__",
            "imports": [
                "from typing import Optional, List, Type"
            ],
            "code": "class Module:\n    def __init__(self, imports: Optional[List[Type]] = None, controllers: Optional[List[Type]] = None, providers: Optional[List[Type]] = None, exports: Optional[List[Type]] = None, is_global: bool = False):\n        self.imports = imports or []\n        self.controllers = controllers or []\n        self.providers = providers or []\n        self.exports = exports or []\n        self.is_global = is_global"
        },
        {
            "key_id": 63,
            "fqn": "nest/core/database/base_config.py/ConfigFactoryBase/__init__",
            "imports": [],
            "code": "class ConfigFactoryBase:\n    def __init__(self, db_type: str):\n        self.db_type = db_type"
        },
        {
            "key_id": 66,
            "fqn": "nest/core/database/base_config.py/BaseProvider/__init__",
            "imports": [
                "from typing import Any, Dict"
            ],
            "code": "class BaseProvider:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n        self.config: Dict[str, Any] = {\n            'host': self.host,\n            'db_name': self.db_name,\n            'user': self.user,\n            'password': self.password,\n            'port': self.port\n        }\n\n    def get_engine_url(self) -> str:\n        raise NotImplementedError('This method should be implemented by subclasses.')"
        },
        {
            "key_id": 68,
            "fqn": "nest/core/database/odm_provider.py/OdmProvider/__init__",
            "imports": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from typing import List, Optional",
                "from beanie import Document"
            ],
            "code": "class OdmProvider:\n    def __init__(self, db_type: str = 'mongodb', config_params: dict = None, document_models: Optional[List[Document]] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.document_models = document_models\n        self.client = AsyncIOMotorClient(self.config_params['engine_url'])\n\n    def check_document_models(self):\n        if not self.document_models:\n            raise ValueError('Document models list cannot be empty')"
        },
        {
            "key_id": 70,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/__init__",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ],
            "code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def get_db(self):\n        db = self.Session()\n        try:\n            yield db\n        finally:\n            db.close()"
        },
        {
            "key_id": 74,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/__init__",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class OrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def create_all(self):\n        # This method should be implemented to handle database schema creation\n        pass\n\n    def drop_all(self):\n        # This method should be implemented to handle database schema deletion\n        pass\n\n    def get_db(self):\n        db = self.Session()\n        try:\n            yield db\n        finally:\n            db.close()"
        },
        {
            "key_id": 78,
            "fqn": "nest/core/database/orm_provider.py/AsyncOrmProvider/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class AsyncOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.Session = sessionmaker(bind=self.engine, class_=AsyncSession, expire_on_commit=False)\n\n    async def get_db(self):\n        async with self.Session() as session:\n            async with session.begin():\n                yield session\n            await session.commit()"
        },
        {
            "key_id": 79,
            "fqn": "nest/core/database/odm_config.py/MongoDBConfig/__init__",
            "imports": [
                "from pymongo import MongoClient"
            ],
            "code": "class MongoDBConfig:\n    def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.srv = srv\n        self.client = None\n\n    def connect(self):\n        try:\n            connection_string = f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}' if self.srv else f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}'\n            self.client = MongoClient(connection_string)\n            print('MongoDB connection successful')\n        except Exception as e:\n            print(f'Error connecting to MongoDB: {e}')"
        },
        {
            "key_id": 81,
            "fqn": "nest/core/database/odm_config.py/ConfigFactory/__init__",
            "imports": [
                "from .odm_config import MongoDBConfig"
            ],
            "code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'mongodb':\n            return MongoDBConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 83,
            "fqn": "nest/core/database/orm_config.py/PostgresConfig/__init__",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class PostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.engine_url = f'postgresql://{user}:{password}@{host}:{port}/{db_name}'\n\n    def get_engine(self):\n        engine = create_engine(self.engine_url)\n        return engine\n\n    def get_session(self):\n        engine = self.get_engine()\n        Session = sessionmaker(bind=engine)\n        return Session()"
        },
        {
            "key_id": 85,
            "fqn": "nest/core/database/orm_config.py/MySQLConfig/__init__",
            "imports": [
                "import pymysql",
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class MySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.engine_url = f'mysql+pymysql://{user}:{password}@{host}:{port}/{db_name}'\n\n    def get_engine(self):\n        engine = create_engine(self.engine_url)\n        return engine\n\n    def get_session(self):\n        engine = self.get_engine()\n        Session = sessionmaker(bind=engine)\n        return Session()"
        },
        {
            "key_id": 87,
            "fqn": "nest/core/database/orm_config.py/SQLiteConfig/__init__",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class SQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n        self.engine_url = f'sqlite:///{db_name}'\n\n    def get_engine(self):\n        engine = create_engine(self.engine_url, connect_args={'check_same_thread': False})\n        return engine\n\n    def get_session(self):\n        engine = self.get_engine()\n        Session = sessionmaker(bind=engine)\n        return Session()"
        },
        {
            "key_id": 89,
            "fqn": "nest/core/database/orm_config.py/AsyncSQLiteConfig/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ],
            "code": "class AsyncSQLiteConfig:\n    def __init__(self, db_name: str):\n        self.db_name = db_name\n        self.async_engine = create_async_engine(f'sqlite+aiosqlite:///{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'sqlite+aiosqlite:///{self.db_name}'"
        },
        {
            "key_id": 91,
            "fqn": "nest/core/database/orm_config.py/AsyncPostgresConfig/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ],
            "code": "class AsyncPostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'postgresql+asyncpg://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 93,
            "fqn": "nest/core/database/orm_config.py/AsyncMySQLConfig/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ],
            "code": "class AsyncMySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'mysql+aiomysql://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 95,
            "fqn": "nest/core/database/orm_config.py/ConfigFactory/__init__",
            "imports": [
                "from .orm_config import AsyncSQLiteConfig, AsyncPostgresConfig, AsyncMySQLConfig"
            ],
            "code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'sqlite':\n            return AsyncSQLiteConfig\n        elif self.db_type == 'postgresql':\n            return AsyncPostgresConfig\n        elif self.db_type == 'mysql':\n            return AsyncMySQLConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 97,
            "fqn": "nest/core/database/orm_config.py/AsyncConfigFactory/__init__",
            "imports": [
                "from .orm_config import AsyncSQLiteConfig, AsyncPostgresConfig, AsyncMySQLConfig"
            ],
            "code": "class AsyncConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'sqlite':\n            return AsyncSQLiteConfig\n        elif self.db_type == 'postgresql':\n            return AsyncPostgresConfig\n        elif self.db_type == 'mysql':\n            return AsyncMySQLConfig\n        else:\n            raise ValueError(f'Unsupported async database type: {self.db_type}')"
        },
        {
            "key_id": 2,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/init",
            "imports": [
                "from typing import Type, Union",
                "from nest.core.pynest_container import PyNestContainer",
                "from nest.core.module_compiler import ModuleCompiler"
            ],
            "code": "class PyNestApplicationContext:\n    _is_initialized = False\n    _module_compiler = ModuleCompiler()\n\n    def __init__(self, container: PyNestContainer, context_module: Union[Type, None] = None):\n        self.container = container\n        self.context_module = context_module\n        self._is_initialized = False"
        },
        {
            "key_id": 4,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/select_context_module",
            "imports": [],
            "code": "def select_context_module(self):\n        if self.context_module is not None:\n            return self.context_module\n        raise ValueError('No context module defined')"
        },
        {
            "key_id": 5,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/select",
            "imports": [
                "from typing import TypeVar, Type"
            ],
            "code": "T = TypeVar('T')\n\n    def select(self, module: Type[T]) -> T:\n        if not self._is_initialized:\n            raise RuntimeError('Application context is not initialized')\n        return self.container.get_instance(module)"
        },
        {
            "key_id": 0,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "imports": [],
            "code": "def is_initialized(self) -> bool:\n        return self._is_initialized"
        },
        {
            "key_id": 1,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "imports": [],
            "code": "def is_initialized(self, value: bool):\n        if not isinstance(value, bool):\n            raise ValueError('Value must be a boolean')\n        self._is_initialized = value"
        },
        {
            "key_id": 6,
            "fqn": "nest/core/pynest_factory.py/PyNestFactory/create",
            "imports": [
                "from typing import Type",
                "from nest.core.pynest_application import PyNestApp",
                "from nest.core.pynest_container import PyNestContainer"
            ],
            "code": "def create(main_module: Type[ModuleType], **kwargs) -> PyNestApp:\n    container = PyNestContainer()\n    app_context = container.init_app(main_module, **kwargs)\n    return PyNestApp(container, app_context)"
        },
        {
            "key_id": 7,
            "fqn": "nest/core/pynest_factory.py/PyNestFactory/_create_server",
            "imports": [
                "from fastapi import FastAPI"
            ],
            "code": "def _create_server(**kwargs) -> FastAPI:\n    app = FastAPI(**kwargs)\n    # Additional server configuration can go here\n    return app"
        },
        {
            "key_id": 8,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/__new__",
            "imports": [],
            "code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(PyNestContainer, cls).__new__(cls)\n            cls._dependencies = {}\n        return cls._instance"
        },
        {
            "key_id": 10,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/modules",
            "imports": [],
            "code": "def modules(self):\n    return self._dependencies.keys()"
        },
        {
            "key_id": 11,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/module_token_factory",
            "imports": [
                "from typing import Any"
            ],
            "code": "def module_token_factory(self) -> Any:\n    # This method would generate a unique token for each module\n    # For simplicity, let's assume it returns a simple hash based on module name\n    return hash('module_name')"
        },
        {
            "key_id": 12,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/modules_metadata",
            "imports": [],
            "code": "def modules_metadata(self):\n    return {module: metadata for module, metadata in self._dependencies.items() if 'metadata' in metadata}"
        },
        {
            "key_id": 13,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/module_compiler",
            "imports": [
                "from typing import List, Any"
            ],
            "code": "def module_compiler(self):\n    compiled_modules = []\n    for module, metadata in self._dependencies.items():\n        if 'metadata' in metadata:\n            compiled_modules.append((module, metadata['metadata']))\n    return compiled_modules"
        },
        {
            "key_id": 14,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/get_instance",
            "imports": [
                "from typing import Type, Optional, Union"
            ],
            "code": "def get_instance(self, dependency: Type[TProvider], provider: Optional[Union[Type[TProvider], Type[TController]]] = None):\n    if provider and provider in self._dependencies:\n        return self._dependencies[provider]['instance']\n    elif dependency in self._dependencies:\n        return self._dependencies[dependency]['instance']\n    else:\n        raise ValueError(f'No instance found for dependency: {dependency}')"
        },
        {
            "key_id": 15,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_module",
            "imports": [],
            "code": "def add_module(self, metaclass) -> dict:\n    module_name = metaclass.__name__\n    if module_name not in self._dependencies:\n        self._dependencies[module_name] = {'instance': metaclass(), 'metadata': {}}\n    return self._dependencies[module_name]"
        },
        {
            "key_id": 16,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/register_module",
            "imports": [
                "from typing import Type"
            ],
            "code": "def register_module(self, module_factory: Type[ModuleFactory]) -> Type[Module]:\n    module_instance = module_factory()\n    module_name = module_factory.__name__\n    if module_name not in self._dependencies:\n        self._dependencies[module_name] = {'instance': module_instance, 'metadata': {}}\n    else:\n        raise ValueError(f'Module {module_name} is already registered')\n    return module_instance"
        },
        {
            "key_id": 17,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_metadata",
            "imports": [],
            "code": "def add_metadata(self, token: str, module_metadata) -> None:\n    if token not in self._dependencies:\n        self._dependencies[token] = {'metadata': module_metadata}\n    else:\n        self._dependencies[token]['metadata'].update(module_metadata)"
        },
        {
            "key_id": 18,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_import",
            "imports": [],
            "code": "def add_import(self, token: str):\n    if 'imports' not in self._dependencies[token]:\n        self._dependencies[token]['imports'] = []\n    self._dependencies[token]['imports'].append(token)"
        },
        {
            "key_id": 19,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_modules",
            "imports": [],
            "code": "def add_modules(self, modules: List[Any]) -> None:\n    for module in modules:\n        self.add_module(module)"
        },
        {
            "key_id": 20,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_providers",
            "imports": [],
            "code": "def add_providers(self, providers: List[Any], module_token: str) -> None:\n    if 'providers' not in self._dependencies[module_token]:\n        self._dependencies[module_token]['providers'] = []\n    self._dependencies[module_token]['providers'].extend(providers)"
        },
        {
            "key_id": 21,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_provider",
            "imports": [],
            "code": "def add_provider(self, token: str, provider):\n    if 'providers' not in self._dependencies[token]:\n        self._dependencies[token]['providers'] = [provider]\n    else:\n        if provider not in self._dependencies[token]['providers']:\n            self._dependencies[token]['providers'].append(provider)"
        },
        {
            "key_id": 22,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_get_providers",
            "imports": [
                "from typing import List, Any"
            ],
            "code": "def _get_providers(self, token: str) -> List[Any]:\n    if token in self._dependencies:\n        return self._dependencies[token]['providers']\n    else:\n        return []"
        },
        {
            "key_id": 23,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_controllers",
            "imports": [
                "from typing import List, Any"
            ],
            "code": "def add_controllers(self, controllers: List[Any], module_token: str) -> None:\n    if module_token not in self._dependencies:\n        self._dependencies[module_token] = {'controllers': [], 'providers': []}\n    for controller in controllers:\n        self._dependencies[module_token]['controllers'].append(controller)"
        },
        {
            "key_id": 24,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_add_controller",
            "imports": [
                "from typing import Type"
            ],
            "code": "def _add_controller(self, token: str, controller: Type) -> None:\n    if token not in self._dependencies:\n        self._dependencies[token] = {'controllers': [], 'providers': []}\n    self._dependencies[token]['controllers'].append(controller)"
        },
        {
            "key_id": 25,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_get_controllers",
            "imports": [
                "from typing import List, Any"
            ],
            "code": "def _get_controllers(self, token: str) -> List[Any]:\n    if token in self._dependencies:\n        return self._dependencies[token]['controllers']\n    else:\n        return []"
        },
        {
            "key_id": 26,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/clear",
            "imports": [],
            "code": "def clear(self):\n    self._dependencies = {}"
        },
        {
            "key_id": 27,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_related_module",
            "imports": [
                "from typing import Any, List"
            ],
            "code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self\n\n    def add_related_module(self, related_module, token: str) -> None:\n        if token not in self._dependencies:\n            self._dependencies[token] = {'related_modules': []}\n        self._dependencies[token]['related_modules'].append(related_module)\n        print(f'Added related module {related_module} to {token}')"
        },
        {
            "key_id": 28,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/get_module_by_key",
            "imports": [
                "from typing import Any"
            ],
            "code": "class PyNestContainer:\n    _instance = None\n    _dependencies = None\n\n    def __init__(self):\n        self._dependencies = {}\n        if PyNestContainer._instance is None:\n            PyNestContainer._instance = self\n\n    def get_module_by_key(self, module_key: str) -> Any:\n        module = self._dependencies.get(module_key)\n        if not module:\n            raise KeyError(f'Module with key {module_key} not found')\n        return module"
        },
        {
            "key_id": 29,
            "fqn": "nest/core/pynest_application.py/PyNestApp/is_listening",
            "imports": [],
            "code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def is_listening(self) -> bool:\n        return self._is_listening"
        },
        {
            "key_id": 31,
            "fqn": "nest/core/pynest_application.py/PyNestApp/use",
            "imports": [
                "from typing import Type"
            ],
            "code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def use(self, middleware: Type, **options) -> 'PyNestApp':\n        # Assuming middleware is a class\n        self.http_server.middleware('http')(middleware(**options))\n        return self"
        },
        {
            "key_id": 32,
            "fqn": "nest/core/pynest_application.py/PyNestApp/get_server",
            "imports": [],
            "code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def get_server(self) -> FastAPI:\n        return self.http_server"
        },
        {
            "key_id": 33,
            "fqn": "nest/core/pynest_application.py/PyNestApp/register_routes",
            "imports": [
                "from fastapi import APIRouter"
            ],
            "code": "class PyNestApp:\n    _is_listening = False\n\n    def __init__(self, container, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n        self._is_listening = False\n\n        self.container.select_context_module()\n\n    def register_routes(self):\n        for module in self.container.modules.values():\n            for controller in module.controllers:\n                router = APIRouter()\n                controller_cls = controller()\n                controller_cls.add_routes(router)\n                self.http_server.include_router(router)"
        },
        {
            "key_id": 34,
            "fqn": "nest/core/decorators/injectable.py/Injectable",
            "imports": [
                "from typing import Callable, Optional, Type"
            ],
            "code": "def Injectable(target_class: Optional[Type] = None, *args, **kwargs) -> Callable:\n    def decorator(cls):\n        # Here you can implement dependency injection logic\n        return cls\n    if target_class is None:\n        return decorator\n    else:\n        return decorator(target_class)"
        },
        {
            "key_id": 35,
            "fqn": "nest/core/decorators/controller.py/Controller",
            "imports": [
                "from typing import Optional"
            ],
            "code": "def Controller(prefix: Optional[str] = None, tag: Optional[str] = None):\n    def decorator(cls):\n        cls._prefix = prefix\n        cls._tag = tag\n        # Additional setup can be done here\n        return cls\n    return decorator"
        },
        {
            "key_id": 36,
            "fqn": "nest/core/decorators/controller.py/process_prefix",
            "imports": [],
            "code": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:\n    # Assuming this function processes and returns a formatted prefix\n    if route_prefix:\n        return f'/{route_prefix.strip('/')}'\n    return '/'"
        },
        {
            "key_id": 37,
            "fqn": "nest/core/decorators/controller.py/process_dependencies",
            "imports": [],
            "code": "def process_dependencies(cls: Type) -> None:\n    # Here you can implement logic to process and inject dependencies\n    # This is a placeholder for dependency processing logic\n    pass"
        },
        {
            "key_id": 38,
            "fqn": "nest/core/decorators/controller.py/set_instance_variables",
            "imports": [
                "from typing import Type"
            ],
            "code": "def set_instance_variables(cls: Type) -> None:\n    for name, value in vars(cls).items():\n        if not name.startswith('_') and not callable(value):\n            setattr(cls, name, value)"
        },
        {
            "key_id": 39,
            "fqn": "nest/core/decorators/controller.py/ensure_init_method",
            "imports": [
                "from typing import Type"
            ],
            "code": "def ensure_init_method(cls: Type) -> None:\n    if not hasattr(cls, '__init__'):\n        def __init__(self, *args, **kwargs):\n            super(cls, self).__init__(*args, **kwargs)\n        cls.__init__ = __init__"
        },
        {
            "key_id": 40,
            "fqn": "nest/core/decorators/controller.py/add_routes",
            "imports": [
                "from fastapi import APIRouter",
                "from typing import Type"
            ],
            "code": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:\n    for name, method in cls.__dict__.items():\n        if callable(method) and hasattr(method, 'route_info'):\n            route_info = getattr(method, 'route_info')\n            path = route_prefix + route_info.get('path', '')\n            router.add_api_route(path, method, methods=[route_info['method']], tags=[route_info.get('tag', 'default')])"
        },
        {
            "key_id": 41,
            "fqn": "nest/core/decorators/controller.py/validate_method_decorator",
            "imports": [
                "from typing import Callable"
            ],
            "code": "def validate_method_decorator(method_function: Callable, method_name: str) -> None:\n    if not hasattr(method_function, 'route_info'):\n        raise Exception(f'Method {method_name} is missing route_info attribute. Ensure the route decorator is applied.')"
        },
        {
            "key_id": 42,
            "fqn": "nest/core/decorators/controller.py/configure_method_route",
            "imports": [
                "from typing import Callable"
            ],
            "code": "def configure_method_route(method_function: Callable, route_prefix: str) -> None:\n    if hasattr(method_function, 'route_info'):\n        route_info = getattr(method_function, 'route_info')\n        route_info['path'] = route_prefix + route_info.get('path', '')"
        },
        {
            "key_id": 43,
            "fqn": "nest/core/decorators/controller.py/add_route_to_router",
            "imports": [
                "from fastapi import APIRouter"
            ],
            "code": "def add_route_to_router(router: APIRouter, method_function: callable) -> None:\n    router.add_api_route(method_function.__route__, method_function, methods=[method_function.__method__])"
        },
        {
            "key_id": 44,
            "fqn": "nest/core/decorators/http_method.py/route",
            "imports": [
                "from enum import Enum",
                "from typing import Union, List, Callable, Any"
            ],
            "code": "class HTTPMethod(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    DELETE = 'DELETE'\n    PUT = 'PUT'\n    PATCH = 'PATCH'\n    HEAD = 'HEAD'\n    OPTIONS = 'OPTIONS'\n\ndef route(http_method: HTTPMethod, route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable) -> Callable:\n        if not hasattr(func, '__routes__'):\n            func.__routes__ = []\n        func.__routes__.append((http_method.value, route_path))\n        func.__method__ = http_method.value\n        func.__route__ = route_path\n        return func\n    return decorator"
        },
        {
            "key_id": 45,
            "fqn": "nest/core/decorators/http_method.py/Get",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Get(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.GET, route_path, **kwargs)"
        },
        {
            "key_id": 46,
            "fqn": "nest/core/decorators/http_method.py/Post",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Post(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.POST, route_path, **kwargs)"
        },
        {
            "key_id": 47,
            "fqn": "nest/core/decorators/http_method.py/Delete",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Delete(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route(HTTPMethod.DELETE, route_path, **kwargs)"
        },
        {
            "key_id": 48,
            "fqn": "nest/core/decorators/http_method.py/Put",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Put(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.put, route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 49,
            "fqn": "nest/core/decorators/http_method.py/Patch",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Patch(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.patch, route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 50,
            "fqn": "nest/core/decorators/http_method.py/Head",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Head(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.head, route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 51,
            "fqn": "nest/core/decorators/http_method.py/Options",
            "imports": [
                "from typing import Callable, Union, List, Any",
                "from fastapi import APIRouter"
            ],
            "code": "def Options(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable):\n        if not hasattr(func, '_route_decorators'):\n            func._route_decorators = []\n        func._route_decorators.append((APIRouter.options, route_path, kwargs))\n        return func\n    return decorator"
        },
        {
            "key_id": 52,
            "fqn": "nest/core/decorators/database.py/db_request_handler",
            "imports": [
                "from typing import Callable",
                "from sqlalchemy.orm import Session",
                "from contextlib import contextmanager",
                "import logging"
            ],
            "code": "logger = logging.getLogger(__name__)\n\n@contextmanager\ndef db_request_handler(func: Callable):\n    try:\n        yield\n        func()\n    except Exception as e:\n        logger.error(f'Database request failed: {e}')\n        raise\n    finally:\n        logger.info('Database request succeeded')"
        },
        {
            "key_id": 53,
            "fqn": "nest/core/decorators/database.py/async_db_request_handler",
            "imports": [
                "from functools import wraps",
                "from fastapi import HTTPException"
            ],
            "code": "def async_db_request_handler(func):\n    @wraps(func)\n    async def wrapper(*args, **kwargs):\n        try:\n            return await func(*args, **kwargs)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail=str(e))\n    return wrapper"
        },
        {
            "key_id": 54,
            "fqn": "nest/core/decorators/http_code.py/HttpCode",
            "imports": [
                "from fastapi import status"
            ],
            "code": "def HttpCode(status_code: int):\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            response = await func(*args, **kwargs)\n            return response, status_code\n        return wrapper\n    return decorator"
        },
        {
            "key_id": 56,
            "fqn": "nest/core/decorators/module.py/Module/__call__",
            "imports": [],
            "code": "class Module:\n    def __init__(self, imports=None, controllers=None, providers=None, exports=None, is_global=False):\n        self.imports = imports or []\n        self.controllers = controllers or []\n        self.providers = providers or []\n        self.exports = exports or []\n        self.is_global = is_global\n\n    def __call__(self, cls):\n        cls.is_global = self.is_global\n        cls.imports = self.imports\n        cls.controllers = self.controllers\n        cls.providers = self.providers\n        cls.exports = self.exports\n        return cls"
        },
        {
            "key_id": 57,
            "fqn": "nest/core/decorators/utils.py/get_instance_variables",
            "imports": [
                "from typing import List, Type"
            ],
            "code": "def get_instance_variables(cls: Type) -> List[str]:\n    return [var for var in vars(cls) if not var.startswith('_') and not callable(getattr(cls, var))]"
        },
        {
            "key_id": 58,
            "fqn": "nest/core/decorators/utils.py/get_non_dependencies_params",
            "imports": [
                "from inspect import signature"
            ],
            "code": "def get_non_dependencies_params(cls):\n    sig = signature(cls.__init__)\n    return [param.name for param in sig.parameters.values() if param.name != 'self' and param.default is param.empty]"
        },
        {
            "key_id": 59,
            "fqn": "nest/core/decorators/utils.py/parse_dependencies",
            "imports": [
                "from typing import Type, List, Any"
            ],
            "code": "def parse_dependencies(cls: Type) -> List[Any]:\n    dependencies = []\n    for name, attribute in cls.__annotations__.items():\n        if hasattr(attribute, '__origin__') and attribute.__origin__ is not None:\n            dependencies.append((name, attribute.__origin__))\n        else:\n            dependencies.append((name, attribute))\n    return dependencies"
        },
        {
            "key_id": 60,
            "fqn": "nest/core/decorators/class_based_view.py/class_based_view",
            "imports": [
                "from fastapi import APIRouter",
                "from typing import Type, TypeVar, Callable"
            ],
            "code": "T = TypeVar('T')\n\ndef class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:\n    instance = cls()\n    for route in router.routes:\n        if isinstance(route.endpoint, Callable) and route.name in dir(cls):\n            setattr(instance, route.name, route.endpoint)\n    return instance"
        },
        {
            "key_id": 61,
            "fqn": "nest/core/decorators/class_based_view.py/_init_cbv",
            "imports": [
                "from typing import Type"
            ],
            "code": "def _init_cbv(cls: Type) -> None:\n    if not hasattr(cls, '__cbv_instance__'):\n        cls.__cbv_instance__ = cls()"
        },
        {
            "key_id": 62,
            "fqn": "nest/core/decorators/class_based_view.py/_update_cbv_route_endpoint_signature",
            "imports": [
                "from typing import Type, Union",
                "from fastapi.routing import Route, WebSocketRoute"
            ],
            "code": "def _update_cbv_route_endpoint_signature(cls: Type, route: Union[Route, WebSocketRoute]) -> None:\n    if hasattr(cls, '__annotations__'):\n        for name, type_hint in cls.__annotations__.items():\n            if name in dir(route.endpoint):\n                setattr(route.endpoint, name, getattr(cls, name))"
        },
        {
            "key_id": 64,
            "fqn": "nest/core/database/base_config.py/ConfigFactoryBase/get_config",
            "imports": [
                "from sqlalchemy.engine.url import URL"
            ],
            "code": "class ConfigFactoryBase:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'postgresql':\n            return URL.create(drivername='postgresql', username='user', password='pass', host='localhost', port=5432, database='db_name')\n        elif self.db_type == 'sqlite':\n            return URL.create(drivername='sqlite', database=':memory:')\n        else:\n            raise ValueError('Unsupported database type')"
        },
        {
            "key_id": 65,
            "fqn": "nest/core/database/base_config.py/BaseConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    raise NotImplementedError('Subclasses should implement this method to return the engine URL')"
        },
        {
            "key_id": 67,
            "fqn": "nest/core/database/base_config.py/BaseProvider/get_engine_url",
            "imports": [],
            "code": "class BaseProvider:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n\n        self.config: Dict[str, Any] = {\n            'host': self.host,\n            'db_name': self.db_name,\n            'user': self.user,\n            'password': self.password,\n            'port': self.port\n        }\n\n    def get_engine_url(self) -> str:\n        raise NotImplementedError('This method should be implemented by subclasses.')"
        },
        {
            "key_id": 69,
            "fqn": "nest/core/database/odm_provider.py/OdmProvider/check_document_models",
            "imports": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from typing import List, Optional",
                "from beanie import Document"
            ],
            "code": "class OdmProvider:\n    def __init__(self, db_type: str = 'mongodb', config_params: dict = None, document_models: Optional[List[Document]] = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.document_models = document_models\n        self.client = AsyncIOMotorClient(self.config_params['engine_url'])\n\n    def check_document_models(self):\n        if not self.document_models:\n            raise ValueError('Document models list cannot be empty')"
        },
        {
            "key_id": 71,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/create_all",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ],
            "code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def create_all(self):\n        # Assuming all models are imported and Base.metadata.create_all is called\n        Base.metadata.create_all(self.engine)"
        },
        {
            "key_id": 72,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/drop_all",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ],
            "code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: Dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def drop_all(self):\n        # Assuming all models are imported and Base.metadata.drop_all is called\n        Base.metadata.drop_all(self.engine)"
        },
        {
            "key_id": 73,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/get_db",
            "imports": [
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy import create_engine",
                "from typing import Generator"
            ],
            "code": "class BaseOrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None, async_mode: bool = False, **kwargs):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.async_mode = async_mode\n        self.engine = create_engine(self.config_params['engine_url'])\n        self.Session = sessionmaker(bind=self.engine)\n\n    def get_db(self) -> Generator:\n        db = self.Session()\n        try:\n            yield db\n        finally:\n            db.close()"
        },
        {
            "key_id": 75,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/create_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "class OrmProvider:\n    def __init__(self, db_type: str = 'postgresql', config_params: dict = None):\n        self.db_type = db_type\n        self.config_params = config_params\n        self.engine = create_async_engine(self.config_params['engine_url'], echo=True)\n        self.Session = sessionmaker(bind=self.engine, class_=AsyncSession, expire_on_commit=False)\n\n    async def create_all(self):\n        async with self.Session() as session:\n            await session.run_sync(Base.metadata.create_all)"
        },
        {
            "key_id": 76,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/drop_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import create_async_engine"
            ],
            "code": "class OrmProvider:\n    async def drop_all(self):\n        async with self.Session() as session:\n            await session.run_sync(Base.metadata.drop_all)"
        },
        {
            "key_id": 77,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/get_db",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import AsyncGenerator"
            ],
            "code": "class OrmProvider:\n    async def get_db(self) -> AsyncGenerator[AsyncSession, None]:\n        async with self.Session() as session:\n            async with session.begin():\n                yield session\n            await session.commit()"
        },
        {
            "key_id": 80,
            "fqn": "nest/core/database/odm_config.py/MongoDBConfig/get_engine_url",
            "imports": [
                "from pymongo import MongoClient"
            ],
            "code": "class MongoDBConfig:\n    def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.srv = srv\n        self.client = None\n\n    def get_engine_url(self) -> str:\n        connection_string = f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}' if self.srv else f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}'\n        return connection_string"
        },
        {
            "key_id": 82,
            "fqn": "nest/core/database/odm_config.py/ConfigFactory/get_config",
            "imports": [
                "from nest.core.database.odm_config import MongoDBConfig"
            ],
            "code": "def get_config(self):\n    if self.db_type == 'mongodb':\n        return MongoDBConfig()\n    else:\n        raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 84,
            "fqn": "nest/core/database/orm_config.py/PostgresConfig/get_engine_url",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def get_engine_url(self) -> str:\n    return f'postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 86,
            "fqn": "nest/core/database/orm_config.py/MySQLConfig/get_engine_url",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def get_engine_url(self) -> str:\n    return f'mysql+pymysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 88,
            "fqn": "nest/core/database/orm_config.py/SQLiteConfig/get_engine_url",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def get_engine_url(self) -> str:\n    return f'sqlite:///{self.db_name}'"
        },
        {
            "key_id": 90,
            "fqn": "nest/core/database/orm_config.py/AsyncSQLiteConfig/get_engine_url",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def get_engine_url(self) -> str:\n    return f'sqlite+aiosqlite:///{self.db_name}'"
        },
        {
            "key_id": 92,
            "fqn": "nest/core/database/orm_config.py/AsyncPostgresConfig/get_engine_url",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ],
            "code": "class AsyncPostgresConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'postgresql+asyncpg://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 94,
            "fqn": "nest/core/database/orm_config.py/AsyncMySQLConfig/get_engine_url",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from sqlalchemy.ext.asyncio import AsyncSession"
            ],
            "code": "class AsyncMySQLConfig:\n    def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n        self.host = host\n        self.db_name = db_name\n        self.user = user\n        self.password = password\n        self.port = port\n        self.async_engine = create_async_engine(f'mysql+aiomysql://{user}:{password}@{host}:{port}/{db_name}')\n        self.AsyncSessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.async_engine,\n            class_=AsyncSession\n        )\n\n    def get_engine_url(self) -> str:\n        return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 96,
            "fqn": "nest/core/database/orm_config.py/ConfigFactory/get_config",
            "imports": [
                "from .orm_config import PostgresConfig, MySQLConfig, SQLiteConfig"
            ],
            "code": "class ConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'postgresql':\n            return PostgresConfig\n        elif self.db_type == 'mysql':\n            return MySQLConfig\n        elif self.db_type == 'sqlite':\n            return SQLiteConfig\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 98,
            "fqn": "nest/core/database/orm_config.py/AsyncConfigFactory/get_config",
            "imports": [
                "from .orm_config import AsyncPostgresConfig, AsyncMySQLConfig, AsyncSQLiteConfig"
            ],
            "code": "class AsyncConfigFactory:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'sqlite':\n            return AsyncSQLiteConfig\n        elif self.db_type == 'postgresql':\n            return AsyncPostgresConfig\n        elif self.db_type == 'mysql':\n            return AsyncMySQLConfig\n        else:\n            raise ValueError(f'Unsupported async database type: {self.db_type}')"
        }
    ]
}