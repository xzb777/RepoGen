{
    "implementation": [
        {
            "key_id": 0,
            "fqn": "postgrestq/task_queue.py/TaskQueue/__init__",
            "imports": [
                "import logging",
                "from typing import Optional, Callable",
                "from uuid import UUID"
            ],
            "code": "def __init__(self, dsn: str, queue_name: str, table_name: str = 'task_queue', reset: bool = False, create_table: bool = False, ttl_zero_callback: Optional[Callable[[UUID, Optional[str]], None]] = None):\n    self.dsn = dsn\n    self.queue_name = queue_name\n    self.table_name = table_name\n    self.reset = reset\n    self.create_table = create_table\n    self.ttl_zero_callback = ttl_zero_callback\n    self.logger = logging.getLogger(__name__)\n    if self.create_table:\n        self._create_queue_table()\n    if self.reset:\n        self._reset()"
        },
        {
            "key_id": 2,
            "fqn": "postgrestq/task_queue.py/TaskQueue/connect",
            "imports": [
                "import psycopg"
            ],
            "code": "def connect(self) -> None:\n    try:\n        self.conn = psycopg.connect(self.dsn)\n        self.cur = self.conn.cursor()\n        self.logger.info('Successfully connected to the database')\n    except Exception as e:\n        self.logger.error(f'Error connecting to the database: {e}')\n        raise"
        },
        {
            "key_id": 10,
            "fqn": "postgrestq/task_queue.py/TaskQueue/_create_queue_table",
            "imports": [
                "import psycopg"
            ],
            "code": "def _create_queue_table(self) -> None:\n    create_table_query = '''\n    CREATE TABLE IF NOT EXISTS {} (\n        id UUID PRIMARY KEY,\n        queue_name TEXT NOT NULL,\n        task JSONB NOT NULL,\n        ttl INT NOT NULL,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        processing BOOLEAN NOT NULL DEFAULT false,\n        lease_timeout FLOAT,\n        deadline TIMESTAMP,\n        completed_at TIMESTAMP\n    )'''.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(create_table_query)\n        self.conn.commit()\n        self.logger.info('Table created successfully')\n    except Exception as e:\n        self.logger.error(f'Error creating table: {e}')\n        raise"
        },
        {
            "key_id": 11,
            "fqn": "postgrestq/task_queue.py/TaskQueue/_reset",
            "imports": [
                "import psycopg"
            ],
            "code": "def _reset(self) -> None:\n    reset_query = 'DELETE FROM {}'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(reset_query)\n        self.conn.commit()\n        self.logger.info('Queue reset successfully')\n    except Exception as e:\n        self.logger.error(f'Error resetting the queue: {e}')\n        raise"
        },
        {
            "key_id": 1,
            "fqn": "postgrestq/task_queue.py/TaskQueue/connect",
            "imports": [
                "import psycopg"
            ],
            "code": "def connect(self) -> None:\n    try:\n        self.conn = psycopg.connect(self.dsn)\n        self.cur = self.conn.cursor()\n        self.logger.info('Successfully connected to the database')\n    except Exception as e:\n        self.logger.error(f'Failed to connect to the database: {e}')\n        raise"
        },
        {
            "key_id": 2,
            "fqn": "postgrestq/task_queue.py/TaskQueue/_create_queue_table",
            "imports": [
                "import psycopg"
            ],
            "code": "def _create_queue_table(self) -> None:\n    create_table_query = '''\n    CREATE TABLE IF NOT EXISTS task_queue (\n        id UUID PRIMARY KEY,\n        queue_name TEXT NOT NULL,\n        task JSONB NOT NULL,\n        ttl INT NOT NULL,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        processing BOOLEAN NOT NULL DEFAULT false,\n        lease_timeout FLOAT,\n        deadline TIMESTAMP,\n        completed_at TIMESTAMP\n    )'''\n    try:\n        self.connect()\n        self.cur.execute(create_table_query)\n        self.conn.commit()\n        self.logger.info('Table created successfully')\n    except Exception as e:\n        self.logger.error(f'Failed to create table: {e}')\n        raise"
        },
        {
            "key_id": 10,
            "fqn": "postgrestq/task_queue.py/TaskQueue/_serialize",
            "imports": [
                "import json"
            ],
            "code": "def _serialize(self, task: Any) -> str:\n    try:\n        return json.dumps(task)\n    except TypeError as e:\n        self.logger.error(f'Error serializing task: {e}')\n        raise"
        },
        {
            "key_id": 13,
            "fqn": "postgrestq/task_queue.py/TaskQueue/_reset",
            "imports": [],
            "code": "def _reset(self) -> None:\n    reset_query = 'DELETE FROM {}'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(reset_query)\n        self.conn.commit()\n        self.logger.info('Queue reset successfully')\n    except Exception as e:\n        self.logger.error(f'Error resetting the queue: {e}')\n        raise"
        },
        {
            "key_id": 14,
            "fqn": "postgrestq/task_queue.py/TaskQueue/prune_completed_tasks",
            "imports": [
                "import psycopg"
            ],
            "code": "def prune_completed_tasks(self, before: int) -> None:\n    prune_query = '''\n    DELETE FROM {}\n    WHERE completed_at IS NOT NULL AND completed_at < (CURRENT_TIMESTAMP - INTERVAL '{} seconds')\n    '''.format(self.table_name, before)\n    try:\n        self.connect()\n        self.cur.execute(prune_query)\n        self.conn.commit()\n        self.logger.info('Pruned completed tasks older than {} seconds'.format(before))\n    except Exception as e:\n        self.logger.error(f'Failed to prune completed tasks: {e}')\n        raise"
        },
        {
            "key_id": 11,
            "fqn": "postgrestq/task_queue.py/TaskQueue/_deserialize",
            "imports": [
                "import json"
            ],
            "code": "def _deserialize(self, blob: str) -> Any:\n    try:\n        return json.loads(blob)\n    except json.JSONDecodeError as e:\n        self.logger.error(f'Failed to deserialize task data: {e}')\n        raise"
        },
        {
            "key_id": 3,
            "fqn": "postgrestq/task_queue.py/TaskQueue/__len__",
            "imports": [
                "import psycopg"
            ],
            "code": "def __len__(self) -> int:\n    count_query = 'SELECT COUNT(*) FROM {}'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(count_query)\n        count = self.cur.fetchone()[0]\n        return count\n    except Exception as e:\n        self.logger.error(f'Error getting queue length: {e}')\n        raise"
        },
        {
            "key_id": 4,
            "fqn": "postgrestq/task_queue.py/TaskQueue/add",
            "imports": [
                "import json",
                "import psycopg",
                "from uuid import uuid4"
            ],
            "code": "def add(self, task: Dict[str, Any], lease_timeout: float, ttl: int = 3) -> str:\n    insert_query = 'INSERT INTO {} (id, queue_name, task, ttl, lease_timeout, created_at, processing) VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP, %s)'.format(self.table_name)\n    task_id = str(uuid4())\n    try:\n        self.connect()\n        self.cur.execute(insert_query, (task_id, self.queue_name, json.dumps(task), ttl, lease_timeout, False))\n        self.conn.commit()\n        return task_id\n    except Exception as e:\n        self.logger.error(f'Error adding task to queue: {e}')\n        raise"
        },
        {
            "key_id": 5,
            "fqn": "postgrestq/task_queue.py/TaskQueue/get",
            "imports": [
                "import psycopg",
                "from uuid import UUID"
            ],
            "code": "def get(self) -> Tuple[Optional[Dict[str, Any]], Optional[UUID]]:\n    get_query = 'UPDATE {} SET processing = TRUE, deadline = CURRENT_TIMESTAMP + INTERVAL '1 minute' * lease_timeout WHERE id = (SELECT id FROM {} WHERE processing = FALSE AND queue_name = %s AND ttl > 0 ORDER BY created_at FOR UPDATE SKIP LOCKED LIMIT 1) RETURNING id, task'.format(self.table_name, self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(get_query, (self.queue_name,))\n        result = self.cur.fetchone()\n        if result:\n            return self._deserialize(result[1]), UUID(result[0])\n        return None, None\n    except Exception as e:\n        self.logger.error(f'Error retrieving task from queue: {e}')\n        raise"
        },
        {
            "key_id": 6,
            "fqn": "postgrestq/task_queue.py/TaskQueue/complete",
            "imports": [
                "import psycopg"
            ],
            "code": "def complete(self, task_id: Optional[UUID]) -> None:\n    complete_query = 'UPDATE {} SET completed_at = CURRENT_TIMESTAMP WHERE id = %s'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(complete_query, (str(task_id),))\n        self.conn.commit()\n        self.logger.info(f'Task {task_id} marked as complete')\n    except Exception as e:\n        self.logger.error(f'Error marking task as complete: {e}')\n        raise"
        },
        {
            "key_id": 7,
            "fqn": "postgrestq/task_queue.py/TaskQueue/is_empty",
            "imports": [
                "import psycopg"
            ],
            "code": "def is_empty(self) -> bool:\n    query = 'SELECT COUNT(*) FROM {} WHERE completed_at IS NULL AND processing = FALSE'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(query)\n        result = self.cur.fetchone()\n        return result[0] == 0\n    except Exception as e:\n        self.logger.error(f'Error checking if queue is empty: {e}')\n        raise"
        },
        {
            "key_id": 8,
            "fqn": "postgrestq/task_queue.py/TaskQueue/check_expired_leases",
            "imports": [
                "import psycopg",
                "from datetime import datetime, timedelta"
            ],
            "code": "def check_expired_leases(self) -> None:\n    now = datetime.now()\n    query = 'UPDATE {} SET processing = FALSE, completed_at = NULL WHERE deadline <= %s AND processing = TRUE'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(query, (now,))\n        self.conn.commit()\n        updated_rows = self.cur.rowcount\n        self.logger.info(f'{updated_rows} tasks had their leases expired and were reset.')\n    except Exception as e:\n        self.logger.error(f'Error resetting expired leases: {e}')\n        raise"
        },
        {
            "key_id": 9,
            "fqn": "postgrestq/task_queue.py/TaskQueue/get_updated_expired_task",
            "imports": [
                "import psycopg",
                "from uuid import UUID"
            ],
            "code": "def get_updated_expired_task(self, task_id: UUID) -> tuple:\n    query = 'SELECT task, ttl FROM {} WHERE id = %s AND completed_at IS NULL AND processing = TRUE'.format(self.table_name)\n    try:\n        self.connect()\n        self.cur.execute(query, (task_id,))\n        result = self.cur.fetchone()\n        if result:\n            return self._deserialize(result[0]), result[1]\n        return None, None\n    except Exception as e:\n        self.logger.error(f'Error fetching updated expired task: {e}')\n        raise"
        },
        {
            "key_id": 12,
            "fqn": "postgrestq/task_queue.py/TaskQueue/reschedule",
            "imports": [
                "import psycopg",
                "from datetime import datetime, timedelta"
            ],
            "code": "def reschedule(self, task_id: UUID) -> None:\n    query = 'UPDATE {} SET processing = FALSE, completed_at = NULL, deadline = %s WHERE id = %s AND processing = TRUE'.format(self.table_name)\n    new_deadline = datetime.now() + timedelta(seconds=self.lease_timeout)\n    try:\n        self.connect()\n        self.cur.execute(query, (new_deadline, task_id))\n        self.conn.commit()\n        if self.cur.rowcount == 0:\n            self.logger.info(f'No task was rescheduled with id {task_id}')\n        else:\n            self.logger.info(f'Task with id {task_id} was successfully rescheduled')\n    except Exception as e:\n        self.logger.error(f'Error rescheduling task: {e}')\n        raise"
        },
        {
            "key_id": 15,
            "fqn": "postgrestq/task_queue.py/TaskQueue/__iter__",
            "imports": [
                "import psycopg",
                "from uuid import UUID",
                "from time import sleep"
            ],
            "code": "def __iter__(self) -> 'Iterator[tuple]':\n    while not self.is_empty():\n        task, task_id = self.get()\n        if task is not None:\n            yield task, task_id\n            self.complete(task_id)\n        else:\n            sleep(1)"
        }
    ]
}