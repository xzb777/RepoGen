[
    {
        "fqn_list": "santorinai/board.py/Board/__init__",
        "new_code": """
class Board:
    def __init__(self, number_of_players: int):
        self.number_of_players = number_of_players
        self.players = []
        self.pawns = []
        self.turn = 1
        self.game_over = False
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_move_possible",
        "new_code": """
    def is_move_possible(self, start_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[bool, str]:
        if not self.is_position_valid(start_pos) or not self.is_position_valid(end_pos):
            return False, "Invalid positions"
        if not self.is_position_adjacent(start_pos, end_pos):
            return False, "Positions are not adjacent"
        if not self.is_pawn_on_position(start_pos):
            return False, "No pawn on start position"
        if self.is_pawn_on_position(end_pos):
            return False, "End position is occupied"
        return True, "Move is possible"
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_position_within_board",
        "new_code": """
    def is_position_within_board(self, position: Tuple[int, int]) -> bool:
        x, y = position
        return 0 <= x < 5 and 0 <= y < 5
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_position_adjacent",
        "new_code": """
    def is_position_adjacent(self, position1: Tuple[int, int], position2: Tuple[int, int]) -> bool:
        x1, y1 = position1
        x2, y2 = position2
        return abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_pawn_on_position",
        "new_code": """
    def is_pawn_on_position(self, position: Tuple[int, int]) -> bool:
        for pawn in self.pawns:
            if pawn.position == position:
                return True
        return False
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_build_possible",
        "new_code": """
    def is_build_possible(self, builder_position: Tuple[int, int], build_position: Tuple[int, int]) -> bool:
        if not self.is_position_valid(builder_position) or not self.is_position_valid(build_position):
            return False
        if not self.is_position_adjacent(builder_position, build_position):
            return False
        if self.is_pawn_on_position(build_position):
            return False
        return True
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_player_pawns",
        "new_code": """
    def get_player_pawns(self, player_number: int) -> List[Pawn]:
        player_pawns = []
        for pawn in self.pawns:
            if pawn.player_number == player_number:
                player_pawns.append(pawn)
        return player_pawns
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_player_pawn",
        "new_code": """
    def get_player_pawn(self, player_number: int, pawn_number: int) -> Pawn:
        for pawn in self.pawns:
            if pawn.player_number == player_number and pawn.number == pawn_number:
                return pawn
        return None
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_playing_pawn",
        "new_code": """
    def get_playing_pawn(self, pawn_number: int) -> Pawn:
        for pawn in self.pawns:
            if pawn.number == pawn_number:
                return pawn
        return None
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_first_unplaced_player_pawn",
        "new_code": """
    def get_first_unplaced_player_pawn(self, player_number: int) -> Pawn:
        for pawn in self.pawns:
            if pawn.player_number == player_number and pawn.position is None:
                return pawn
        return None
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_possible_movement_positions",
        "new_code": """
    def get_possible_movement_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:
        possible_positions = []
        x, y = pawn.position
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                new_x = x + dx
                new_y = y + dy
                new_pos = (new_x, new_y)
                if self.is_position_valid(new_pos) and not self.is_pawn_on_position(new_pos):
                    possible_positions.append(new_pos)
        return possible_positions
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_possible_building_positions",
        "new_code": """
    def get_possible_building_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:
        possible_positions = []
        x, y = pawn.position
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                new_x = x + dx
                new_y = y + dy
                new_pos = (new_x, new_y)
                if self.is_position_valid(new_pos) and not self.is_pawn_on_position(new_pos):
                    possible_positions.append(new_pos)
        return possible_positions
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/get_possible_movement_and_building_positions",
        "new_code": """
    def get_possible_movement_and_building_positions(self, pawn: Pawn):
        possible_positions = []
        x, y = pawn.position
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                new_x = x + dx
                new_y = y + dy
                new_pos = (new_x, new_y)
                if self.is_position_valid(new_pos) and not self.is_pawn_on_position(new_pos):
                    possible_positions.append((new_pos, new_pos))
        return possible_positions
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/place_pawn",
        "new_code": """
    def place_pawn(self, position: Tuple[int, int]) -> Tuple[bool, str]:
        if not self.is_position_valid(position):
            return False, "Invalid position"
        if self.is_pawn_on_position(position):
            return False, "Position is occupied"
        pawn = self.get_first_unplaced_player_pawn(self.turn)
        if pawn is None:
            return False, "No unplaced pawn available"
        pawn.move(position)
        return True, "Pawn placed successfully"
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/play_move",
        "new_code": """
    def play_move(self, pawn_number: int, move_position: Tuple[int, int], build_position: Tuple[int, int]) -> Tuple[bool, str]:
        pawn = self.get_playing_pawn(pawn_number)
        if pawn is None:
            return False, "Invalid pawn number"
        if pawn.position is None:
            return False, "Pawn is not placed on the board"
        if not self.is_move_possible(pawn.position, move_position):
            return False, "Invalid move position"
        if not self.is_build_possible(move_position, build_position):
            return False, "Invalid build position"
        pawn.move(move_position)
        return True, "Move played successfully"
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_position_valid",
        "new_code": """
    def is_position_valid(self, pos: Tuple[int, int]):
        return self.is_position_within_board(pos) and not self.is_pawn_on_position(pos)
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_game_over",
        "new_code": """
    def is_game_over(self):
        return self.game_over
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/is_everyone_stuck",
        "new_code": """
    def is_everyone_stuck(self):
        for pawn in self.pawns:
            if pawn.position is not None:
                return False
        return True
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/next_turn",
        "new_code": """
    def next_turn(self):
        self.turn = (self.turn % self.number_of_players) + 1
        return self.turn
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/copy",
        "new_code": """
    def copy(self) -> "Board":
        new_board = Board(self.number_of_players)
        new_board.players = self.players.copy()
        new_board.pawns = [pawn.copy() for pawn in self.pawns]
        new_board.turn = self.turn
        new_board.game_over = self.game_over
        return new_board
"""
    },
    {
        "fqn_list": "santorinai/board.py/Board/__repr__",
        "new_code": """
    def __repr__(self) -> str:
        return f"Board with {self.number_of_players} players"
"""
    },
    {
        "fqn_list": "santorinai/player.py/Player/__init__",
        "new_code": """
class Player:
    def __init__(self, player_number: int, log_level = 0) -> None:
        self.player_number = player_number
        self.log_level = log_level
"""
    },
    {
        "fqn_list": "santorinai/player.py/Player/name",
        "new_code": """
    def name(self) -> str:
        pass
"""
    },
    {
        "fqn_list": "santorinai/player.py/Player/place_pawn",
        "new_code": """
    def place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:
        pass
"""
    },
    {
        "fqn_list": "santorinai/player.py/Player/play_move",
        "new_code": """
    def play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:
        pass
"""
    },
    {
        "fqn_list": "santorinai/pawn.py/Pawn/__init__",
        "new_code": """
class Pawn:
    def __init__(self, number: int, order: int, player_number: int):
        self.number = number
        self.order = order
        self.player_number = player_number
        self.position = None
"""
    },
    {
        "fqn_list": "santorinai/pawn.py/Pawn/move",
        "new_code": """
    def move(self, new_pos: Tuple[int, int]):
        self.position = new_pos
"""
    },
    {
        "fqn_list": "santorinai/pawn.py/Pawn/copy",
        "new_code": """
    def copy(self) -> "Pawn":
        new_pawn = Pawn(self.number, self.order, self.player_number)
        new_pawn.position = self.position
        return new_pawn
"""
    },
    {
        "fqn_list": "santorinai/pawn.py/Pawn/__repr__",
        "new_code": """
    def __repr__(self):
        return f"Pawn {self.number} (Player {self.player_number}) at {self.position}"
"""
    },
    {
        "fqn_list": "santorinai/board_displayer/board_displayer.py/init_window",
        "new_code": """
import PySimpleGUI as sg
def init_window(player_names):
    layout = [[sg.Text('SantorinAI Board', size=(20, 1), justification='center', font=("Helvetica", 20))],
              [sg.Graph(canvas_size=(800, 800), graph_bottom_left=(0, 0), graph_top_right=(800, 800), background_color='white', key='graph')],
              [sg.Button('Exit')]]
    window = sg.Window('SantorinAI Board', layout, finalize=True)
    return window
"""
    },
    {
        "fqn_list": "santorinai/board_displayer/board_displayer.py/draw_isometric_cube",
        "new_code": """
def draw_isometric_cube(window: sg.Window, x, y, size, cube_heigth, color, line_color, line_width):
    graph = window['graph']
    graph.draw_rectangle((x, y), (x + size, y + size), fill_color=color, line_color=line_color, line_width=line_width)
    graph.draw_line((x, y), (x + size, y), color=line_color, width=line_width)
    graph.draw_line((x, y), (x, y + size), color=line_color, width=line_width)
    graph.draw_line((x + size, y), (x + size, y + size), color=line_color, width=line_width)
    graph.draw_line((x, y + size), (x + size, y + size), color=line_color, width=line_width)
    graph.draw_line((x, y, cube_heigth), (x + size, y, cube_heigth), color=line_color, width=line_width)
    graph.draw_line((x, y, cube_heigth), (x, y + size, cube_heigth), color=line_color, width=line_width)
    graph.draw_line((x + size, y, cube_heigth), (x + size, y + size, cube_heigth), color=line_color, width=line_width)
    graph.draw_line((x, y + size, cube_heigth), (x + size, y + size, cube_heigth), color=line_color, width=line_width)
    graph.draw_line((x, y, cube_heigth), (x, y, 0), color=line_color, width=line_width)
    graph.draw_line((x + size, y, cube_heigth), (x + size, y, 0), color=line_color, width=line_width)
    graph.draw_line((x, y + size, cube_heigth), (x, y + size, 0), color=line_color, width=line_width)
    graph.draw_line((x + size, y + size, cube_heigth), (x + size, y + size, 0), color=line_color, width=line_width)
    graph.draw_line((x, y, 0), (x + size, y, 0), color=line_color, width=line_width)
    graph.draw_line((x, y, 0), (x, y + size, 0), color=line_color, width=line_width)
    graph.draw_line((x + size, y, 0), (x + size, y + size, 0), color=line_color, width=line_width)
    graph.draw_line((x, y + size, 0), (x + size, y + size, 0), color=line_color, width=line_width)
"""
    },
    {
        "fqn_list": "santorinai/board_displayer/board_displayer.py/update_board",
        "new_code": """
def update_board(window: sg.Window, board: Board):
    graph = window['graph']
    graph.erase()
    for i in range(5):
        for j in range(5):
            x = i * 160
            y = j * 160
            draw_isometric_cube(window, x, y, 160, 80, 'white', 'black', 2)
    pawns = []
    for player_number in range(1, board.number_of_players + 1):
        player_pawns = board.get_player_pawns(player_number)
        pawns.extend(player_pawns)
    for pawn in pawns:
        x = pawn.position[0] * 160
        y = pawn.position[1] * 160
        draw_isometric_cube(window, x, y, 160, 80, 'blue', 'black', 2)
    window.read(timeout=0)
"""
    },
    {
        "fqn_list": "santorinai/board_displayer/board_displayer.py/close_window",
        "new_code": """
def close_window(window):
    window.close()
"""
    },
    {
        "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/__init__",
        "new_code": """
class FirstChoicePlayer:
    def __init__(self, player_number, log_level = 0) -> None:
        self.player_number = player_number
        self.log_level = log_level
"""
    },
    {
        "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/name",
        "new_code": """
    def name(self):
        return "First Choice Player"
"""
    },
    {
        "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/place_pawn",
        "new_code": """
    def place_pawn(self, board: Board, pawn: Pawn):
        available_positions = board.get_possible_movement_positions(pawn)
        placement_position = available_positions[0]
        success, message = board.place_pawn(placement_position)
        if success:
            print(f"Player {self.player_number} placed pawn at position {placement_position}")
        else:
            print(f"Player {self.player_number} failed to place pawn at position {placement_position}")
            print(f"Reason: {message}")
"""
    },
    {
        "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/play_move",
        "new_code": """
    def play_move(self, board: Board):
        pawns = board.get_player_pawns(self.player_number)
        pawn = random.choice(pawns)
        movement_positions = board.get_possible_movement_positions(pawn)
        move_position = movement_positions[0]
        building_positions = board.get_possible_building_positions(pawn)
        build_position = building_positions[0]
        return pawn.number, move_position, build_position
"""
    },
    {
        "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/__init__",
        "new_code": """
class RandomPlayer:
    def __init__(self, player_number, log_level = 0) -> None:
        self.player_number = player_number
        self.log_level = log_level
"""
    },
    {
        "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/name",
        "new_code": """
    def name(self):
        return "Random Player"
"""
    },
    {
        "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/place_pawn",
        "new_code": """
    def place_pawn(self, board: Board, pawn: Pawn):
        available_positions = board.get_possible_movement_positions(pawn)
        placement_position = random.choice(available_positions)
        success, message = board.place_pawn(placement_position)
        if success:
            print(f"Player {self.player_number} placed pawn at position {placement_position}")
        else:
            print(f"Player {self.player_number} failed to place pawn at position {placement_position}")
            print(f"Reason: {message}")
"""
    },
    {
        "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/play_move",
        "new_code": """
    def play_move(self, board: Board):
        pawns = board.get_player_pawns(self.player_number)
        pawn = random.choice(pawns)
        movement_positions = board.get_possible_movement_positions(pawn)
        move_position = random.choice(movement_positions)
        building_positions = board.get_possible_building_positions(pawn)
        build_position = random.choice(building_positions)
        return pawn.number, move_position, build_position
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/__init__",
        "new_code": """
class BasicPlayer:
    def __init__(self, player_number, log_level = 0) -> None:
        self.player_number = player_number
        self.log_level = log_level
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/name",
        "new_code": """
    def name(self):
        return "Basic Player"
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_ally_pawn",
        "new_code": """
    def get_ally_pawn(self, board: Board, our_pawn: Pawn) -> Tuple[Pawn, None]:
        ally_pawns = board.get_player_pawns(self.player_number)
        for pawn in ally_pawns:
            if pawn != our_pawn:
                return pawn
        return None
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_enemy_pawns",
        "new_code": """
    def get_enemy_pawns(self, board, our_pawn):
        enemy_pawns = []
        for player_number in range(1, board.number_of_players + 1):
            if player_number != self.player_number:
                enemy_pawns.extend(board.get_player_pawns(player_number))
        return enemy_pawns
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_winning_moves",
        "new_code": """
    def get_winning_moves(self, board: Board, pawn):
        winning_moves = []
        possible_moves = board.get_possible_movement_and_building_positions(pawn)
        for move_position, build_position in possible_moves:
            temp_board = board.copy()
            success, _ = temp_board.play_move(pawn.number, move_position, build_position)
            if success and temp_board.is_game_over():
                winning_moves.append((move_position, build_position))
        return winning_moves
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/place_pawn",
        "new_code": """
    def place_pawn(self, board: Board, pawn):
        available_positions = board.get_possible_movement_positions(pawn)
        placement_position = available_positions[0]
        success, message = board.place_pawn(placement_position)
        if success:
            print(f"Player {self.player_number} placed pawn at position {placement_position}")
        else:
            print(f"Player {self.player_number} failed to place pawn at position {placement_position}")
            print(f"Reason: {message}")
"""
    },
    {
        "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/play_move",
        "new_code": """
    def play_move(self, board):
        pawns = board.get_player_pawns(self.player_number)
        playing_pawn = pawns[0]
        ally_pawn = self.get_ally_pawn(board, playing_pawn)
        enemy_pawns = self.get_enemy_pawns(board, playing_pawn)
        winning_moves = self.get_winning_moves(board, playing_pawn)
        if winning_moves:
            move_position, build_position = random.choice(winning_moves)
            return playing_pawn.number, move_position, build_position
        movement_positions = board.get_possible_movement_positions(playing_pawn)
        move_position = random.choice(movement_positions)
        building_positions = board.get_possible_building_positions(playing_pawn)
        build_position = random.choice(building_positions)
        return playing_pawn.number, move_position, build_position
"""
    }
]
