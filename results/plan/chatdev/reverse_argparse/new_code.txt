[
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/quote_arg_if_necessary",
        "new_code": "def quote_arg_if_necessary(arg: str) -> str:\n    if ' ' in arg:\n        return f'\"{arg}\"'\n    return arg"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/__init__",
        "new_code": "def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):\n    self.parser = parser\n    self.namespace = namespace\n    self.indent = indent\n    self.command_line_invocation = []"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
        "new_code": "def _unparse_args(self) -> None:\n    for action in self.parser._actions:\n        self._unparse_action(action)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
        "new_code": "def _unparse_action(self, action: Action) -> None:\n    if self._arg_is_default_and_help_is_suppressed(action):\n        return\n    if action.option_strings:\n        option_string = self._get_option_string(action)\n        self._append_arg(option_string)\n    if action.nargs == 0:\n        self._unparse_store_action(action)\n    elif action.nargs == 1:\n        self._unparse_store_action(action)\n    elif action.nargs == '+':\n        self._unparse_append_action(action)\n    elif action.nargs == '*':\n        self._unparse_append_action(action)\n    elif action.nargs == '?':\n        self._unparse_boolean_optional_action(action)\n    elif action.nargs is argparse.REMAINDER:\n        self._unparse_boolean_optional_action(action)\n    elif isinstance(action.nargs, int):\n        self._unparse_count_action(action)\n    elif isinstance(action.nargs, str):\n        self._unparse_sub_parsers_action(action)\n    else:\n        raise ValueError(f'Unsupported nargs value: {action.nargs}')"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
        "new_code": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n    return action.default == action.dest and action.help == argparse.SUPPRESS and getattr(self.namespace, action.dest) is not None"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
        "new_code": "def get_effective_command_line_invocation(self) -> str:\n    self._unparse_args()\n    return ' '.join(self.command_line_invocation)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
        "new_code": "def get_pretty_command_line_invocation(self) -> str:\n    self._unparse_args()\n    indent_str = self._indent_str()\n    return '\\n'.join([f'{indent_str}{arg}' for arg in self.command_line_invocation])"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
        "new_code": "def _get_long_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    return [opt for opt in option_strings if opt.startswith('--')]"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
        "new_code": "def _get_short_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n    return [opt for opt in option_strings if opt.startswith('-') and len(opt) == 2]"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
        "new_code": "def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:\n    option_strings = action.option_strings\n    if prefer_short:\n        short_option_strings = self._get_short_option_strings(option_strings)\n        if short_option_strings:\n            return short_option_strings[0]\n    long_option_strings = self._get_long_option_strings(option_strings)\n    if long_option_strings:\n        return long_option_strings[0]\n    return option_strings[0]"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
        "new_code": "def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:\n    for arg_list in args:\n        self._append_list_of_args(arg_list)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_args",
        "new_code": "def _append_list_of_args(self, args: List[str]) -> None:\n    for arg in args:\n        self._append_arg(arg)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_arg",
        "new_code": "def _append_arg(self, arg: str) -> None:\n    self.command_line_invocation.append(quote_arg_if_necessary(arg))"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_indent_str",
        "new_code": "def _indent_str(self) -> str:\n    return ' ' * self.indent"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_action",
        "new_code": "def _unparse_store_action(self, action: Action) -> None:\n    value = getattr(self.namespace, action.dest)\n    if value is not None:\n        self._append_arg(str(value))"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_const_action",
        "new_code": "def _unparse_store_const_action(self, action: Action) -> None:\n    value = getattr(self.namespace, action.dest)\n    if value == action.const:\n        self._append_arg(self._get_option_string(action))"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_true_action",
        "new_code": "def _unparse_store_true_action(self, action: Action) -> None:\n    value = getattr(self.namespace, action.dest)\n    if value:\n        self._append_arg(self._get_option_string(action))"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_false_action",
        "new_code": "def _unparse_store_false_action(self, action: Action) -> None:\n    value = getattr(self.namespace, action.dest)\n    if not value:\n        self._append_arg(self._get_option_string(action))"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_action",
        "new_code": "def _unparse_append_action(self, action: Action) -> None:\n    values = getattr(self.namespace, action.dest)\n    if values:\n        self._append_list_of_args(values)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_const_action",
        "new_code": "def _unparse_append_const_action(self, action: Action) -> None:\n    values = getattr(self.namespace, action.dest)\n    if action.const in values:\n        self._append_list_of_args(values)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_count_action",
        "new_code": "def _unparse_count_action(self, action: Action) -> None:\n    count = getattr(self.namespace, action.dest)\n    if count > 0:\n        self._append_list_of_args([self._get_option_string(action)] * count)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_sub_parsers_action",
        "new_code": "def _unparse_sub_parsers_action(self, action: Action) -> None:\n    sub_parser = getattr(self.namespace, action.dest)\n    if sub_parser:\n        self._append_arg(sub_parser.prog)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_extend_action",
        "new_code": "def _unparse_extend_action(self, action: Action) -> None:\n    values = getattr(self.namespace, action.dest)\n    if values:\n        self._append_list_of_list_of_args(values)"
    },
    {
        "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_boolean_optional_action",
        "new_code": "def _unparse_boolean_optional_action(self, action: Action) -> None:\n    value = getattr(self.namespace, action.dest)\n    if value:\n        self._append_arg(self._get_option_string(action))"
    }
]
