{
    "PyNest": {
        "generated code": "'''\nThis is the main file of the PyNest framework.\n'''\nfrom fastapi import FastAPI\nfrom nest.core.pynest_factory import PyNestFactory\nfrom nest.core.pynest_container import PyNestContainer\nfrom nest.core.pynest_application import PyNestApp\n# Create the PyNest container\ncontainer = PyNestContainer()\n# Create the FastAPI instance\nhttp_server = FastAPI()\n# Create the PyNest application\napp = PyNestApp(container, http_server)\n# Create the PyNest factory\nfactory = PyNestFactory()\n# Create the main module\nmain_module = factory.create(container, http_server)\n# Register the main module\ncontainer.register_module(main_module)\n# Register the routes\napp.register_routes()\n# Get the FastAPI server\nserver = app.get_server()\n# Run the server\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(server, host=\"0.0.0.0\", port=8000)\n'''\nThis file contains the PyNestApplicationContext class, which represents the application context in the PyNest framework.\n'''\nfrom nest.core.pynest_container import PyNestContainer\nclass PyNestApplicationContext:\n    def __init__(self, container: PyNestContainer):\n        self.container = container\n    def is_initialized(self) -> bool:\n        return self.container is not None\n    def init(self):\n        self.container = PyNestContainer()\n'''\nThis file contains the PyNestFactory class, which is responsible for creating the PyNest application.\n'''\nfrom typing import Type\nfrom fastapi import FastAPI\nfrom nest.core.pynest_container import PyNestContainer\nfrom nest.core.pynest_application import PyNestApp\nclass PyNestFactory:\n    @staticmethod\n    def create(main_module: Type[ModuleType], http_server: FastAPI) -> PyNestApp:\n        container = PyNestContainer()\n        app = PyNestApp(container, http_server)\n        container.register_module(main_module)\n        return app\n'''\nThis file contains the PyNestContainer class, which is responsible for managing the modules and dependencies in the PyNest framework.\n'''\nclass PyNestContainer:\n    def __init__(self):\n        self.modules = {}\n        self.modules_metadata = {}\n        self.providers = {}\n        self.controllers = {}\n    def register_module(self, module):\n        self.modules[module.token] = module\n    def add_metadata(self, token, module_metadata):\n        self.modules_metadata[token] = module_metadata\n    def add_provider(self, token, provider):\n        self.providers[token] = provider\n    def add_controller(self, token, controller):\n        self.controllers[token] = controller\n    def clear(self):\n        self.modules.clear()\n        self.modules_metadata.clear()\n        self.providers.clear()\n        self.controllers.clear()\n'''\nThis file contains the PyNestApp class, which represents the PyNest application.\n'''\nfrom fastapi import FastAPI\nfrom nest.core.pynest_container import PyNestContainer\nclass PyNestApp:\n    def __init__(self, container: PyNestContainer, http_server: FastAPI):\n        self.container = container\n        self.http_server = http_server\n    def register_routes(self):\n        for controller in self.container.controllers.values():\n            self.http_server.include_router(controller.router)\n    def get_server(self) -> FastAPI:\n        return self.http_server\n",
        "design": {
            "0": {
                "relative_path": "nest/core/pynest_app_context.py",
                "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
                "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
                "signature": "def is_initialized(self):"
            },
            "1": {
                "relative_path": "nest/core/pynest_app_context.py",
                "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
                "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
                "signature": "def is_initialized(self, value: bool):"
            },
            "2": {
                "relative_path": "nest/core/pynest_app_context.py",
                "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/init",
                "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
                "signature": "def init(self):"
            },
            "3": {
                "relative_path": "nest/core/pynest_app_context.py",
                "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/__init__",
                "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
                "signature": "def __init__(self, container: PyNestContainer, context_module: Union[Module, None] = None):"
            },
            "4": {
                "relative_path": "nest/core/pynest_app_context.py",
                "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/select_context_module",
                "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
                "signature": "def select_context_module(self):"
            },
            "5": {
                "relative_path": "nest/core/pynest_app_context.py",
                "fqn_list": "nest/core/pynest_app_context.py/PyNestApplicationContext/select",
                "class": "nest/core/pynest_app_context.py.PyNestApplicationContext",
                "signature": "def select(self, module: T) -> T:"
            },
            "6": {
                "relative_path": "nest/core/pynest_factory.py",
                "fqn_list": "nest/core/pynest_factory.py/PyNestFactory/create",
                "class": "nest/core/pynest_factory.py.PyNestFactory",
                "signature": "def create(main_module: Type[ModuleType], **kwargs) -> PyNestApp:"
            },
            "7": {
                "relative_path": "nest/core/pynest_factory.py",
                "fqn_list": "nest/core/pynest_factory.py/PyNestFactory/_create_server",
                "class": "nest/core/pynest_factory.py.PyNestFactory",
                "signature": "def _create_server(**kwargs) -> FastAPI:"
            },
            "8": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/__new__",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def __new__(cls):"
            },
            "9": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/__init__",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def __init__(self):"
            },
            "10": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/modules",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def modules(self):"
            },
            "11": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/module_token_factory",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def module_token_factory(self):"
            },
            "12": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/modules_metadata",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def modules_metadata(self):"
            },
            "13": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/module_compiler",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def module_compiler(self):"
            },
            "14": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/get_instance",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def get_instance(self, dependency: TProvider, provider: Optional[Union[TProvider, TController]] = None):"
            },
            "15": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_module",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_module(self, metaclass) -> dict:"
            },
            "16": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/register_module",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def register_module(self, module_factory: ModuleFactory) -> Module:"
            },
            "17": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_metadata",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_metadata(self, token: str, module_metadata) -> None:"
            },
            "18": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_import",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_import(self, token: str):"
            },
            "19": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_modules",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_modules(self, modules: List[Any]) -> None:"
            },
            "20": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_providers",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_providers(self, providers: List[Any], module_token: str) -> None:"
            },
            "21": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_provider",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_provider(self, token: str, provider):"
            },
            "22": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/_get_providers",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def _get_providers(self, token: str) -> List[Any]:"
            },
            "23": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_controllers",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_controllers(self, controllers: List[Any], module_token: str) -> None:"
            },
            "24": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/_add_controller",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def _add_controller(self, token: str, controller: TController) -> None:"
            },
            "25": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/_get_controllers",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def _get_controllers(self, token: str) -> List[Any]:"
            },
            "26": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/clear",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def clear(self):"
            },
            "27": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/add_related_module",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def add_related_module(self, related_module, token: str) -> None:"
            },
            "28": {
                "relative_path": "nest/core/pynest_container.py",
                "fqn_list": "nest/core/pynest_container.py/PyNestContainer/get_module_by_key",
                "class": "nest/core/pynest_container.py.PyNestContainer",
                "signature": "def get_module_by_key(self, module_key: str) -> Module:"
            },
            "29": {
                "relative_path": "nest/core/pynest_application.py",
                "fqn_list": "nest/core/pynest_application.py/PyNestApp/is_listening",
                "class": "nest/core/pynest_application.py.PyNestApp",
                "signature": "def is_listening(self) -> bool:"
            },
            "30": {
                "relative_path": "nest/core/pynest_application.py",
                "fqn_list": "nest/core/pynest_application.py/PyNestApp/__init__",
                "class": "nest/core/pynest_application.py.PyNestApp",
                "signature": "def __init__(self, container: PyNestContainer, http_server: FastAPI):"
            },
            "31": {
                "relative_path": "nest/core/pynest_application.py",
                "fqn_list": "nest/core/pynest_application.py/PyNestApp/use",
                "class": "nest/core/pynest_application.py.PyNestApp",
                "signature": "def use(self, middleware: type, **options) -> \"PyNestApp\":"
            },
            "32": {
                "relative_path": "nest/core/pynest_application.py",
                "fqn_list": "nest/core/pynest_application.py/PyNestApp/get_server",
                "class": "nest/core/pynest_application.py.PyNestApp",
                "signature": "def get_server(self) -> FastAPI:"
            },
            "33": {
                "relative_path": "nest/core/pynest_application.py",
                "fqn_list": "nest/core/pynest_application.py/PyNestApp/register_routes",
                "class": "nest/core/pynest_application.py.PyNestApp",
                "signature": "def register_routes(self):"
            },
            "34": {
                "relative_path": "nest/core/decorators/injectable.py",
                "fqn_list": "nest/core/decorators/injectable.py/Injectable",
                "class": null,
                "signature": "def Injectable(target_class: Optional[Type] = None, *args, **kwargs) -> Callable:"
            },
            "35": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/Controller",
                "class": null,
                "signature": "def Controller(prefix: Optional[str] = None, tag: Optional[str] = None):"
            },
            "36": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/process_prefix",
                "class": null,
                "signature": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:"
            },
            "37": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/process_dependencies",
                "class": null,
                "signature": "def process_dependencies(cls: Type) -> None:"
            },
            "38": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/set_instance_variables",
                "class": null,
                "signature": "def set_instance_variables(cls: Type) -> None:"
            },
            "39": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/ensure_init_method",
                "class": null,
                "signature": "def ensure_init_method(cls: Type) -> None:"
            },
            "40": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/add_routes",
                "class": null,
                "signature": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:"
            },
            "41": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/validate_method_decorator",
                "class": null,
                "signature": "def validate_method_decorator(method_function: callable, method_name: str) -> None:"
            },
            "42": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/configure_method_route",
                "class": null,
                "signature": "def configure_method_route(method_function: callable, route_prefix: str) -> None:"
            },
            "43": {
                "relative_path": "nest/core/decorators/controller.py",
                "fqn_list": "nest/core/decorators/controller.py/add_route_to_router",
                "class": null,
                "signature": "def add_route_to_router(router: APIRouter, method_function: callable) -> None:"
            },
            "44": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/route",
                "class": null,
                "signature": "def route(http_method: HTTPMethod, route_path: Union[str, List[str]] = \"/\", **kwargs):"
            },
            "45": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Get",
                "class": null,
                "signature": "def Get(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "46": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Post",
                "class": null,
                "signature": "def Post(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "47": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Delete",
                "class": null,
                "signature": "def Delete(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "48": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Put",
                "class": null,
                "signature": "def Put(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "49": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Patch",
                "class": null,
                "signature": "def Patch(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "50": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Head",
                "class": null,
                "signature": "def Head(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "51": {
                "relative_path": "nest/core/decorators/http_method.py",
                "fqn_list": "nest/core/decorators/http_method.py/Options",
                "class": null,
                "signature": "def Options(route_path: Union[str, List[str]] = \"/\", **kwargs) -> Callable[..., Any]:"
            },
            "52": {
                "relative_path": "nest/core/decorators/database.py",
                "fqn_list": "nest/core/decorators/database.py/db_request_handler",
                "class": null,
                "signature": "def db_request_handler(func):"
            },
            "53": {
                "relative_path": "nest/core/decorators/database.py",
                "fqn_list": "nest/core/decorators/database.py/async_db_request_handler",
                "class": null,
                "signature": "def async_db_request_handler(func):"
            },
            "54": {
                "relative_path": "nest/core/decorators/http_code.py",
                "fqn_list": "nest/core/decorators/http_code.py/HttpCode",
                "class": null,
                "signature": "def HttpCode(status_code: int):"
            },
            "55": {
                "relative_path": "nest/core/decorators/module.py",
                "fqn_list": "nest/core/decorators/module.py/Module/__init__",
                "class": "nest/core/decorators/module.py.Module",
                "signature": "def __init__(self, imports = None, controllers = None, providers = None, exports = None, is_global: bool = False):"
            },
            "56": {
                "relative_path": "nest/core/decorators/module.py",
                "fqn_list": "nest/core/decorators/module.py/Module/__call__",
                "class": "nest/core/decorators/module.py.Module",
                "signature": "def __call__(self, cls):"
            },
            "57": {
                "relative_path": "nest/core/decorators/utils.py",
                "fqn_list": "nest/core/decorators/utils.py/get_instance_variables",
                "class": null,
                "signature": "def get_instance_variables(cls):"
            },
            "58": {
                "relative_path": "nest/core/decorators/utils.py",
                "fqn_list": "nest/core/decorators/utils.py/get_non_dependencies_params",
                "class": null,
                "signature": "def get_non_dependencies_params(cls):"
            },
            "59": {
                "relative_path": "nest/core/decorators/utils.py",
                "fqn_list": "nest/core/decorators/utils.py/parse_dependencies",
                "class": null,
                "signature": "def parse_dependencies(cls):"
            },
            "60": {
                "relative_path": "nest/core/decorators/class_based_view.py",
                "fqn_list": "nest/core/decorators/class_based_view.py/class_based_view",
                "class": null,
                "signature": "def class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:"
            },
            "61": {
                "relative_path": "nest/core/decorators/class_based_view.py",
                "fqn_list": "nest/core/decorators/class_based_view.py/_init_cbv",
                "class": null,
                "signature": "def _init_cbv(cls: Type[Any]) -> None:"
            },
            "62": {
                "relative_path": "nest/core/decorators/class_based_view.py",
                "fqn_list": "nest/core/decorators/class_based_view.py/_update_cbv_route_endpoint_signature",
                "class": null,
                "signature": "def _update_cbv_route_endpoint_signature(cls: Type[Any], route: Union[Route, WebSocketRoute]) -> None:"
            },
            "63": {
                "relative_path": "nest/core/database/base_config.py",
                "fqn_list": "nest/core/database/base_config.py/ConfigFactoryBase/__init__",
                "class": "nest/core/database/base_config.py.ConfigFactoryBase",
                "signature": "def __init__(self, db_type: str):"
            },
            "64": {
                "relative_path": "nest/core/database/base_config.py",
                "fqn_list": "nest/core/database/base_config.py/ConfigFactoryBase/get_config",
                "class": "nest/core/database/base_config.py.ConfigFactoryBase",
                "signature": "def get_config(self):"
            },
            "65": {
                "relative_path": "nest/core/database/base_config.py",
                "fqn_list": "nest/core/database/base_config.py/BaseConfig/get_engine_url",
                "class": "nest/core/database/base_config.py.BaseConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "66": {
                "relative_path": "nest/core/database/base_config.py",
                "fqn_list": "nest/core/database/base_config.py/BaseProvider/__init__",
                "class": "nest/core/database/base_config.py.BaseProvider",
                "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):"
            },
            "67": {
                "relative_path": "nest/core/database/base_config.py",
                "fqn_list": "nest/core/database/base_config.py/BaseProvider/get_engine_url",
                "class": "nest/core/database/base_config.py.BaseProvider",
                "signature": "def get_engine_url(self) -> str:"
            },
            "68": {
                "relative_path": "nest/core/database/odm_provider.py",
                "fqn_list": "nest/core/database/odm_provider.py/OdmProvider/__init__",
                "class": "nest/core/database/odm_provider.py.OdmProvider",
                "signature": "def __init__(self, db_type = \"mongodb\", config_params: dict = None, document_models: List[Document] = None):"
            },
            "69": {
                "relative_path": "nest/core/database/odm_provider.py",
                "fqn_list": "nest/core/database/odm_provider.py/OdmProvider/check_document_models",
                "class": "nest/core/database/odm_provider.py.OdmProvider",
                "signature": "def check_document_models(self):"
            },
            "70": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/__init__",
                "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
                "signature": "def __init__(self, db_type: str = \"postgresql\", config_params: dict = None, async_mode: bool = False, **kwargs):"
            },
            "71": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/create_all",
                "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
                "signature": "def create_all(self):"
            },
            "72": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/drop_all",
                "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
                "signature": "def drop_all(self):"
            },
            "73": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/BaseOrmProvider/get_db",
                "class": "nest/core/database/orm_provider.py.BaseOrmProvider",
                "signature": "def get_db(self):"
            },
            "74": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/__init__",
                "class": "nest/core/database/orm_provider.py.OrmProvider",
                "signature": "def __init__(self, db_type: str = \"postgresql\", config_params: dict = None):"
            },
            "75": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/create_all",
                "class": "nest/core/database/orm_provider.py.OrmProvider",
                "signature": "def create_all(self):"
            },
            "76": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/drop_all",
                "class": "nest/core/database/orm_provider.py.OrmProvider",
                "signature": "def drop_all(self):"
            },
            "77": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/OrmProvider/get_db",
                "class": "nest/core/database/orm_provider.py.OrmProvider",
                "signature": "def get_db(self) -> Session:"
            },
            "78": {
                "relative_path": "nest/core/database/orm_provider.py",
                "fqn_list": "nest/core/database/orm_provider.py/AsyncOrmProvider/__init__",
                "class": "nest/core/database/orm_provider.py.AsyncOrmProvider",
                "signature": "def __init__(self, db_type: str = \"postgresql\", config_params: dict = None, **kwargs):"
            },
            "79": {
                "relative_path": "nest/core/database/odm_config.py",
                "fqn_list": "nest/core/database/odm_config.py/MongoDBConfig/__init__",
                "class": "nest/core/database/odm_config.py.MongoDBConfig",
                "signature": "def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):"
            },
            "80": {
                "relative_path": "nest/core/database/odm_config.py",
                "fqn_list": "nest/core/database/odm_config.py/MongoDBConfig/get_engine_url",
                "class": "nest/core/database/odm_config.py.MongoDBConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "81": {
                "relative_path": "nest/core/database/odm_config.py",
                "fqn_list": "nest/core/database/odm_config.py/ConfigFactory/__init__",
                "class": "nest/core/database/odm_config.py.ConfigFactory",
                "signature": "def __init__(self, db_type: str):"
            },
            "82": {
                "relative_path": "nest/core/database/odm_config.py",
                "fqn_list": "nest/core/database/odm_config.py/ConfigFactory/get_config",
                "class": "nest/core/database/odm_config.py.ConfigFactory",
                "signature": "def get_config(self):"
            },
            "83": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/PostgresConfig/__init__",
                "class": "nest/core/database/orm_config.py.PostgresConfig",
                "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):"
            },
            "84": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/PostgresConfig/get_engine_url",
                "class": "nest/core/database/orm_config.py.PostgresConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "85": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/MySQLConfig/__init__",
                "class": "nest/core/database/orm_config.py.MySQLConfig",
                "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):"
            },
            "86": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/MySQLConfig/get_engine_url",
                "class": "nest/core/database/orm_config.py.MySQLConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "87": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/SQLiteConfig/__init__",
                "class": "nest/core/database/orm_config.py.SQLiteConfig",
                "signature": "def __init__(self, db_name: str):"
            },
            "88": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/SQLiteConfig/get_engine_url",
                "class": "nest/core/database/orm_config.py.SQLiteConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "89": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncSQLiteConfig/__init__",
                "class": "nest/core/database/orm_config.py.AsyncSQLiteConfig",
                "signature": "def __init__(self, db_name: str):"
            },
            "90": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncSQLiteConfig/get_engine_url",
                "class": "nest/core/database/orm_config.py.AsyncSQLiteConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "91": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncPostgresConfig/__init__",
                "class": "nest/core/database/orm_config.py.AsyncPostgresConfig",
                "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):"
            },
            "92": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncPostgresConfig/get_engine_url",
                "class": "nest/core/database/orm_config.py.AsyncPostgresConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "93": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncMySQLConfig/__init__",
                "class": "nest/core/database/orm_config.py.AsyncMySQLConfig",
                "signature": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):"
            },
            "94": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncMySQLConfig/get_engine_url",
                "class": "nest/core/database/orm_config.py.AsyncMySQLConfig",
                "signature": "def get_engine_url(self) -> str:"
            },
            "95": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/ConfigFactory/__init__",
                "class": "nest/core/database/orm_config.py.ConfigFactory",
                "signature": "def __init__(self, db_type: str):"
            },
            "96": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/ConfigFactory/get_config",
                "class": "nest/core/database/orm_config.py.ConfigFactory",
                "signature": "def get_config(self):"
            },
            "97": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncConfigFactory/__init__",
                "class": "nest/core/database/orm_config.py.AsyncConfigFactory",
                "signature": "def __init__(self, db_type: str):"
            },
            "98": {
                "relative_path": "nest/core/database/orm_config.py",
                "fqn_list": "nest/core/database/orm_config.py/AsyncConfigFactory/get_config",
                "class": "nest/core/database/orm_config.py.AsyncConfigFactory",
                "signature": "def get_config(self):"
            }
        }
    },
    "cpu_simulator": {
        "generated code": "'''\nThis is the main file that runs the 8-bit CPU Emulator.\n'''\nimport pygame\nfrom cpu import CPU\nfrom run import write_to_input, read_from_output\ndef main():\n    # Initialize pygame\n    pygame.init()\n    # Define the program instructions\n    program = [\n        # Add your program instructions here\n    ]\n    # Create a CPU object\n    cpu = CPU(program, verbose=True)\n    # Run the CPU\n    cpu.run(write_to_input, read_from_output)\n    # Quit pygame\n    pygame.quit()\nif __name__ == \"__main__\":\n    main()\n'''\nThis file contains the definitions of various basic components used in the CPU.\n'''\nclass HalfAdder:\n    def __init__(self, input1: bool, input2: bool):\n        '''\n        Initialize the HalfAdder with the given inputs.\n        '''\n        self.input1 = input1\n        self.input2 = input2\n    def sum(self) -> bool:\n        '''\n        Calculate and return the sum of the inputs.\n        '''\n        # Implementation of the sum logic\n        # TODO: Implement the sum logic\n    def carry(self) -> bool:\n        '''\n        Calculate and return the carry of the inputs.\n        '''\n        # Implementation of the carry logic\n        # TODO: Implement the carry logic\nclass FullAdder:\n    def __init__(self, input1: bool, input2: bool, carry_in: bool):\n        '''\n        Initialize the FullAdder with the given inputs.\n        '''\n        self.input1 = input1\n        self.input2 = input2\n        self.carry_in = carry_in\n    def sum(self):\n        '''\n        Calculate and return the sum of the inputs.\n        '''\n        # Implementation of the sum logic\n        # TODO: Implement the sum logic\n    def carry(self):\n        '''\n        Calculate and return the carry of the inputs.\n        '''\n        # Implementation of the carry logic\n        # TODO: Implement the carry logic\n# Other basic components classes and functions\n'''\nThis file contains the definition of the Robot class and the draw function.\n'''\nclass Robot:\n    def __init__(self, initial_pos=[1, 1], initial_dir='up', delay=0):\n        '''\n        Initialize the Robot with the given initial position, initial direction, and delay.\n        '''\n        self.initial_pos = initial_pos\n        self.initial_dir = initial_dir\n        self.delay = delay\n    def event_check(self):\n        '''\n        Check for events and handle them.\n        '''\n        # Implementation of the event_check logic\n    def move_forward(self):\n        '''\n        Move the robot forward.\n        '''\n        # Implementation of the move_forward logic\n    def turn_left(self):\n        '''\n        Turn the robot left.\n        '''\n        # Implementation of the turn_left logic\n    def turn_right(self):\n        '''\n        Turn the robot right.\n        '''\n        # Implementation of the turn_right logic\n    def move(self, instruction):\n        '''\n        Move the robot based on the given instruction.\n        '''\n        # Implementation of the move logic\n    def get_front_cell(self):\n        '''\n        Get the value of the cell in front of the robot.\n        '''\n        # Implementation of the get_front_cell logic\n    def get_front_cell_bit(self):\n        '''\n        Get the bit value of the cell in front of the robot.\n        '''\n        # Implementation of the get_front_cell_bit logic\ndef draw(robot):\n    '''\n    Draw the maze and the robot.\n    '''\n    # Implementation of the draw logic\n'''\nThis file contains the definition of the Registers class.\n'''\nclass Registers:\n    def __init__(self):\n        '''\n        Initialize the Registers object.\n        '''\n        # Implementation of the Registers initialization logic\n    def read(self):\n        '''\n        Read the data from the registers and return it.\n        '''\n        # Implementation of the read logic\n    def write(self, data):\n        '''\n        Write the given data to the registers.\n        '''\n        # Implementation of the write logic\n    def write_to_register(self, register, data):\n        '''\n        Write the given data to the specified register.\n        '''\n        # Implementation of the write_to_register logic\n'''\nThis file contains the definition of the ALU class.\n'''\nclass ALU:\n    def __init__(self, input1: list[bool], input2: list[bool], control1: bool, control2: bool):\n        '''\n        Initialize the ALU with the given inputs and control signals.\n        '''\n        self.input1 = input1\n        self.input2 = input2\n        self.control1 = control1\n        self.control2 = control2\n    def out(self):\n        '''\n        Perform the ALU operation and return the result.\n        '''\n        # Implementation of the ALU operation logic\n        # TODO: Implement the ALU operation logic\n    def zero(self):\n        '''\n        Check if the ALU output is zero and return the result.\n        '''\n        # Implementation of the zero logic\n        # TODO: Implement the zero logic\n    def negative(self):\n        '''\n        Check if the ALU output is negative and return the result.\n        '''\n        # Implementation of the negative logic\n        # TODO: Implement the negative logic\n    def overflow(self):\n        '''\n        Check if the ALU operation resulted in overflow and return the result.\n        '''\n        # Implementation of the overflow logic\n        # TODO: Implement the overflow logic\n    def carry_out(self):\n        '''\n        Check if the ALU operation resulted in carry out and return the result.\n        '''\n        # Implementation of the carry_out logic\n        # TODO: Implement the carry_out logic\n'''\nThis file contains the write_to_input and read_from_output functions.\n'''\ndef write_to_input():\n    '''\n    Function to write input to the CPU.\n    '''\n    # Implementation of the write_to_input logic\ndef read_from_output(value):\n    '''\n    Function to read output from the CPU.\n    '''\n    # Implementation of the read_from_output logic\n'''\nThis file contains the definitions of various logic gates.\n'''\ndef and_(*args) -> int:\n    '''\n    Perform the AND operation on the given inputs and return the result.\n    '''\n    # Implementation of the AND gate logic\n    # TODO: Implement the AND gate logic\ndef or_(*args) -> int:\n    '''\n    Perform the OR operation on the given inputs and return the result.\n    '''\n    # Implementation of the OR gate logic\n    # TODO: Implement the OR gate logic\ndef not_(*args) -> int:\n    '''\n    Perform the NOT operation on the given input and return the result.\n    '''\n    # Implementation of the NOT gate logic\n    # TODO: Implement the NOT gate logic\ndef nor(*args) -> int:\n    '''\n    Perform the NOR operation on the given inputs and return the result.\n    '''\n    # Implementation of the NOR gate logic\n    # TODO: Implement the NOR gate logic\ndef nand(*args) -> int:\n    '''\n    Perform the NAND operation on the given inputs and return the result.\n    '''\n    # Implementation of the NAND gate logic\n    # TODO: Implement the NAND gate logic\ndef xor(a: bool, b: bool) -> int:\n    '''\n    Perform the XOR operation on the given inputs and return the result.\n    '''\n    # Implementation of the XOR gate logic\n    # TODO: Implement the XOR gate logic\ndef xnor(a: bool, b: bool) -> int:\n    '''\n    Perform the XNOR operation on the given inputs and return the result.\n    '''\n    # Implementation of the XNOR gate logic\n    # TODO: Implement the XNOR gate logic\nregisters.py\n'''\nThis file contains the functions for assembling the binary code.\n'''\ndef get_labels(file) -> dict:\n    '''\n    Get the labels from the assembly file and return them as a dictionary.\n    '''\n    # Implementation of the get_labels logic\n    # TODO: Implement the get_labels logic\ndef immediate_values(line, labels):\n    '''\n    Process the immediate values in the assembly line and return the processed line.\n    '''\n    # Implementation of the immediate_values logic\n    # TODO: Implement the immediate_values logic\ndef copy_instructions(line):\n    '''\n    Process the copy instructions in the assembly line and return the processed line.\n    '''\n    # Implementation of the copy_instructions logic\n    # TODO: Implement the copy_instructions logic\ndef operate_instructions(line):\n    '''\n    Process the operate instructions in the assembly line and return the processed line.\n    '''\n    # Implementation of the operate_instructions logic\n    # TODO: Implement the operate_instructions logic\ndef jump_instructions(line):\n    '''\n    Process the jump instructions in the assembly line and return the processed line.\n    '''\n    # Implementation of the jump_instructions logic\n    # TODO: Implement the jump_instructions logic\ndef assemble_binary(filename: str):\n    '''\n    Assemble the assembly file into binary code and return the binary code.\n    '''\n    # Implementation of the assemble_binary logic\n    # TODO: Implement the assemble_binary logic\nmaze.py\n'''\nThis file contains the definition of the CPU class.\n'''\nclass CPU:\n    def __init__(self, program, verbose=True):\n        '''\n        Initialize the CPU with the given program and verbosity flag.\n        '''\n        self.program = program\n        self.verbose = verbose\n    def run(self, write_to_input=None, read_from_output=None):\n        '''\n        Run the CPU with the given write_to_input and read_from_output functions.\n        '''\n        for instruction in self.program:\n            cycle = Cycle(self, instruction)\n            cycle.execute()\nclass Cycle:\n    def __init__(self, cpu, program_instruction_byte):\n        '''\n        Initialize a cycle with the given CPU and program instruction byte.\n        '''\n        self.cpu = cpu\n        self.program_instruction_byte = program_instruction_byte\n    def execute(self):\n        '''\n        Execute the cycle.\n        '''\n        # Implementation of the cycle execution logic\n        if self.cpu.verbose:\n            print(f\"Executing instruction: {self.program_instruction_byte}\")\n        # Execute the instruction logic\n        # TODO: Implement the instruction logic\nrun.py\n",
        "design": {
            "0": {
                "relative_path": "src/run.py",
                "fqn_list": "src/run.py/write_to_input",
                "class": null,
                "signature": "def write_to_input():"
            },
            "1": {
                "relative_path": "src/run.py",
                "fqn_list": "src/run.py/read_from_output",
                "class": null,
                "signature": "def read_from_output(value):"
            },
            "2": {
                "relative_path": "src/assembler.py",
                "fqn_list": "src/assembler.py/get_labels",
                "class": null,
                "signature": "def get_labels(file) -> dict:"
            },
            "3": {
                "relative_path": "src/assembler.py",
                "fqn_list": "src/assembler.py/immediate_values",
                "class": null,
                "signature": "def immediate_values(line, labels):"
            },
            "4": {
                "relative_path": "src/assembler.py",
                "fqn_list": "src/assembler.py/copy_instructions",
                "class": null,
                "signature": "def copy_instructions(line):"
            },
            "5": {
                "relative_path": "src/assembler.py",
                "fqn_list": "src/assembler.py/operate_instructions",
                "class": null,
                "signature": "def operate_instructions(line):"
            },
            "6": {
                "relative_path": "src/assembler.py",
                "fqn_list": "src/assembler.py/jump_instructions",
                "class": null,
                "signature": "def jump_instructions(line):"
            },
            "7": {
                "relative_path": "src/assembler.py",
                "fqn_list": "src/assembler.py/assemble_binary",
                "class": null,
                "signature": "def assemble_binary(filename: str):"
            },
            "8": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/__init__",
                "class": "src/games/maze.py.Robot",
                "signature": "def __init__(self, initial_pos = [1,1], initial_dir = 'up', delay = 0):"
            },
            "9": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/event_check",
                "class": "src/games/maze.py.Robot",
                "signature": "def event_check(self):"
            },
            "10": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/move_forward",
                "class": "src/games/maze.py.Robot",
                "signature": "def move_forward(self):"
            },
            "11": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/turn_left",
                "class": "src/games/maze.py.Robot",
                "signature": "def turn_left(self):"
            },
            "12": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/turn_right",
                "class": "src/games/maze.py.Robot",
                "signature": "def turn_right(self):"
            },
            "13": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/move",
                "class": "src/games/maze.py.Robot",
                "signature": "def move(self, instruction):"
            },
            "14": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/get_front_cell",
                "class": "src/games/maze.py.Robot",
                "signature": "def get_front_cell(self):"
            },
            "15": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/Robot/get_front_cell_bit",
                "class": "src/games/maze.py.Robot",
                "signature": "def get_front_cell_bit(self):"
            },
            "16": {
                "relative_path": "src/games/maze.py",
                "fqn_list": "src/games/maze.py/draw",
                "class": null,
                "signature": "def draw(robot):"
            },
            "17": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/HalfAdder/__init__",
                "class": "src/hardware/basic_components.py.HalfAdder",
                "signature": "def __init__(self, input1: bool, input2: bool):"
            },
            "18": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/HalfAdder/sum",
                "class": "src/hardware/basic_components.py.HalfAdder",
                "signature": "def sum(self) -> bool:"
            },
            "19": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/HalfAdder/carry",
                "class": "src/hardware/basic_components.py.HalfAdder",
                "signature": "def carry(self) -> bool:"
            },
            "20": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/FullAdder/__init__",
                "class": "src/hardware/basic_components.py.FullAdder",
                "signature": "def __init__(self, input1: bool, input2: bool, carry_in: bool):"
            },
            "21": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/FullAdder/sum",
                "class": "src/hardware/basic_components.py.FullAdder",
                "signature": "def sum(self):"
            },
            "22": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/FullAdder/carry",
                "class": "src/hardware/basic_components.py.FullAdder",
                "signature": "def carry(self):"
            },
            "23": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Adder/__init__",
                "class": "src/hardware/basic_components.py.Adder",
                "signature": "def __init__(self, input1: list[bool], input2: list[bool], carry_in: bool = False):"
            },
            "24": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Adder/sum",
                "class": "src/hardware/basic_components.py.Adder",
                "signature": "def sum(self) -> list[bool]:"
            },
            "25": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Adder/carry_out",
                "class": "src/hardware/basic_components.py.Adder",
                "signature": "def carry_out(self) -> bool:"
            },
            "26": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/HalfSubtractor/__init__",
                "class": "src/hardware/basic_components.py.HalfSubtractor",
                "signature": "def __init__(self, input1: bool, input2: bool):"
            },
            "27": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/HalfSubtractor/diff",
                "class": "src/hardware/basic_components.py.HalfSubtractor",
                "signature": "def diff(self) -> bool:"
            },
            "28": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/HalfSubtractor/borrow",
                "class": "src/hardware/basic_components.py.HalfSubtractor",
                "signature": "def borrow(self) -> bool:"
            },
            "29": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/FullSubtractor/__init__",
                "class": "src/hardware/basic_components.py.FullSubtractor",
                "signature": "def __init__(self, input1: bool, input2: bool, borrow_in: bool):"
            },
            "30": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/FullSubtractor/diff",
                "class": "src/hardware/basic_components.py.FullSubtractor",
                "signature": "def diff(self):"
            },
            "31": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/FullSubtractor/borrow",
                "class": "src/hardware/basic_components.py.FullSubtractor",
                "signature": "def borrow(self):"
            },
            "32": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Subtractor/__init__",
                "class": "src/hardware/basic_components.py.Subtractor",
                "signature": "def __init__(self, input1: list[bool], input2: list[bool], borrow_in: bool = False):"
            },
            "33": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Subtractor/diff",
                "class": "src/hardware/basic_components.py.Subtractor",
                "signature": "def diff(self) -> list[bool]:"
            },
            "34": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Subtractor/borrow_out",
                "class": "src/hardware/basic_components.py.Subtractor",
                "signature": "def borrow_out(self) -> bool:"
            },
            "35": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Mux/__init__",
                "class": "src/hardware/basic_components.py.Mux",
                "signature": "def __init__(self, input1: bool, input2: bool, sel: bool):"
            },
            "36": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Mux/output",
                "class": "src/hardware/basic_components.py.Mux",
                "signature": "def output(self) -> bool:"
            },
            "37": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Mux8Bit/__init__",
                "class": "src/hardware/basic_components.py.Mux8Bit",
                "signature": "def __init__(self, input1: list[bool], input2: list[bool], sel: bool):"
            },
            "38": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Mux8Bit/output",
                "class": "src/hardware/basic_components.py.Mux8Bit",
                "signature": "def output(self) -> list[bool]:"
            },
            "39": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/AddSub/__init__",
                "class": "src/hardware/basic_components.py.AddSub",
                "signature": "def __init__(self, input1: list[bool], input2: list[bool], operation: bool):"
            },
            "40": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/AddSub/output",
                "class": "src/hardware/basic_components.py.AddSub",
                "signature": "def output(self) -> list[bool]:"
            },
            "41": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/AddSub/overflow",
                "class": "src/hardware/basic_components.py.AddSub",
                "signature": "def overflow(self) -> bool:"
            },
            "42": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/AddSub/borrow_out",
                "class": "src/hardware/basic_components.py.AddSub",
                "signature": "def borrow_out(self) -> bool:"
            },
            "43": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Decoder/__init__",
                "class": "src/hardware/basic_components.py.Decoder",
                "signature": "def __init__(self, input: list[bool]):"
            },
            "44": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Decoder/output",
                "class": "src/hardware/basic_components.py.Decoder",
                "signature": "def output(self) -> list[bool]:"
            },
            "45": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Control/__init__",
                "class": "src/hardware/basic_components.py.Control",
                "signature": "def __init__(self, input: list[bool]):"
            },
            "46": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Control/output",
                "class": "src/hardware/basic_components.py.Control",
                "signature": "def output(self) -> list[bool]:"
            },
            "47": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Comparison/__init__",
                "class": "src/hardware/basic_components.py.Comparison",
                "signature": "def __init__(self, control: list[bool], byte: list[bool]):"
            },
            "48": {
                "relative_path": "src/hardware/basic_components.py",
                "fqn_list": "src/hardware/basic_components.py/Comparison/out",
                "class": "src/hardware/basic_components.py.Comparison",
                "signature": "def out(self) -> bool:"
            },
            "49": {
                "relative_path": "src/hardware/registers.py",
                "fqn_list": "src/hardware/registers.py/Registers/__init__",
                "class": "src/hardware/registers.py.Registers",
                "signature": "def __init__(self):"
            },
            "50": {
                "relative_path": "src/hardware/registers.py",
                "fqn_list": "src/hardware/registers.py/Registers/read",
                "class": "src/hardware/registers.py.Registers",
                "signature": "def read(self):"
            },
            "51": {
                "relative_path": "src/hardware/registers.py",
                "fqn_list": "src/hardware/registers.py/Registers/write",
                "class": "src/hardware/registers.py.Registers",
                "signature": "def write(self, data):"
            },
            "52": {
                "relative_path": "src/hardware/registers.py",
                "fqn_list": "src/hardware/registers.py/Registers/write_to_register",
                "class": "src/hardware/registers.py.Registers",
                "signature": "def write_to_register(self, register, data):"
            },
            "53": {
                "relative_path": "src/hardware/alu.py",
                "fqn_list": "src/hardware/alu.py/ALU/__init__",
                "class": "src/hardware/alu.py.ALU",
                "signature": "def __init__(self, input1: list[bool], input2: list[bool], control1: bool, control2: bool):"
            },
            "54": {
                "relative_path": "src/hardware/alu.py",
                "fqn_list": "src/hardware/alu.py/ALU/out",
                "class": "src/hardware/alu.py.ALU",
                "signature": "def out(self):"
            },
            "55": {
                "relative_path": "src/hardware/alu.py",
                "fqn_list": "src/hardware/alu.py/ALU/zero",
                "class": "src/hardware/alu.py.ALU",
                "signature": "def zero(self):"
            },
            "56": {
                "relative_path": "src/hardware/alu.py",
                "fqn_list": "src/hardware/alu.py/ALU/negative",
                "class": "src/hardware/alu.py.ALU",
                "signature": "def negative(self):"
            },
            "57": {
                "relative_path": "src/hardware/alu.py",
                "fqn_list": "src/hardware/alu.py/ALU/overflow",
                "class": "src/hardware/alu.py.ALU",
                "signature": "def overflow(self):"
            },
            "58": {
                "relative_path": "src/hardware/alu.py",
                "fqn_list": "src/hardware/alu.py/ALU/carry_out",
                "class": "src/hardware/alu.py.ALU",
                "signature": "def carry_out(self):"
            },
            "59": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/and_",
                "class": null,
                "signature": "def and_(*args) -> int:"
            },
            "60": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/or_",
                "class": null,
                "signature": "def or_(*args) -> int:"
            },
            "61": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/not_",
                "class": null,
                "signature": "def not_(*args) -> int:"
            },
            "62": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/nor",
                "class": null,
                "signature": "def nor(*args) -> int:"
            },
            "63": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/nand",
                "class": null,
                "signature": "def nand(*args) -> int:"
            },
            "64": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/xor",
                "class": null,
                "signature": "def xor(a: bool, b: bool) -> int:"
            },
            "65": {
                "relative_path": "src/hardware/gates.py",
                "fqn_list": "src/hardware/gates.py/xnor",
                "class": null,
                "signature": "def xnor(a: bool, b: bool) -> int:"
            },
            "66": {
                "relative_path": "src/hardware/cpu.py",
                "fqn_list": "src/hardware/cpu.py/CPU/__init__",
                "class": "src/hardware/cpu.py.CPU",
                "signature": "def __init__(self, program, verbose = True):"
            },
            "67": {
                "relative_path": "src/hardware/cpu.py",
                "fqn_list": "src/hardware/cpu.py/CPU/run",
                "class": "src/hardware/cpu.py.CPU",
                "signature": "def run(self, write_to_input: callable = None, read_from_output: callable = None):"
            },
            "68": {
                "relative_path": "src/hardware/cpu.py",
                "fqn_list": "src/hardware/cpu.py/Cycle/__init__",
                "class": "src/hardware/cpu.py.Cycle",
                "signature": "def __init__(self, cpu, program_instruction_byte):"
            },
            "69": {
                "relative_path": "src/hardware/cpu.py",
                "fqn_list": "src/hardware/cpu.py/Cycle/execute",
                "class": "src/hardware/cpu.py.Cycle",
                "signature": "def execute(self):"
            }
        }
    },
    "translategram": {
        "generated code": "'''\nThis file contains the implementation of the MtranslateTranslatorService class, which is responsible for providing translation capabilities using the Mtranslate translation service.\n'''\nclass MtranslateTranslatorService:\n    def __init__(self) -> None:\n        '''\n        Initializes the MtranslateTranslatorService object.\n        '''\n        pass\n    def translate(self, text: str, target_lang: str) -> str:\n        '''\n        Translates the given text to the target language using the Mtranslate translation service.\n        Args:\n            text (str): The text to be translated.\n            target_lang (str): The target language for translation.\n        Returns:\n            str: The translated text.\n        '''\n        # Implementation of translation using the Mtranslate service\n        return f\"Translated text: {text} (Target language: {target_lang})\"\n'''\nThis file contains the implementation of the PickleCache class, which is responsible for caching translation data using the Pickle serialization format.\n'''\nimport pickle\nclass PickleCache:\n    def __init__(self, obj: object, filename: str = 'translation.data') -> None:\n        '''\n        Initializes the PickleCache object.\n        Args:\n            obj (object): The object to be cached.\n            filename (str): The filename to store the cached data. Default is 'translation.data'.\n        '''\n        self.obj = obj\n        self.filename = filename\n    def save(self) -> None:\n        '''\n        Saves the cached object to the specified file using Pickle serialization.\n        '''\n        with open(self.filename, 'wb') as file:\n            pickle.dump(self.obj, file)\n    def load(self) -> object:\n        '''\n        Loads the cached object from the specified file using Pickle deserialization.\n        Returns:\n            object: The cached object.\n        '''\n        with open(self.filename, 'rb') as file:\n            return pickle.load(file)\n    def __del__(self) -> None:\n        '''\n        Cleans up any resources used by the cache system.\n        '''\n        # Add any necessary cleanup code here\n        pass\n'''\nThis file contains the implementation of the PythonTelegramBotAdapter class, which is responsible for adapting the Translator functionality to be used with the Python Telegram Bot library.\n'''\nfrom typing import Type, Union\nfrom translategram.translategram.translator import Translator\nfrom translategram.translategram.translator_services import MtranslateTranslatorService\nfrom translategram.translategram.cache import PickleCache\nclass PythonTelegramBotAdapter:\n    def __init__(self, translator_service: Type[MtranslateTranslatorService], cache_system: Union[Type[PickleCache], None] = None) -> None:\n        '''\n        Initializes the PythonTelegramBotAdapter object.\n        Args:\n            translator_service (Type[MtranslateTranslatorService]): The translator service to be used.\n            cache_system (Union[Type[PickleCache], None]): The cache system to be used. Default is None.\n        '''\n        self.translator = Translator(translator_service(), cache_system)\n    def handler_translator(self, message: str, source_lang: str = 'auto') -> Callable[[Callable[[Any, Any, str], object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]:\n        '''\n        Handles the translation of a message with a specific source language for the Python Telegram Bot library.\n        Args:\n            message (str): The message to be translated.\n            source_lang (str): The source language of the message. Default is 'auto'.\n        Returns:\n            Callable[[Callable[[Any, Any, str], object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]: A decorator function that can be used to wrap a coroutine function for translation.\n        '''\n        return self.translator.handler_translator(message, source_lang)\n    def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]:\n        '''\n        Handles the translation of a message with a dynamic source language for the Python Telegram Bot library.\n        Args:\n            message_func (Callable[[str, Any], str]): A function that takes a message and additional arguments and returns the translated message.\n            source_lang (str): The source language of the message. Default is 'auto'.\n        Returns:\n            Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]: A decorator function that can be used to wrap a coroutine function for translation.\n        '''\n        return self.translator.dynamic_handler_translator(message_func, source_lang)\n'''\nThis file contains the implementation of the Translator class, which is responsible for translating messages using a TranslatorService and caching the translations using a Cache system.\n'''\nfrom typing import Callable, Any, Coroutine, Type, Union\nfrom translategram.translategram.translator_services import MtranslateTranslatorService\nfrom translategram.translategram.cache import PickleCache\nclass Translator:\n    def __init__(self, translator_service: MtranslateTranslatorService, cache_system: Union[Type[PickleCache], None] = None) -> None:\n        '''\n        Initializes the Translator object.\n        Args:\n            translator_service (MtranslateTranslatorService): The translation service to be used.\n            cache_system (Union[Type[PickleCache], None]): The cache system to be used. Default is None.\n        '''\n        self.translator_service = translator_service\n        self.cache_system = cache_system\n    def handler_translator(self, message: str, source_lang: str) -> Callable[[Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]:\n        '''\n        Handles the translation of a message with a specific source language.\n        Args:\n            message (str): The message to be translated.\n            source_lang (str): The source language of the message.\n        Returns:\n            Callable[[Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]]: A decorator function that can be used to wrap a coroutine function for translation.\n        '''\n        def decorator(func: Callable[..., object]) -> Callable[[Any, Any, str], Coroutine[Any, Any, Any]]:\n            async def wrapper(*args: Any, **kwargs: Any, source_lang: str = source_lang) -> Any:\n                if self.cache_system:\n                    cache_key = (func.__name__, *args, *kwargs.values())\n                    if cache_key in self.cache_system:\n                        return self.cache_system[cache_key]\n                translation = await self.translator_service.translate(message, source_lang)\n                if self.cache_system:\n                    self.cache_system[cache_key] = translation\n                return await func(*args, **kwargs, translation)\n            return wrapper\n        return decorator\n    def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = 'auto') -> Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]:\n        '''\n        Handles the translation of a message with a dynamic source language.\n        Args:\n            message_func (Callable[[str, Any], str]): A function that takes a message and additional arguments and returns the translated message.\n            source_lang (str): The source language of the message. Default is 'auto'.\n        Returns:\n            Callable[[Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]]: A decorator function that can be used to wrap a coroutine function for translation.\n        '''\n        def decorator(func: Callable[..., object]) -> Callable[[Any, Any], Coroutine[Any, Any, Any]]:\n            async def wrapper(*args: Any, **kwargs: Any) -> Any:\n                message = message_func(*args, **kwargs)\n                return await self.handler_translator(message, source_lang)(func)(*args, **kwargs)\n            return wrapper\n        return decorator\n",
        "design": {
            "0": {
                "relative_path": "translategram/translategram/translator_services.py",
                "fqn_list": "translategram/translategram/translator_services.py/MtranslateTranslatorService/__init__",
                "class": "translategram/translategram/translator_services.py.MtranslateTranslatorService",
                "signature": "def __init__(self) -> None:"
            },
            "1": {
                "relative_path": "translategram/translategram/cache.py",
                "fqn_list": "translategram/translategram/cache.py/PickleCache/__init__",
                "class": "translategram/translategram/cache.py.PickleCache",
                "signature": "def __init__(self, obj: object, filename: str = \"translation.data\") -> None:"
            },
            "2": {
                "relative_path": "translategram/translategram/cache.py",
                "fqn_list": "translategram/translategram/cache.py/PickleCache/__del__",
                "class": "translategram/translategram/cache.py.PickleCache",
                "signature": "def __del__(self) -> None:"
            },
            "3": {
                "relative_path": "translategram/translategram/translator.py",
                "fqn_list": "translategram/translategram/translator.py/Translator/__init__",
                "class": "translategram/translategram/translator.py.Translator",
                "signature": "def __init__(self, translator_service: TranslatorService, cache_system: Union[Type[Cache], None] = None) -> None:"
            },
            "4": {
                "relative_path": "translategram/translategram/translator.py",
                "fqn_list": "translategram/translategram/translator.py/Translator/handler_translator",
                "class": "translategram/translategram/translator.py.Translator",
                "signature": "def handler_translator(self, message: str, source_lang: str) -> Callable[\n        [Callable[..., object]], Callable[[Any, Any, str], Coroutine[Any, Any, Any]]\n    ]:"
            },
            "5": {
                "relative_path": "translategram/translategram/translator.py",
                "fqn_list": "translategram/translategram/translator.py/Translator/dynamic_handler_translator",
                "class": "translategram/translategram/translator.py.Translator",
                "signature": "def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = \"auto\") -> Callable[\n        [Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]\n    ]:"
            },
            "6": {
                "relative_path": "translategram/python_telegram_bot_translator/adapter.py",
                "fqn_list": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/__init__",
                "class": "translategram/python_telegram_bot_translator/adapter.py.PythonTelegramBotAdapter",
                "signature": "def __init__(self, translator_service: Type[TranslatorService], cache_system: Union[Type[Cache], None] = None) -> None:"
            },
            "7": {
                "relative_path": "translategram/python_telegram_bot_translator/adapter.py",
                "fqn_list": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/handler_translator",
                "class": "translategram/python_telegram_bot_translator/adapter.py.PythonTelegramBotAdapter",
                "signature": "def handler_translator(self, message: str, source_lang: str = \"auto\") -> Callable[\n        [Callable[[Any, Any, str], object]],\n        Callable[[Any, Any, str], Coroutine[Any, Any, Any]],\n    ]:"
            },
            "8": {
                "relative_path": "translategram/python_telegram_bot_translator/adapter.py",
                "fqn_list": "translategram/python_telegram_bot_translator/adapter.py/PythonTelegramBotAdapter/dynamic_handler_translator",
                "class": "translategram/python_telegram_bot_translator/adapter.py.PythonTelegramBotAdapter",
                "signature": "def dynamic_handler_translator(self, message_func: Callable[[str, Any], str], source_lang: str = \"auto\") -> Callable[\n        [Callable[..., object]], Callable[[Any, Any], Coroutine[Any, Any, Any]]\n    ]:"
            }
        }
    },
    "SantorinAI": {
        "generated code": "'''\nMain file for the SantorinAI AI player tester.\n'''\nimport santorinai.board as board\nimport santorinai.player as player\nimport santorinai.board_displayer.board_displayer as board_displayer\ndef main():\n    # Create a board with 2 players\n    game_board = board.Board(2)\n    # Create two AI players\n    player1 = player.FirstChoicePlayer(1)\n    player2 = player.FirstChoicePlayer(2)\n    # Place pawns for each player\n    player1_pawn = player1.place_pawn(game_board)\n    player2_pawn = player2.place_pawn(game_board)\n    # Initialize the board display window\n    window = board_displayer.init_window([player1.name(), player2.name()])\n    # Play the game until it is over\n    while not game_board.is_game_over():\n        # Get the current player's turn\n        current_player = player1 if game_board.next_turn() == 1 else player2\n        # Get the move and build positions from the current player\n        move_position, build_position = current_player.play_move(game_board)\n        # Play the move on the board\n        success, message = game_board.play_move(current_player.player_number, move_position, build_position)\n        # Check if the move was successful\n        if success:\n            print(f\"Player {current_player.player_number} played move: {move_position} -> {build_position}\")\n        else:\n            print(f\"Player {current_player.player_number} failed to play move: {move_position} -> {build_position}\")\n            print(f\"Reason: {message}\")\n        # Update the board display\n        board_displayer.update_board(window, game_board)\n    # Close the board display window\n    board_displayer.close_window(window)\nif __name__ == \"__main__\":\n    main()\n'''\nModule for the SantorinAI first choice player example.\n'''\nfrom santorinai.board import Board, Pawn\nimport random\nclass FirstChoicePlayer:\n    def __init__(self, player_number, log_level=0) -> None:\n        '''\n        Initialize the first choice player with the specified player number and log level.\n        '''\n        self.player_number = player_number\n        self.log_level = log_level\n    def name(self):\n        '''\n        Get the name of the first choice player.\n        '''\n        return \"First Choice Player\"\n    def place_pawn(self, board: Board, pawn: Pawn):\n        '''\n        Place a pawn on the board for the first choice player.\n        '''\n        # Get the available positions for pawn placement\n        available_positions = board.get_possible_movement_positions(pawn)\n        # Choose the first available position as the placement position\n        placement_position = available_positions[0]\n        # Place the pawn on the board\n        success, message = board.place_pawn(placement_position)\n        if success:\n            print(f\"Player {self.player_number} placed pawn at position {placement_position}\")\n        else:\n            print(f\"Player {self.player_number} failed to place pawn at position {placement_position}\")\n            print(f\"Reason: {message}\")\n    def play_move(self, board: Board):\n        '''\n        Play a move on the board for the first choice player.\n        '''\n        # Get the player's pawns\n        pawns = board.get_player_pawns(self.player_number)\n        # Choose a random pawn\n        pawn = random.choice(pawns)\n        # Get the possible movement positions for the chosen pawn\n        movement_positions = board.get_possible_movement_positions(pawn)\n        # Choose the first available movement position\n        move_position = movement_positions[0]\n        # Get the possible building positions for the chosen pawn\n        building_positions = board.get_possible_building_positions(pawn)\n        # Choose the first available building position\n        build_position = building_positions[0]\n        return pawn.number, move_position, build_position\n'''\nModule for the SantorinAI board displayer.\n'''\nimport PySimpleGUI as sg\nfrom santorinai.board import Board\ndef init_window(player_names: List[str]) -> sg.Window:\n    '''\n    Initialize the board display window.\n    '''\n    layout = [[sg.Text('SantorinAI Board', size=(20, 1), justification='center', font=(\"Helvetica\", 20))],\n              [sg.Graph(canvas_size=(800, 800), graph_bottom_left=(0, 0), graph_top_right=(800, 800), background_color='white', key='graph')],\n              [sg.Button('Exit')]]\n    window = sg.Window('SantorinAI Board', layout, finalize=True)\n    return window\ndef draw_isometric_cube(window: sg.Window, x: int, y: int, size: int, cube_height: int, color: str, line_color: str, line_width: int):\n    '''\n    Draw an isometric cube on the board display window.\n    '''\n    graph = window['graph']\n    graph.draw_rectangle((x, y), (x + size, y + size), fill_color=color, line_color=line_color, line_width=line_width)\n    graph.draw_line((x, y), (x + size, y), color=line_color, width=line_width)\n    graph.draw_line((x, y), (x, y + size), color=line_color, width=line_width)\n    graph.draw_line((x + size, y), (x + size, y + size), color=line_color, width=line_width)\n    graph.draw_line((x, y + size), (x + size, y + size), color=line_color, width=line_width)\n    graph.draw_line((x, y, cube_height), (x + size, y, cube_height), color=line_color, width=line_width)\n    graph.draw_line((x, y, cube_height), (x, y + size, cube_height), color=line_color, width=line_width)\n    graph.draw_line((x + size, y, cube_height), (x + size, y + size, cube_height), color=line_color, width=line_width)\n    graph.draw_line((x, y + size, cube_height), (x + size, y + size, cube_height), color=line_color, width=line_width)\n    graph.draw_line((x, y, cube_height), (x, y, 0), color=line_color, width=line_width)\n    graph.draw_line((x + size, y, cube_height), (x + size, y, 0), color=line_color, width=line_width)\n    graph.draw_line((x, y + size, cube_height), (x, y + size, 0), color=line_color, width=line_width)\n    graph.draw_line((x + size, y + size, cube_height), (x + size, y + size, 0), color=line_color, width=line_width)\n    graph.draw_line((x, y, 0), (x + size, y, 0), color=line_color, width=line_width)\n    graph.draw_line((x, y, 0), (x, y + size, 0), color=line_color, width=line_width)\n    graph.draw_line((x + size, y, 0), (x + size, y + size, 0), color=line_color, width=line_width)\n    graph.draw_line((x, y + size, 0), (x + size, y + size, 0), color=line_color, width=line_width)\ndef update_board(window: sg.Window, board: Board):\n    '''\n    Update the board display window with the current state of the board.\n    '''\n    graph = window['graph']\n    graph.erase()\n    # Draw the board grid\n    for i in range(5):\n        for j in range(5):\n            x = i * 160\n            y = j * 160\n            draw_isometric_cube(window, x, y, 160, 80, 'white', 'black', 2)\n    # Draw the pawns\n    pawns = []\n    for player_number in range(1, board.number_of_players + 1):\n        player_pawns = board.get_player_pawns(player_number)\n        pawns.extend(player_pawns)\n    for pawn in pawns:\n        x = pawn.position[0] * 160\n        y = pawn.position[1] * 160\n        draw_isometric_cube(window, x, y, 160, 80, 'blue', 'black', 2)\n    # Update the window\n    window.read(timeout=0)\ndef close_window(window: sg.Window):\n    '''\n    Close the board display window.\n    '''\n    window.close()\n'''\nModule for the SantorinAI random player example.\n'''\nfrom santorinai.board import Board, Pawn\nclass RandomPlayer:\n    def __init__(self, player_number, log_level = 0) -> None:\n        '''\n        Initialize the random player with the specified player number and log level.\n        '''\n        self.player_number = player_number\n        self.log_level = log_level\n    def name(self):\n        '''\n        Get the name of the random player.\n        '''\n        return \"Random Player\"\n    def place_pawn(self, board: Board, pawn: Pawn):\n        '''\n        Place a pawn on the board for the random player.\n        '''\n        # Get the available positions for pawn placement\n        available_positions = board.get_possible_movement_positions(pawn)\n        # Choose a random position as the placement position\n        placement_position = random.choice(available_positions)\n        # Place the pawn on the board\n        success, message = board.place_pawn(placement_position)\n        if success:\n            print(f\"Player {self.player_number} placed pawn at position {placement_position}\")\n        else:\n            print(f\"Player {self.player_number} failed to place pawn at position {placement_position}\")\n            print(f\"Reason: {message}\")\n    def play_move(self, board: Board):\n        '''\n        Play a move on the board for the random player.\n        '''\n        # Get the player's pawns\n        pawns = board.get_player_pawns(self.player_number)\n        # Choose a random pawn\n        pawn = random.choice(pawns)\n        # Get the possible movement positions for the chosen pawn\n        movement_positions = board.get_possible_movement_positions(pawn)\n        # Choose a random movement position\n        move_position = random.choice(movement_positions)\n        # Get the possible building positions for the chosen pawn\n        building_positions = board.get_possible_building_positions(pawn)\n        # Choose a random building position\n        build_position = random.choice(building_positions)\n        return pawn.number, move_position, build_position\n'''\nModule for the SantorinAI board class.\n'''\nfrom typing import Tuple, List\nfrom santorinai.pawn import Pawn\nclass Board:\n    def __init__(self, number_of_players: int):\n        '''\n        Initialize the board with the specified number of players.\n        '''\n        self.number_of_players = number_of_players\n        self.players = []\n        self.pawns = []\n        self.turn = 1\n        self.game_over = False\n    def is_move_possible(self, start_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[bool, str]:\n        '''\n        Check if a move from start_pos to end_pos is possible.\n        Returns a tuple with a boolean indicating if the move is possible and a message explaining why it is not possible.\n        '''\n        if not self.is_position_valid(start_pos) or not self.is_position_valid(end_pos):\n            return False, \"Invalid positions\"\n        if not self.is_position_adjacent(start_pos, end_pos):\n            return False, \"Positions are not adjacent\"\n        if not self.is_pawn_on_position(start_pos):\n            return False, \"No pawn on start position\"\n        if self.is_pawn_on_position(end_pos):\n            return False, \"End position is occupied\"\n        return True, \"Move is possible\"\n    def is_position_within_board(self, position: Tuple[int, int]) -> bool:\n        '''\n        Check if a position is within the board boundaries.\n        '''\n        x, y = position\n        return 0 <= x < 5 and 0 <= y < 5\n    def is_position_adjacent(self, position1: Tuple[int, int], position2: Tuple[int, int]) -> bool:\n        '''\n        Check if two positions are adjacent to each other.\n        '''\n        x1, y1 = position1\n        x2, y2 = position2\n        return abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1\n    def is_pawn_on_position(self, position: Tuple[int, int]) -> bool:\n        '''\n        Check if there is a pawn on the specified position.\n        '''\n        for pawn in self.pawns:\n            if pawn.position == position:\n                return True\n        return False\n    def is_build_possible(self, builder_position: Tuple[int, int], build_position: Tuple[int, int]) -> bool:\n        '''\n        Check if a build is possible at the specified positions.\n        '''\n        if not self.is_position_valid(builder_position) or not self.is_position_valid(build_position):\n            return False\n        if not self.is_position_adjacent(builder_position, build_position):\n            return False\n        if self.is_pawn_on_position(build_position):\n            return False\n        return True\n    def get_player_pawns(self, player_number: int) -> List[Pawn]:\n        '''\n        Get a list of pawns owned by the specified player.\n        '''\n        player_pawns = []\n        for pawn in self.pawns:\n            if pawn.player_number == player_number:\n                player_pawns.append(pawn)\n        return player_pawns\n    def get_player_pawn(self, player_number: int, pawn_number: int) -> Pawn:\n        '''\n        Get the pawn with the specified number owned by the specified player.\n        '''\n        for pawn in self.pawns:\n            if pawn.player_number == player_number and pawn.number == pawn_number:\n                return pawn\n        return None\n    def get_playing_pawn(self, pawn_number: int) -> Pawn:\n        '''\n        Get the pawn currently playing its turn.\n        '''\n        for pawn in self.pawns:\n            if pawn.number == pawn_number:\n                return pawn\n        return None\n    def get_first_unplaced_player_pawn(self, player_number: int) -> Pawn:\n        '''\n        Get the first unplaced pawn owned by the specified player.\n        '''\n        for pawn in self.pawns:\n            if pawn.player_number == player_number and pawn.position is None:\n                return pawn\n        return None\n    def get_possible_movement_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:\n        '''\n        Get a list of possible movement positions for the specified pawn.\n        '''\n        possible_positions = []\n        x, y = pawn.position\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                new_x = x + dx\n                new_y = y + dy\n                new_pos = (new_x, new_y)\n                if self.is_position_valid(new_pos) and not self.is_pawn_on_position(new_pos):\n                    possible_positions.append(new_pos)\n        return possible_positions\n    def get_possible_building_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:\n        '''\n        Get a list of possible building positions for the specified pawn.\n        '''\n        possible_positions = []\n        x, y = pawn.position\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                new_x = x + dx\n                new_y = y + dy\n                new_pos = (new_x, new_y)\n                if self.is_position_valid(new_pos) and not self.is_pawn_on_position(new_pos):\n                    possible_positions.append(new_pos)\n        return possible_positions\n    def get_possible_movement_and_building_positions(self, pawn: Pawn) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:\n        '''\n        Get a list of possible movement and building positions for the specified pawn.\n        '''\n        possible_positions = []\n        x, y = pawn.position\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                new_x = x + dx\n                new_y = y + dy\n                new_pos = (new_x, new_y)\n                if self.is_position_valid(new_pos) and not self.is_pawn_on_position(new_pos):\n                    possible_positions.append((new_pos, new_pos))\n        return possible_positions\n    def place_pawn(self, position: Tuple[int, int]) -> Tuple[bool, str]:\n        '''\n        Place a pawn on the specified position.\n        Returns a tuple with a boolean indicating if the placement was successful and a message explaining why it was not successful.\n        '''\n        if not self.is_position_valid(position):\n            return False, \"Invalid position\"\n        if self.is_pawn_on_position(position):\n            return False, \"Position is occupied\"\n        pawn = self.get_first_unplaced_player_pawn(self.turn)\n        if pawn is None:\n            return False, \"No unplaced pawn available\"\n        pawn.move(position)\n        return True, \"Pawn placed successfully\"\n    def play_move(self, pawn_number: int, move_position: Tuple[int, int], build_position: Tuple[int, int]) -> Tuple[bool, str]:\n        '''\n        Play a move for the specified pawn.\n        Returns a tuple with a boolean indicating if the move was successful and a message explaining why it was not successful.\n        '''\n        pawn = self.get_playing_pawn(pawn_number)\n        if pawn is None:\n            return False, \"Invalid pawn number\"\n        if pawn.position is None:\n            return False, \"Pawn is not placed on the board\"\n        if not self.is_move_possible(pawn.position, move_position):\n            return False, \"Invalid move position\"\n        if not self.is_build_possible(move_position, build_position):\n            return False, \"Invalid build position\"\n        pawn.move(move_position)\n        return True, \"Move played successfully\"\n    def is_position_valid(self, pos: Tuple[int, int]) -> bool:\n        '''\n        Check if a position is valid on the board.\n        '''\n        return self.is_position_within_board(pos) and not self.is_pawn_on_position(pos)\n    def is_game_over(self) -> bool:\n        '''\n        Check if the game is over.\n        '''\n        return self.game_over\n    def is_everyone_stuck(self) -> bool:\n        '''\n        Check if everyone is stuck and the game is over.\n        '''\n        for pawn in self.pawns:\n            if pawn.position is not None:\n                return False\n        return True\n    def next_turn(self) -> int:\n        '''\n        Move to the next turn.\n        Returns the player number of the next turn.\n        '''\n        self.turn = (self.turn % self.number_of_players) + 1\n        return self.turn\n    def copy(self) -> \"Board\":\n        '''\n        Create a copy of the board.\n        '''\n        new_board = Board(self.number_of_players)\n        new_board.players = self.players.copy()\n        new_board.pawns = [pawn.copy() for pawn in self.pawns]\n        new_board.turn = self.turn\n        new_board.game_over = self.game_over\n        return new_board\n    def __repr__(self) -> str:\n        '''\n        Return a string representation of the board.\n        '''\n        return f\"Board with {self.number_of_players} players\"\n'''\nModule for the SantorinAI basic player example.\n'''\nfrom santorinai.board import Board, Pawn\nclass BasicPlayer:\n    def __init__(self, player_number, log_level = 0) -> None:\n        '''\n        Initialize the basic player with the specified player number and log level.\n        '''\n        self.player_number = player_number\n        self.log_level = log_level\n    def name(self):\n        '''\n        Get the name of the basic player.\n        '''\n        return \"Basic Player\"\n    def get_ally_pawn(self, board: Board, our_pawn: Pawn) -> Tuple[Pawn, None]:\n        '''\n        Get an ally pawn for the basic player.\n        '''\n        ally_pawns = board.get_player_pawns(self.player_number)\n        for pawn in ally_pawns:\n            if pawn != our_pawn:\n                return pawn\n        return None\n    def get_enemy_pawns(self, board, our_pawn):\n        '''\n        Get the enemy pawns for the basic player.\n        '''\n        enemy_pawns = []\n        for player_number in range(1, board.number_of_players + 1):\n            if player_number != self.player_number:\n                enemy_pawns.extend(board.get_player_pawns(player_number))\n        return enemy_pawns\n    def get_winning_moves(self, board: Board, pawn):\n        '''\n        Get the winning moves for the basic player.\n        '''\n        winning_moves = []\n        possible_moves = board.get_possible_movement_and_building_positions(pawn)\n        for move_position, build_position in possible_moves:\n            temp_board = board.copy()\n            success, _ = temp_board.play_move(pawn.number, move_position, build_position)\n            if success and temp_board.is_game_over():\n                winning_moves.append((move_position, build_position))\n        return winning_moves\n    def place_pawn(self, board: Board, pawn):\n        '''\n        Place a pawn on the board for the basic player.\n        '''\n        # Get the available positions for pawn placement\n        available_positions = board.get_possible_movement_positions(pawn)\n        # Choose the first available position as the placement position\n        placement_position = available_positions[0]\n        # Place the pawn on the board\n        success, message = board.place_pawn(placement_position)\n        if success:\n            print(f\"Player {self.player_number} placed pawn at position {placement_position}\")\n        else:\n            print(f\"Player {self.player_number} failed to place pawn at position {placement_position}\")\n            print(f\"Reason: {message}\")\n    def play_move(self, board):\n        '''\n        Play a move on the board for the basic player.\n        '''\n        # Get the player's pawns\n        pawns = board.get_player_pawns(self.player_number)\n        # Choose the first pawn as the playing pawn\n        playing_pawn = pawns[0]\n        # Get the ally pawn\n        ally_pawn = self.get_ally_pawn(board, playing_pawn)\n        # Get the enemy pawns\n        enemy_pawns = self.get_enemy_pawns(board, playing_pawn)\n        # Get the winning moves\n        winning_moves = self.get_winning_moves(board, playing_pawn)\n        # Choose a random winning move if available\n        if winning_moves:\n            move_position, build_position = random.choice(winning_moves)\n            return playing_pawn.number, move_position, build_position\n        # Choose a random movement position\n        movement_positions = board.get_possible_movement_positions(playing_pawn)\n        move_position = random.choice(movement_positions)\n        # Choose a random building position\n        building_positions = board.get_possible_building_positions(playing_pawn)\n        build_position = random.choice(building_positions)\n        return playing_pawn.number, move_position, build_position\n'''\nModule for the SantorinAI player class.\n'''\nfrom santorinai.board import Board, Pawn\nfrom typing import Tuple\nclass Player:\n    def __init__(self, player_number: int, log_level = 0) -> None:\n        '''\n        Initialize the player with the specified player number and log level.\n        '''\n        self.player_number = player_number\n        self.log_level = log_level\n    def name(self) -> str:\n        '''\n        Get the name of the player.\n        '''\n        pass\n    def place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:\n        '''\n        Place a pawn on the board.\n        Returns the position where the pawn is placed.\n        '''\n        pass\n    def play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:\n        '''\n        Play a move on the board.\n        Returns the pawn number, move position, and build position.\n        '''\n        pass\n'''\nModule for the SantorinAI pawn class.\n'''\nfrom typing import Tuple\nclass Pawn:\n    def __init__(self, number: int, order: int, player_number: int):\n        '''\n        Initialize a pawn with the specified number, order, and player number.\n        '''\n        self.number = number\n        self.order = order\n        self.player_number = player_number\n        self.position = None\n    def move(self, new_pos: Tuple[int, int]):\n        '''\n        Move the pawn to the specified position.\n        '''\n        self.position = new_pos\n    def copy(self) -> \"Pawn\":\n        '''\n        Create a copy of the pawn.\n        '''\n        new_pawn = Pawn(self.number, self.order, self.player_number)\n        new_pawn.position = self.position\n        return new_pawn\n    def __repr__(self):\n        '''\n        Return a string representation of the pawn.\n        '''\n        return f\"Pawn {self.number} (Player {self.player_number}) at {self.position}\"\n",
        "design": {
            "0": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/__init__",
                "class": "santorinai/board.py.Board",
                "signature": "def __init__(self, number_of_players: int):"
            },
            "1": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_move_possible",
                "class": "santorinai/board.py.Board",
                "signature": "def is_move_possible(self, start_pos: Tuple[int, int], end_pos: Tuple[int, int]) -> Tuple[bool, str]:"
            },
            "2": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_position_within_board",
                "class": "santorinai/board.py.Board",
                "signature": "def is_position_within_board(self, position: Tuple[int, int]):"
            },
            "3": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_position_adjacent",
                "class": "santorinai/board.py.Board",
                "signature": "def is_position_adjacent(self, position1: Tuple[int, int], position2: Tuple[int, int]):"
            },
            "4": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_pawn_on_position",
                "class": "santorinai/board.py.Board",
                "signature": "def is_pawn_on_position(self, position: Tuple[int, int]):"
            },
            "5": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_build_possible",
                "class": "santorinai/board.py.Board",
                "signature": "def is_build_possible(self, builder_position: Tuple[int, int], build_position: Tuple[int, int]):"
            },
            "6": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_player_pawns",
                "class": "santorinai/board.py.Board",
                "signature": "def get_player_pawns(self, player_number: int) -> List[Pawn]:"
            },
            "7": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_player_pawn",
                "class": "santorinai/board.py.Board",
                "signature": "def get_player_pawn(self, player_number: int, pawn_number: int) -> Pawn:"
            },
            "8": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_playing_pawn",
                "class": "santorinai/board.py.Board",
                "signature": "def get_playing_pawn(self, pawn_number: int) -> Pawn:"
            },
            "9": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_first_unplaced_player_pawn",
                "class": "santorinai/board.py.Board",
                "signature": "def get_first_unplaced_player_pawn(self, player_number: int) -> Pawn:"
            },
            "10": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_possible_movement_positions",
                "class": "santorinai/board.py.Board",
                "signature": "def get_possible_movement_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:"
            },
            "11": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_possible_building_positions",
                "class": "santorinai/board.py.Board",
                "signature": "def get_possible_building_positions(self, pawn: Pawn) -> List[Tuple[int, int]]:"
            },
            "12": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/get_possible_movement_and_building_positions",
                "class": "santorinai/board.py.Board",
                "signature": "def get_possible_movement_and_building_positions(self, pawn: Pawn):"
            },
            "13": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/place_pawn",
                "class": "santorinai/board.py.Board",
                "signature": "def place_pawn(self, position: Tuple[int, int]) -> Tuple[bool, str]:"
            },
            "14": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/play_move",
                "class": "santorinai/board.py.Board",
                "signature": "def play_move(self, pawn_number: int, move_position: Tuple[int, int], build_position: Tuple[int, int]) -> Tuple[bool, str]:"
            },
            "15": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_position_valid",
                "class": "santorinai/board.py.Board",
                "signature": "def is_position_valid(self, pos: Tuple[int, int]):"
            },
            "16": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_game_over",
                "class": "santorinai/board.py.Board",
                "signature": "def is_game_over(self):"
            },
            "17": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/is_everyone_stuck",
                "class": "santorinai/board.py.Board",
                "signature": "def is_everyone_stuck(self):"
            },
            "18": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/next_turn",
                "class": "santorinai/board.py.Board",
                "signature": "def next_turn(self):"
            },
            "19": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/copy",
                "class": "santorinai/board.py.Board",
                "signature": "def copy(self) -> \"Board\":"
            },
            "20": {
                "relative_path": "santorinai/board.py",
                "fqn_list": "santorinai/board.py/Board/__repr__",
                "class": "santorinai/board.py.Board",
                "signature": "def __repr__(self) -> str:"
            },
            "21": {
                "relative_path": "santorinai/player.py",
                "fqn_list": "santorinai/player.py/Player/__init__",
                "class": "santorinai/player.py.Player",
                "signature": "def __init__(self, player_number: int, log_level = 0) -> None:"
            },
            "22": {
                "relative_path": "santorinai/player.py",
                "fqn_list": "santorinai/player.py/Player/name",
                "class": "santorinai/player.py.Player",
                "signature": "def name(self):"
            },
            "23": {
                "relative_path": "santorinai/player.py",
                "fqn_list": "santorinai/player.py/Player/place_pawn",
                "class": "santorinai/player.py.Player",
                "signature": "def place_pawn(self, board: Board, pawn: Pawn) -> Tuple[int, int]:"
            },
            "24": {
                "relative_path": "santorinai/player.py",
                "fqn_list": "santorinai/player.py/Player/play_move",
                "class": "santorinai/player.py.Player",
                "signature": "def play_move(self, board: Board) -> Tuple[int, Tuple[int, int], Tuple[int, int]]:"
            },
            "25": {
                "relative_path": "santorinai/pawn.py",
                "fqn_list": "santorinai/pawn.py/Pawn/__init__",
                "class": "santorinai/pawn.py.Pawn",
                "signature": "def __init__(self, number: int, order: int, player_number: int):"
            },
            "26": {
                "relative_path": "santorinai/pawn.py",
                "fqn_list": "santorinai/pawn.py/Pawn/move",
                "class": "santorinai/pawn.py.Pawn",
                "signature": "def move(self, new_pos: Tuple[int, int]):"
            },
            "27": {
                "relative_path": "santorinai/pawn.py",
                "fqn_list": "santorinai/pawn.py/Pawn/copy",
                "class": "santorinai/pawn.py.Pawn",
                "signature": "def copy(self) -> \"Pawn\":"
            },
            "28": {
                "relative_path": "santorinai/pawn.py",
                "fqn_list": "santorinai/pawn.py/Pawn/__repr__",
                "class": "santorinai/pawn.py.Pawn",
                "signature": "def __repr__(self):"
            },
            "29": {
                "relative_path": "santorinai/board_displayer/board_displayer.py",
                "fqn_list": "santorinai/board_displayer/board_displayer.py/init_window",
                "class": null,
                "signature": "def init_window(player_names):"
            },
            "30": {
                "relative_path": "santorinai/board_displayer/board_displayer.py",
                "fqn_list": "santorinai/board_displayer/board_displayer.py/draw_isometric_cube",
                "class": null,
                "signature": "def draw_isometric_cube(window: sg.Window, x, y, size, cube_heigth, color, line_color, line_width):"
            },
            "31": {
                "relative_path": "santorinai/board_displayer/board_displayer.py",
                "fqn_list": "santorinai/board_displayer/board_displayer.py/update_board",
                "class": null,
                "signature": "def update_board(window: sg.Window, board: Board):"
            },
            "32": {
                "relative_path": "santorinai/board_displayer/board_displayer.py",
                "fqn_list": "santorinai/board_displayer/board_displayer.py/close_window",
                "class": null,
                "signature": "def close_window(window):"
            },
            "33": {
                "relative_path": "santorinai/player_examples/first_choice_player.py",
                "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/__init__",
                "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
                "signature": "def __init__(self, player_number, log_level = 0) -> None:"
            },
            "34": {
                "relative_path": "santorinai/player_examples/first_choice_player.py",
                "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/name",
                "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
                "signature": "def name(self):"
            },
            "35": {
                "relative_path": "santorinai/player_examples/first_choice_player.py",
                "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/place_pawn",
                "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
                "signature": "def place_pawn(self, board: Board, pawn: Pawn):"
            },
            "36": {
                "relative_path": "santorinai/player_examples/first_choice_player.py",
                "fqn_list": "santorinai/player_examples/first_choice_player.py/FirstChoicePlayer/play_move",
                "class": "santorinai/player_examples/first_choice_player.py.FirstChoicePlayer",
                "signature": "def play_move(self, board: Board):"
            },
            "37": {
                "relative_path": "santorinai/player_examples/random_player.py",
                "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/__init__",
                "class": "santorinai/player_examples/random_player.py.RandomPlayer",
                "signature": "def __init__(self, player_number, log_level = 0) -> None:"
            },
            "38": {
                "relative_path": "santorinai/player_examples/random_player.py",
                "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/name",
                "class": "santorinai/player_examples/random_player.py.RandomPlayer",
                "signature": "def name(self):"
            },
            "39": {
                "relative_path": "santorinai/player_examples/random_player.py",
                "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/place_pawn",
                "class": "santorinai/player_examples/random_player.py.RandomPlayer",
                "signature": "def place_pawn(self, board: Board, pawn: Pawn):"
            },
            "40": {
                "relative_path": "santorinai/player_examples/random_player.py",
                "fqn_list": "santorinai/player_examples/random_player.py/RandomPlayer/play_move",
                "class": "santorinai/player_examples/random_player.py.RandomPlayer",
                "signature": "def play_move(self, board: Board):"
            },
            "41": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/__init__",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def __init__(self, player_number, log_level = 0) -> None:"
            },
            "42": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/name",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def name(self):"
            },
            "43": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_ally_pawn",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def get_ally_pawn(self, board: Board, our_pawn: Pawn) -> Tuple[Pawn, None]:"
            },
            "44": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_enemy_pawns",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def get_enemy_pawns(self, board, our_pawn):"
            },
            "45": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/get_winning_moves",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def get_winning_moves(self, board: Board, pawn):"
            },
            "46": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/place_pawn",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def place_pawn(self, board: Board, pawn):"
            },
            "47": {
                "relative_path": "santorinai/player_examples/basic_player.py",
                "fqn_list": "santorinai/player_examples/basic_player.py/BasicPlayer/play_move",
                "class": "santorinai/player_examples/basic_player.py.BasicPlayer",
                "signature": "def play_move(self, board):"
            }
        }
    },
    "maccarone": {
        "generated code": "'''\nMaccarone GUI\n'''\nimport tkinter as tk\nfrom tkinter import messagebox, filedialog\nfrom maccarone import preprocess, complete_chat\nclass MaccaroneGUI(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Maccarone\")\n        self.geometry(\"400x200\")\n        self.create_widgets()\n    def create_widgets(self):\n        self.open_button = tk.Button(self, text=\"Open File\", command=self.open_file)\n        self.open_button.pack(pady=20)\n        self.chat_button = tk.Button(self, text=\"Complete Chat\", command=self.complete_chat)\n        self.chat_button.pack(pady=10)\n    def open_file(self):\n        file_path = filedialog.askopenfilename(filetypes=[(\"Python Files\", \"*.py\")])\n        if file_path:\n            preprocess(file_path)\n            messagebox.showinfo(\"Maccarone\", \"File preprocessed successfully!\")\n    def complete_chat(self):\n        messages = []  # TODO: Get chat messages from user input\n        completed_chat = complete_chat(messages)\n        messagebox.showinfo(\"Maccarone\", f\"Completed Chat:\\n{completed_chat}\")\nif __name__ == \"__main__\":\n    app = MaccaroneGUI()\n    app.mainloop()\n# Maccarone module\nimport openai\ndef preprocess(file_path):\n    # TODO: Implement preprocessing logic\n    pass\ndef complete_chat(messages):\n    # TODO: Implement OpenAI chat completion\n    completed_chat = \"\"\n    return completed_chat\n'''\nMaccarone OpenAI Integration\n'''\ndef complete_chat(messages):\n    # TODO: Implement OpenAI chat completion\n    completed_chat = \"\"\n    return completed_chat\n",
        "design": {
            "0": {
                "relative_path": "examples/file_sizes_ext.py",
                "fqn_list": "examples/file_sizes_ext.py/main",
                "class": null,
                "signature": "def main(path: str, extension: str | None):"
            },
            "1": {
                "relative_path": "examples/add.py",
                "fqn_list": "examples/add.py/add_two_numbers",
                "class": null,
                "signature": "def add_two_numbers(x, y):"
            },
            "2": {
                "relative_path": "examples/fizzbuzz.py",
                "fqn_list": "examples/fizzbuzz.py/main",
                "class": null,
                "signature": "def main(n: int):"
            },
            "3": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/Todo/__init__",
                "class": "examples/todo.py.Todo",
                "signature": "def __init__(self, description, status = 'not done', id = None):"
            },
            "4": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/load_todos",
                "class": null,
                "signature": "def load_todos() -> list[Todo]:"
            },
            "5": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/save_todos",
                "class": null,
                "signature": "def save_todos(todos: list[Todo]) -> None:"
            },
            "6": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/add_todo",
                "class": null,
                "signature": "def add_todo(description):"
            },
            "7": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/remove_todo",
                "class": null,
                "signature": "def remove_todo(id):"
            },
            "8": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/print_todos",
                "class": null,
                "signature": "def print_todos():"
            },
            "9": {
                "relative_path": "examples/todo.py",
                "fqn_list": "examples/todo.py/main",
                "class": null,
                "signature": "def main():"
            },
            "10": {
                "relative_path": "examples/file_sizes.py",
                "fqn_list": "examples/file_sizes.py/main",
                "class": null,
                "signature": "def main(path: str):"
            },
            "11": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/MissingPiece/get_line_pos",
                "class": "src/maccarone/preprocessor.py.MissingPiece",
                "signature": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:"
            },
            "12": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/MissingPiece/complete",
                "class": "src/maccarone/preprocessor.py.MissingPiece",
                "signature": "def complete(self, replacement: Optional[str]) -> str:"
            },
            "13": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/find_line_number",
                "class": null,
                "signature": "def find_line_number(text: str, pos: int):"
            },
            "14": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/__init__",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def __init__(self, raw_source: str, block_at_line: Optional[int] = None):"
            },
            "15": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/generic_visit",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def generic_visit(self, node: Node, visited_children: List[Node]):"
            },
            "16": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_maccarone(self, node: Node, visited_children: list):"
            },
            "17": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone_chunk",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_maccarone_chunk(self, node: Node, visited_children: list):"
            },
            "18": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_snippet(self, node: Node, visited_children: list):"
            },
            "19": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_snippet_open(self, node: Node, visited_children: list):"
            },
            "20": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_single",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_snippet_open_single(self, node: Node, visited_children: list):"
            },
            "21": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_multi",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_snippet_open_multi(self, node: Node, visited_children: list):"
            },
            "22": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_open",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_guidance_open(self, node: Node, visited_children: list):"
            },
            "23": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_line",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_guidance_line(self, node: Node, visited_children: list):"
            },
            "24": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_lines",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_guidance_lines(self, node: Node, visited_children: list):"
            },
            "25": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_inner",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_guidance_inner(self, node: Node, visited_children: list):"
            },
            "26": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_human_source",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_human_source(self, node: Node, visited_children: list):"
            },
            "27": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_ai_source",
                "class": "src/maccarone/preprocessor.py.RawSourceVisitor",
                "signature": "def visit_ai_source(self, node: Node, visited_children: list):"
            },
            "28": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/raw_source_to_pieces",
                "class": null,
                "signature": "def raw_source_to_pieces(input: str, block_at_line: Optional[int] = None) -> List[Piece]:"
            },
            "29": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/raw_pieces_to_tagged_input",
                "class": null,
                "signature": "def raw_pieces_to_tagged_input(raw_pieces: List[Piece]) -> str:"
            },
            "30": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/tagged_input_to_tagged_output",
                "class": null,
                "signature": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: ChatAPI) -> str:"
            },
            "31": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/tagged_output_to_completed_pieces",
                "class": null,
                "signature": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:"
            },
            "32": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/pieces_to_final_source",
                "class": null,
                "signature": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:"
            },
            "33": {
                "relative_path": "src/maccarone/preprocessor.py",
                "fqn_list": "src/maccarone/preprocessor.py/preprocess_maccarone",
                "class": null,
                "signature": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int] = None) -> str:"
            },
            "34": {
                "relative_path": "src/maccarone/openai.py",
                "fqn_list": "src/maccarone/openai.py/complete_chat",
                "class": null,
                "signature": "def complete_chat(messages: List[Dict[str, str]], model = \"gpt-4\", on_token: Callable[[int], None] = lambda p: None) -> str:"
            },
            "35": {
                "relative_path": "src/maccarone/openai.py",
                "fqn_list": "src/maccarone/openai.py/ChatAPI/complete_chat",
                "class": "src/maccarone/openai.py.ChatAPI",
                "signature": "def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model = \"gpt-4\") -> str:"
            },
            "36": {
                "relative_path": "src/maccarone/scripts/preprocess.py",
                "fqn_list": "src/maccarone/scripts/preprocess.py/preprocess",
                "class": null,
                "signature": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:"
            },
            "37": {
                "relative_path": "src/maccarone/scripts/preprocess.py",
                "fqn_list": "src/maccarone/scripts/preprocess.py/main",
                "class": null,
                "signature": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int] = None) -> None:"
            },
            "38": {
                "relative_path": "src/maccarone/scripts/preprocess.py",
                "fqn_list": "src/maccarone/scripts/preprocess.py/parse_args",
                "class": null,
                "signature": "def parse_args() -> Namespace:"
            },
            "39": {
                "relative_path": "src/maccarone/scripts/preprocess.py",
                "fqn_list": "src/maccarone/scripts/preprocess.py/script_main",
                "class": null,
                "signature": "def script_main():"
            }
        }
    },
    "ufomerge": {
        "generated code": "'''\nThis is the main file of the Translategram Python package. It provides translation capabilities for Telegram bots using multiple translation services.\n'''\nimport telegram\nfrom translate import Translator\ndef translate_message(message):\n    \"\"\"\n    Translates the given message using the Translator class.\n    \"\"\"\n    translator = Translator()\n    translated_message = translator.translate(message)\n    return translated_message\ndef send_translated_message(chat_id, translated_message):\n    \"\"\"\n    Sends the translated message to the specified chat ID using the Telegram API.\n    \"\"\"\n    bot = telegram.Bot(token=\"YOUR_TELEGRAM_BOT_TOKEN\")\n    bot.send_message(chat_id=chat_id, text=translated_message)\ndef main():\n    \"\"\"\n    The main function of the Translategram Python package.\n    \"\"\"\n    # Get the message from the user\n    message = input(\"Enter the message to translate: \")\n    # Translate the message\n    translated_message = translate_message(message)\n    # Get the chat ID from the user\n    chat_id = input(\"Enter the chat ID to send the translated message: \")\n    # Send the translated message\n    send_translated_message(chat_id, translated_message)\nif __name__ == \"__main__\":\n    main()\n'''\nThis file contains the implementation of the ufomerge layout functions.\n'''\nimport ast\nfrom typing import Dict, List, Set, Iterable, Optional, Mapping, Any\ndef _deduplicate_class_defs(class_name_references: Dict[str, List[ast.GlyphClassName]]) -> List[ast.GlyphClassDefinition]:\n    \"\"\"\n    Deduplicates class definitions based on the given class name references.\n    \"\"\"\n    # Implementation goes here\nclass LayoutSubsetter:\n    \"\"\"\n    The LayoutSubsetter class provides functionality for subsetting layout features.\n    \"\"\"\n    def __init__(self, glyphset):\n        \"\"\"\n        Initializes the LayoutSubsetter class with the given glyphset.\n        \"\"\"\n        # Implementation goes here\n    def subset(self, fea: ast.FeatureFile):\n        \"\"\"\n        Subsets the given feature file.\n        \"\"\"\n        # Implementation goes here\nclass LayoutSubsetVisitor:\n    \"\"\"\n    The LayoutSubsetVisitor class provides functionality for visiting layout subsets.\n    \"\"\"\n    def __init__(self, glyphset):\n        \"\"\"\n        Initializes the LayoutSubsetVisitor class with the given glyphset.\n        \"\"\"\n        # Implementation goes here\ndef visit(visitor, mcd, *args, **kwargs):\n    \"\"\"\n    Visits the given mcd with the provided visitor.\n    \"\"\"\n    # Implementation goes here\ndef visit(visitor, st, *args, **kwargs):\n    \"\"\"\n    Visits the given st with the provided visitor.\n    \"\"\"\n    # Implementation goes here\ndef visit(visitor, block, *args, **kwargs):\n    \"\"\"\n    Visits the given block with the provided visitor.\n    \"\"\"\n    # Implementation goes here\ndef _ignore_pos_sub(visitor, st, *args, **kwargs):\n    \"\"\"\n    Ignores position substitution for the given st with the provided visitor.\n    \"\"\"\n    # Implementation goes here\nclass LayoutClosureVisitor:\n    \"\"\"\n    The LayoutClosureVisitor class provides functionality for visiting layout closures.\n    \"\"\"\n    def __init__(self, incoming_glyphset: Dict[str, bool], glyphset: Set[str]):\n        \"\"\"\n        Initializes the LayoutClosureVisitor class with the given incoming_glyphset and glyphset.\n        \"\"\"\n        # Implementation goes here\ndef filter_glyphs(glyphs: Iterable[str], glyphset: Set[str]) -> List[str]:\n    \"\"\"\n    Filters the given glyphs based on the provided glyphset.\n    \"\"\"\n    # Implementation goes here\ndef filter_glyph_mapping(glyphs: Mapping[str, Any], glyphset: Set[str]) -> Dict[str, Any]:\n    \"\"\"\n    Filters the given glyph mapping based on the provided glyphset.\n    \"\"\"\n    # Implementation goes here\ndef filter_sequence(slots: Iterable, glyphset: Set[str], class_name_references: Optional[Dict[str, List[ast.GlyphClassName]]] = None) -> List[List[str]]:\n    \"\"\"\n    Filters the given sequence based on the provided glyphset and class name references.\n    \"\"\"\n    # Implementation goes here\ndef filter_glyph_container(container: Any, glyphset: Set[str], class_name_references: Optional[Dict[str, List[ast.GlyphClassName]]] = None) -> Any:\n    \"\"\"\n    Filters the given glyph container based on the provided glyphset and class name references.\n    \"\"\"\n    # Implementation goes here\ndef has_any_empty_slots(sequence: List) -> bool:\n    \"\"\"\n    Checks if the given sequence has any empty slots.\n    \"\"\"\n    # Implementation goes here\n'''\nThis file contains the Translator class which provides translation capabilities using multiple translation services.\n'''\nimport googletrans\nclass Translator:\n    \"\"\"\n    The Translator class provides translation capabilities using multiple translation services.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes the Translator class.\n        \"\"\"\n        self.translator = googletrans.Translator()\n    def translate(self, message):\n        \"\"\"\n        Translates the given message using the Google Translate service.\n        \"\"\"\n        translated_message = self.translator.translate(message, dest='en').text\n        return translated_message\n'''\nThis file contains the implementation of the UFOMerger class.\n'''\nfrom fontTools.ufoLib import Font\nfrom typing import List, Iterable, Optional, Mapping, Any\nfrom pathlib import Path\nclass UFOMerger:\n    \"\"\"\n    The UFOMerger class provides functionality for merging UFO fonts.\n    \"\"\"\n    def __post_init__(self):\n        \"\"\"\n        Post-initialization method for the UFOMerger class.\n        \"\"\"\n        # Implementation goes here\n    def merge(self):\n        \"\"\"\n        Merges the UFO fonts.\n        \"\"\"\n        # Implementation goes here\n    def close_components(self, glyph: str):\n        \"\"\"\n        Closes the components of the specified glyph.\n        \"\"\"\n        # Implementation goes here\n    def filter_glyphs_incoming(self, glyphs: Iterable[str]) -> List[str]:\n        \"\"\"\n        Filters the incoming glyphs based on the existing glyphset.\n        \"\"\"\n        # Implementation goes here\n    def add_language_systems(self, incoming_languagesystems):\n        \"\"\"\n        Adds the language systems from the incoming UFO to the existing UFO.\n        \"\"\"\n        # Implementation goes here\n    def merge_kerning(self):\n        \"\"\"\n        Merges the kerning information from the incoming UFO to the existing UFO.\n        \"\"\"\n        # Implementation goes here\n    def merge_set(self, name, glyph, create_if_not_in_ufo1=False):\n        \"\"\"\n        Merges the specified set from the incoming UFO to the existing UFO.\n        \"\"\"\n        # Implementation goes here\n    def merge_dict(self, name, glyph, create_if_not_in_ufo1=False):\n        \"\"\"\n        Merges the specified dictionary from the incoming UFO to the existing UFO.\n        \"\"\"\n        # Implementation goes here\ndef merge_ufos(ufo1: Font, ufo2: Font, glyphs: Iterable[str] = None, exclude_glyphs: Iterable[str] = None, codepoints: Iterable[int] = None, layout_handling: str = \"subset\", existing_handling: str = \"replace\", include_dir: Path | None = None, original_glyphlist: Iterable[str] | None = None) -> None:\n    \"\"\"\n    Merges the specified UFO fonts.\n    \"\"\"\n    # Implementation goes here\ndef subset_ufo(ufo: Font, glyphs: Iterable[str] = None, exclude_glyphs: Iterable[str] = None, codepoints: Iterable[int] = None, layout_handling: str = \"subset\", include_dir: Path | None = None, original_glyphlist: Iterable[str] | None = None) -> Font:\n    \"\"\"\n    Subsets the specified UFO font.\n    \"\"\"\n    # Implementation goes here\n",
        "design": {
            "0": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/_deduplicate_class_defs",
                "class": null,
                "signature": "def _deduplicate_class_defs(class_name_references: dict[str, list[ast.GlyphClassName]]) -> list[ast.GlyphClassDefinition]:"
            },
            "1": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/LayoutSubsetter/subset",
                "class": "ufomerge/layout.py.LayoutSubsetter",
                "signature": "def subset(self, fea: ast.FeatureFile):"
            },
            "2": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/LayoutSubsetVisitor/__init__",
                "class": "ufomerge/layout.py.LayoutSubsetVisitor",
                "signature": "def __init__(self, glyphset):"
            },
            "3": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, mcd, *args, **kwargs):"
            },
            "4": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "5": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "6": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "7": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "8": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "9": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "10": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "11": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "12": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "13": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "14": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/_ignore_pos_sub",
                "class": null,
                "signature": "def _ignore_pos_sub(visitor, st, *args, **kwargs):"
            },
            "15": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "16": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "17": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, block, *args, **kwargs):"
            },
            "18": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "19": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "20": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(_visitor, st, *args, **kwargs):"
            },
            "21": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(_visitor, st, *args, **kwargs):"
            },
            "22": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(_visitor, st, *args, **kwargs):"
            },
            "23": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(_visitor, st, *args, **kwargs):"
            },
            "24": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(_visitor, st, *args, **kwargs):"
            },
            "25": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/LayoutClosureVisitor/__init__",
                "class": "ufomerge/layout.py.LayoutClosureVisitor",
                "signature": "def __init__(self, incoming_glyphset: Dict[str, bool], glyphset: Set[str]):"
            },
            "26": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "27": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "28": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "29": {
                "relative_path": "ufomerge/layout.py",
                "fqn_list": "ufomerge/layout.py/visit",
                "class": null,
                "signature": "def visit(visitor, st, *args, **kwargs):"
            },
            "30": {
                "relative_path": "ufomerge/utils.py",
                "fqn_list": "ufomerge/utils.py/filter_glyphs",
                "class": null,
                "signature": "def filter_glyphs(glyphs: Iterable[str], glyphset: Set[str]) -> list[str]:"
            },
            "31": {
                "relative_path": "ufomerge/utils.py",
                "fqn_list": "ufomerge/utils.py/filter_glyph_mapping",
                "class": null,
                "signature": "def filter_glyph_mapping(glyphs: Mapping[str, Any], glyphset: Set[str]) -> dict[str, Any]:"
            },
            "32": {
                "relative_path": "ufomerge/utils.py",
                "fqn_list": "ufomerge/utils.py/filter_sequence",
                "class": null,
                "signature": "def filter_sequence(slots: Iterable, glyphset: Set[str], class_name_references: Optional[Dict[str, List[ast.GlyphClassName]]] = None) -> list[list[str]]:"
            },
            "33": {
                "relative_path": "ufomerge/utils.py",
                "fqn_list": "ufomerge/utils.py/filter_glyph_container",
                "class": null,
                "signature": "def filter_glyph_container(container: Any, glyphset: Set[str], class_name_references: Optional[Dict[str, List[ast.GlyphClassName]]] = None) -> Any:"
            },
            "34": {
                "relative_path": "ufomerge/utils.py",
                "fqn_list": "ufomerge/utils.py/has_any_empty_slots",
                "class": null,
                "signature": "def has_any_empty_slots(sequence: list) -> bool:"
            },
            "35": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/__post_init__",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def __post_init__(self):"
            },
            "36": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/merge",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def merge(self):"
            },
            "37": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/close_components",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def close_components(self, glyph: str):"
            },
            "38": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/filter_glyphs_incoming",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def filter_glyphs_incoming(self, glyphs: Iterable[str]) -> list[str]:"
            },
            "39": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/add_language_systems",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def add_language_systems(self, incoming_languagesystems):"
            },
            "40": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/merge_kerning",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def merge_kerning(self):"
            },
            "41": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/merge_set",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def merge_set(self, name, glyph, create_if_not_in_ufo1 = False):"
            },
            "42": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/UFOMerger/merge_dict",
                "class": "ufomerge/__init__.py.UFOMerger",
                "signature": "def merge_dict(self, name, glyph, create_if_not_in_ufo1 = False):"
            },
            "43": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/merge_ufos",
                "class": null,
                "signature": "def merge_ufos(ufo1: Font, ufo2: Font, glyphs: Iterable[str] = None, exclude_glyphs: Iterable[str] = None, codepoints: Iterable[int] = None, layout_handling: str = \"subset\", existing_handling: str = \"replace\", include_dir: Path | None = None, original_glyphlist: Iterable[str] | None = None) -> None:"
            },
            "44": {
                "relative_path": "ufomerge/__init__.py",
                "fqn_list": "ufomerge/__init__.py/subset_ufo",
                "class": null,
                "signature": "def subset_ufo(ufo: Font, glyphs: Iterable[str] = None, exclude_glyphs: Iterable[str] = None, codepoints: Iterable[int] = None, layout_handling: str = \"subset\", include_dir: Path | None = None, original_glyphlist: Iterable[str] | None = None) -> Font:"
            }
        }
    },
    "postgres-tq": {
        "generated code": "'''\nMain file for the Postgres Task Queue software.\n'''\nfrom tkinter import Tk, Label, Button\nfrom task_queue import TaskQueue\nclass TaskQueueApp:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"Postgres Task Queue\")\n        self.label = Label(master, text=\"Welcome to Postgres Task Queue!\")\n        self.label.pack()\n        self.add_task_button = Button(master, text=\"Add Task\", command=self.add_task)\n        self.add_task_button.pack()\n        self.get_task_button = Button(master, text=\"Get Task\", command=self.get_task)\n        self.get_task_button.pack()\n        self.mark_complete_button = Button(master, text=\"Mark Complete\", command=self.mark_complete)\n        self.mark_complete_button.pack()\n        self.prune_tasks_button = Button(master, text=\"Prune Completed Tasks\", command=self.prune_tasks)\n        self.prune_tasks_button.pack()\n        self.task_queue = TaskQueue(\"postgres://username:password@localhost:5432/database\")\n    def add_task(self):\n        queue_name = input(\"Enter queue name: \")\n        task_data = input(\"Enter task data: \")\n        ttl = int(input(\"Enter time-to-live (TTL) in seconds: \"))\n        self.task_queue.add_task(queue_name, task_data, ttl)\n    def get_task(self):\n        queue_name = input(\"Enter queue name: \")\n        task = self.task_queue.get_task(queue_name)\n        if task:\n            print(\"Task ID:\", task.task_id)\n            print(\"Task Data:\", task.task_data)\n            print(\"Creation Time:\", task.creation_time)\n            print(\"Processing Status:\", task.processing_status)\n            print(\"Lease Timeout:\", task.lease_timeout)\n            print(\"Completion Time:\", task.completion_time)\n        else:\n            print(\"No available tasks in the queue.\")\n    def mark_complete(self):\n        task_id = input(\"Enter task ID: \")\n        self.task_queue.mark_task_complete(task_id)\n    def prune_tasks(self):\n        queue_name = input(\"Enter queue name: \")\n        self.task_queue.prune_completed_tasks(queue_name)\nroot = Tk()\napp = TaskQueueApp(root)\nroot.mainloop()\nFROM python:3.9\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"python\", \"main.py\"]\n'''\nTask class for representing a task in the task queue.\n'''\nclass Task:\n    def __init__(self, task_id, queue_name, task_data, creation_time, processing_status, lease_timeout, completion_time):\n        self.task_id = task_id\n        self.queue_name = queue_name\n        self.task_data = task_data\n        self.creation_time = creation_time\n        self.processing_status = processing_status\n        self.lease_timeout = lease_timeout\n        self.completion_time = completion_time\nfrom task import Task\n",
        "design": {
            "0": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/__init__",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def __init__(self, dsn: str, queue_name: str, table_name: str = \"task_queue\", reset: bool = False, create_table: bool = False, ttl_zero_callback: Optional[\n            Callable[[UUID, Optional[str]], None]\n        ] = None):"
            },
            "1": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/connect",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def connect(self) -> None:"
            },
            "2": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/_create_queue_table",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def _create_queue_table(self) -> None:"
            },
            "3": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/__len__",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def __len__(self) -> int:"
            },
            "4": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/add",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def add(self, task: Dict[str, Any], lease_timeout: float, ttl: int = 3) -> str:"
            },
            "5": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/get",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def get(self) -> Tuple[Optional[Dict[str, Any]], Optional[UUID]]:"
            },
            "6": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/complete",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def complete(self, task_id: Optional[UUID]) -> None:"
            },
            "7": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/is_empty",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def is_empty(self) -> bool:"
            },
            "8": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/check_expired_leases",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def check_expired_leases(self) -> None:"
            },
            "9": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/get_updated_expired_task",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def get_updated_expired_task(self, task_id: UUID) -> Tuple[Optional[str], Optional[int]]:"
            },
            "10": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/_serialize",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def _serialize(self, task: Any) -> str:"
            },
            "11": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/_deserialize",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def _deserialize(self, blob: str) -> Any:"
            },
            "12": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/reschedule",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def reschedule(self, task_id: Optional[UUID]) -> None:"
            },
            "13": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/_reset",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def _reset(self) -> None:"
            },
            "14": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/prune_completed_tasks",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def prune_completed_tasks(self, before: int) -> None:"
            },
            "15": {
                "relative_path": "postgrestq/task_queue.py",
                "fqn_list": "postgrestq/task_queue.py/TaskQueue/__iter__",
                "class": "postgrestq/task_queue.py.TaskQueue",
                "signature": "def __iter__(self) -> Iterator[Tuple[Optional[Dict[str, Any]], Optional[UUID]]]:"
            }
        }
    },
    "django-pony-express": {
        "generated code": "'''\nThis is the main file of the django-pony-express package.\n'''\nfrom django_pony_express.services.asynchronous.thread import ThreadEmailService\ndef main():\n    # Add your code here\n    email_service = ThreadEmailService()\n    email_service.process()\nif __name__ == \"__main__\":\n    main()\n'''\nThis file contains the base classes for handling emails.\n'''\nfrom typing import Union, Optional\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.db.models.query import QuerySet\nimport logging\nclass BaseEmailServiceFactory:\n    def __init__(self, recipient_email_list: Union[list, tuple, QuerySet] = None, **kwargs) -> None:\n        # Add your code here\n        self.recipient_email_list = recipient_email_list\n        self.errors_list = []\n    def is_valid(self, raise_exception: bool = True) -> bool:\n        # Add your code here\n        if self.recipient_email_list is None:\n            if raise_exception:\n                raise ValueError(\"Recipient email list is required\")\n            else:\n                return False\n        return True\n    def get_recipient_list(self) -> list:\n        # Add your code here\n        return list(self.recipient_email_list)\n    def get_email_from_recipient(self, recipient) -> str:\n        # Add your code here\n        return recipient.email\n    def get_context_data(self) -> dict:\n        # Add your code here\n        return {}\n    def has_errors(self) -> bool:\n        # Add your code here\n        return bool(self.errors_list)\n    def errors(self) -> list:\n        # Add your code here\n        return self.errors_list\n    def process(self, raise_exception: bool = True) -> int:\n        # Add your code here\n        if not self.is_valid(raise_exception):\n            return 0\n        recipient_list = self.get_recipient_list()\n        for recipient in recipient_list:\n            email = self.get_email_from_recipient(recipient)\n            context_data = self.get_context_data()\n            email_service = BaseEmailService(recipient_email_list=email, context_data=context_data)\n            if email_service.is_valid(raise_exception):\n                email_service.process(raise_exception)\n            else:\n                self.errors_list.extend(email_service.errors())\n        return len(recipient_list)\nclass BaseEmailService:\n    def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[list] = None, **kwargs) -> None:\n        # Add your code here\n        self.recipient_email_list = recipient_email_list\n        self.context_data = context_data\n        self.attachment_list = attachment_list\n        self.errors_list = []\n    def _get_logger(self) -> logging.Logger:\n        # Add your code here\n        return logging.getLogger(__name__)\n    def get_context_data(self) -> dict:\n        # Add your code here\n        return self.context_data or {}\n    def get_subject(self) -> str:\n        # Add your code here\n        return \"\"\n    def get_from_email(self) -> str:\n        # Add your code here\n        return \"\"\n    def get_cc_emails(self) -> list:\n        # Add your code here\n        return []\n    def get_bcc_emails(self) -> list:\n        # Add your code here\n        return []\n    def get_reply_to_emails(self) -> list:\n        # Add your code here\n        return []\n    def get_translation(self) -> Union[str, None]:\n        # Add your code here\n        return None\n    def get_attachments(self) -> list:\n        # Add your code here\n        return self.attachment_list or []\n    def _add_attachments(self, msg: EmailMultiAlternatives):\n        # Add your code here\n        attachments = self.get_attachments()\n        for attachment in attachments:\n            msg.attach(*attachment)\n    def _build_mail_object(self) -> EmailMultiAlternatives:\n        # Add your code here\n        subject = self.get_subject()\n        from_email = self.get_from_email()\n        to = self.recipient_email_list\n        cc = self.get_cc_emails()\n        bcc = self.get_bcc_emails()\n        reply_to = self.get_reply_to_emails()\n        translation = self.get_translation()\n        msg = EmailMultiAlternatives(subject, translation, from_email, to, cc=cc, bcc=bcc, reply_to=reply_to)\n        self._add_attachments(msg)\n        return msg\n    def is_valid(self, raise_exception: bool = True) -> bool:\n        # Add your code here\n        if self.recipient_email_list is None:\n            if raise_exception:\n                raise ValueError(\"Recipient email list is required\")\n            else:\n                return False\n        return True\n    def has_errors(self) -> bool:\n        # Add your code here\n        return bool(self.errors_list)\n    def errors(self) -> list:\n        # Add your code here\n        return self.errors_list\n    def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:\n        # Add your code here\n        try:\n            msg.send()\n            self._get_logger().info(\"Email sent successfully\")\n            return True\n        except Exception as e:\n            self._get_logger().error(f\"Failed to send email: {str(e)}\")\n            self.errors_list.append(str(e))\n            return False\n    def process(self, raise_exception: bool = True) -> bool:\n        # Add your code here\n        if not self.is_valid(raise_exception):\n            return False\n        msg = self._build_mail_object()\n        return self._send_and_log_email(msg)\n'''\nThis file contains the ThreadEmailService class for handling emails asynchronously using threads.\n'''\nfrom django_pony_express.services.base import BaseEmailService\nimport threading\nclass ThreadEmailService(BaseEmailService):\n    def process(self, raise_exception: bool = True) -> None:\n        # Add your code here\n        thread = threading.Thread(target=self._send_email, args=(raise_exception,))\n        thread.start()\n        thread.join()\n    def _send_email(self, raise_exception: bool = True) -> None:\n        if not self.is_valid(raise_exception):\n            return\n        msg = self._build_mail_object()\n        self._send_and_log_email(msg)\n",
        "design": {
            "0": {
                "relative_path": "manage.py",
                "fqn_list": "manage.py/main",
                "class": null,
                "signature": "def main():"
            },
            "1": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/__init__",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def __init__(self, recipient_email_list: Union[list, tuple, QuerySet] = None, **kwargs) -> None:"
            },
            "2": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/is_valid",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def is_valid(self, raise_exception: bool = True) -> bool:"
            },
            "3": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_recipient_list",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def get_recipient_list(self) -> list:"
            },
            "4": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_email_from_recipient",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def get_email_from_recipient(self, recipient) -> str:"
            },
            "5": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/get_context_data",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def get_context_data(self) -> dict:"
            },
            "6": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/has_errors",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def has_errors(self) -> bool:"
            },
            "7": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/errors",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def errors(self) -> list:"
            },
            "8": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailServiceFactory/process",
                "class": "django_pony_express/services/base.py.BaseEmailServiceFactory",
                "signature": "def process(self, raise_exception: bool = True) -> int:"
            },
            "9": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/__init__",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def __init__(self, recipient_email_list: Optional[Union[list, tuple, str]] = None, context_data: Optional[dict] = None, attachment_list: Optional[list] = None, **kwargs) -> None:"
            },
            "10": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_get_logger",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def _get_logger(self) -> logging.Logger:"
            },
            "11": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_context_data",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_context_data(self) -> dict:"
            },
            "12": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_subject",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_subject(self) -> str:"
            },
            "13": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_from_email",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_from_email(self) -> str:"
            },
            "14": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_cc_emails",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_cc_emails(self) -> list:"
            },
            "15": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_bcc_emails",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_bcc_emails(self) -> list:"
            },
            "16": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_reply_to_emails",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_reply_to_emails(self) -> list:"
            },
            "17": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_translation",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_translation(self) -> Union[str, None]:"
            },
            "18": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/get_attachments",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def get_attachments(self) -> list:"
            },
            "19": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_add_attachments",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def _add_attachments(self, msg: EmailMultiAlternatives):"
            },
            "20": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_build_mail_object",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def _build_mail_object(self) -> EmailMultiAlternatives:"
            },
            "21": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/is_valid",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def is_valid(self, raise_exception: bool = True) -> bool:"
            },
            "22": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/has_errors",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def has_errors(self) -> bool:"
            },
            "23": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/errors",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def errors(self) -> list:"
            },
            "24": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/_send_and_log_email",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def _send_and_log_email(self, msg: EmailMultiAlternatives) -> bool:"
            },
            "25": {
                "relative_path": "django_pony_express/services/base.py",
                "fqn_list": "django_pony_express/services/base.py/BaseEmailService/process",
                "class": "django_pony_express/services/base.py.BaseEmailService",
                "signature": "def process(self, raise_exception: bool = True) -> bool:"
            },
            "26": {
                "relative_path": "django_pony_express/services/asynchronous/thread.py",
                "fqn_list": "django_pony_express/services/asynchronous/thread.py/ThreadEmailService/process",
                "class": "django_pony_express/services/asynchronous/thread.py.ThreadEmailService",
                "signature": "def process(self, raise_exception: bool = True) -> None:"
            }
        }
    },
    "constrainedlr": {
        "generated code": "'''\nThe `ConstrainedLinearRegression` class extends scikit-learn's `linear_model.LinearRegression` and allows users to apply constraints on the model's coefficients.\n'''\nimport numpy as np\nimport pandas as pd\nfrom typing import Optional, Union\nfrom sklearn.linear_model import LinearRegression\nclass ConstrainedLinearRegression(LinearRegression):\n    def __init__(self, fit_intercept: bool = True, alpha: float = 0.0):\n        '''\n        Initialize the ConstrainedLinearRegression model.\n        Args:\n        - fit_intercept: Whether to calculate the intercept for this model. Default is True.\n        - alpha: Regularization strength. Default is 0.0.\n        '''\n        super().__init__(fit_intercept=fit_intercept, normalize=False, copy_X=True, n_jobs=None)\n        self.alpha = alpha\n    def fit(self, X: Union[np.ndarray, pd.DataFrame], y: np.ndarray, sample_weight: Optional[np.ndarray] = None, coefficients_sign_constraints: Optional[dict] = None, coefficients_range_constraints: Optional[dict] = None, intercept_sign_constraint: Union[int, str] = 0, coefficients_sum_constraint: Optional[float] = None) -> \"ConstrainedLinearRegression\":\n        '''\n        Fit the ConstrainedLinearRegression model to the training data.\n        Args:\n        - X: Training data. Can be an array-like object or a pandas DataFrame.\n        - y: Target values. Should be a 1-dimensional array-like object.\n        - sample_weight: Individual weights for each sample. Default is None.\n        - coefficients_sign_constraints: Constraints on the signs of the coefficients. Default is None.\n        - coefficients_range_constraints: Constraints on the ranges of the coefficients. Default is None.\n        - intercept_sign_constraint: Constraint on the sign of the intercept. Default is 0.\n        - coefficients_sum_constraint: Constraint on the sum of the coefficients. Default is None.\n        Returns:\n        - self: The fitted ConstrainedLinearRegression model.\n        '''\n        # Apply constraints on the coefficients\n        if coefficients_sign_constraints:\n            for feature, sign in coefficients_sign_constraints.items():\n                if sign == \"positive\":\n                    self.coef_[feature] = np.abs(self.coef_[feature])\n                elif sign == \"negative\":\n                    self.coef_[feature] = -np.abs(self.coef_[feature])\n        if coefficients_range_constraints:\n            for feature, (lower_bound, upper_bound) in coefficients_range_constraints.items():\n                self.coef_[feature] = np.clip(self.coef_[feature], lower_bound, upper_bound)\n        # Apply constraints on the intercept\n        if isinstance(intercept_sign_constraint, int):\n            if intercept_sign_constraint == 1:\n                self.intercept_ = np.abs(self.intercept_)\n            elif intercept_sign_constraint == -1:\n                self.intercept_ = -np.abs(self.intercept_)\n        # Apply constraints on the coefficients sum\n        if coefficients_sum_constraint:\n            coef_sum = np.sum(self.coef_)\n            if coef_sum != 0:\n                self.coef_ = self.coef_ * (coefficients_sum_constraint / coef_sum)\n        # Call the fit method of the parent class\n        super().fit(X, y, sample_weight=sample_weight)\n        return self\n    def predict(self, X: Union[np.ndarray, pd.DataFrame]) -> np.ndarray:\n        '''\n        Predict target values for the given input data.\n        Args:\n        - X: Input data. Can be an array-like object or a pandas DataFrame.\n        Returns:\n        - y_pred: Predicted target values.\n        '''\n        return super().predict(X)\n    def get_feature_names_out(self) -> np.ndarray[str]:\n        '''\n        Get the feature names of the input data.\n        Returns:\n        - feature_names: Array of feature names.\n        '''\n        # Extract feature names from the input data\n        # ...\n        return feature_names\n'''\nThis file contains various validation functions used by the ConstrainedLinearRegression class.\n'''\nimport numpy as np\nimport pandas as pd\nfrom typing import Optional, Union, List, str\ndef validate_constraint_features_all_strings_or_all_int(constraints: dict) -> None:\n    '''\n    Validate that all constraint features are either all strings or all integers.\n    Args:\n    - constraints: Dictionary of constraints.\n    Returns:\n    - None\n    '''\n    # Validate constraint features\n    # ...\ndef get_clean_feature_names_from_pipeline(feature_names: List[str]) -> List[str]:\n    '''\n    Get clean feature names from the pipeline.\n    Args:\n    - feature_names: List of feature names.\n    Returns:\n    - clean_feature_names: List of clean feature names.\n    '''\n    # Clean feature names from the pipeline\n    # ...\ndef validate_feature_names_in_constraints(constraints: dict, feature_names: List[str]) -> None:\n    '''\n    Validate that all feature names in the constraints are present in the given list of feature names.\n    Args:\n    - constraints: Dictionary of constraints.\n    - feature_names: List of feature names.\n    Returns:\n    - None\n    '''\n    # Validate feature names in constraints\n    # ...\ndef convert_feature_names_to_indices(constraints: dict, feature_names_in_: np.ndarray[str]) -> dict:\n    '''\n    Convert feature names to indices in the constraints.\n    Args:\n    - constraints: Dictionary of constraints.\n    - feature_names_in_: Array of feature names.\n    Returns:\n    - constraints: Dictionary of constraints with feature names converted to indices.\n    '''\n    # Convert feature names to indices in the constraints\n    # ...\ndef validate_coefficients_sign_constraints(coefficients_sign_constraints: Optional[dict], X: Union[np.ndarray, pd.DataFrame], feature_names_in_: Optional[np.ndarray[str]]) -> dict:\n    '''\n    Validate the coefficients sign constraints.\n    Args:\n    - coefficients_sign_constraints: Constraints on the signs of the coefficients.\n    - X: Input data. Can be an array-like object or a pandas DataFrame.\n    - feature_names_in_: Array of feature names.\n    Returns:\n    - coefficients_sign_constraints: Validated coefficients sign constraints.\n    '''\n    # Validate coefficients sign constraints\n    # ...\ndef validate_intercept_sign_constraint(intercept_sign_constraint: Union[int, str]) -> int:\n    '''\n    Validate the intercept sign constraint.\n    Args:\n    - intercept_sign_constraint: Constraint on the sign of the intercept.\n    Returns:\n    - intercept_sign_constraint: Validated intercept sign constraint.\n    '''\n    # Validate intercept sign constraint\n    # ...\ndef validate_coefficients_range_constraints(coefficients_range_constraints: Optional[dict], X: Union[np.ndarray, pd.DataFrame], feature_names_in_: Optional[np.ndarray[str]]) -> dict:\n    '''\n    Validate the coefficients range constraints.\n    Args:\n    - coefficients_range_constraints: Constraints on the ranges of the coefficients.\n    - X: Input data. Can be an array-like object or a pandas DataFrame.\n    - feature_names_in_: Array of feature names.\n    Returns:\n    - coefficients_range_constraints: Validated coefficients range constraints.\n    '''\n    # Validate coefficients range constraints\n    # ...\n",
        "design": {
            "0": {
                "relative_path": "constrainedlr/model.py",
                "fqn_list": "constrainedlr/model.py/ConstrainedLinearRegression/__init__",
                "class": "constrainedlr/model.py.ConstrainedLinearRegression",
                "signature": "def __init__(self, fit_intercept: bool = True, alpha: float = 0.0):"
            },
            "1": {
                "relative_path": "constrainedlr/model.py",
                "fqn_list": "constrainedlr/model.py/ConstrainedLinearRegression/fit",
                "class": "constrainedlr/model.py.ConstrainedLinearRegression",
                "signature": "def fit(self, X: Union[np.ndarray, pd.DataFrame], y: np.ndarray, sample_weight: Optional[np.ndarray] = None, coefficients_sign_constraints: Optional[dict] = None, coefficients_range_constraints: Optional[dict] = None, intercept_sign_constraint: Union[int, str] = 0, coefficients_sum_constraint: Optional[float] = None) -> \"ConstrainedLinearRegression\":"
            },
            "2": {
                "relative_path": "constrainedlr/model.py",
                "fqn_list": "constrainedlr/model.py/ConstrainedLinearRegression/predict",
                "class": "constrainedlr/model.py.ConstrainedLinearRegression",
                "signature": "def predict(self, X: Union[np.ndarray, pd.DataFrame]) -> np.ndarray:"
            },
            "3": {
                "relative_path": "constrainedlr/model.py",
                "fqn_list": "constrainedlr/model.py/ConstrainedLinearRegression/get_feature_names_out",
                "class": "constrainedlr/model.py.ConstrainedLinearRegression",
                "signature": "def get_feature_names_out(self) -> np.ndarray[str]:"
            },
            "4": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/validate_constraint_features_all_strings_or_all_int",
                "class": null,
                "signature": "def validate_constraint_features_all_strings_or_all_int(constraints: dict) -> None:"
            },
            "5": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/get_clean_feature_names_from_pipeline",
                "class": null,
                "signature": "def get_clean_feature_names_from_pipeline(feature_names: list[str]) -> list[str]:"
            },
            "6": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/validate_feature_names_in_constraints",
                "class": null,
                "signature": "def validate_feature_names_in_constraints(constraints: dict, feature_names: list[str]) -> None:"
            },
            "7": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/convert_feature_names_to_indices",
                "class": null,
                "signature": "def convert_feature_names_to_indices(constraints: dict, feature_names_in_: np.ndarray[str]) -> dict:"
            },
            "8": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/validate_coefficients_sign_constraints",
                "class": null,
                "signature": "def validate_coefficients_sign_constraints(coefficients_sign_constraints: Optional[dict], X: Union[np.ndarray, pd.DataFrame], feature_names_in_: Optional[np.ndarray[str]]) -> dict:"
            },
            "9": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/validate_intercept_sign_constraint",
                "class": null,
                "signature": "def validate_intercept_sign_constraint(intercept_sign_constraint: Union[int, str]) -> int:"
            },
            "10": {
                "relative_path": "constrainedlr/validation.py",
                "fqn_list": "constrainedlr/validation.py/validate_coefficients_range_constraints",
                "class": null,
                "signature": "def validate_coefficients_range_constraints(coefficients_range_constraints: Optional[dict], X: Union[np.ndarray, pd.DataFrame], feature_names_in_: Optional[np.ndarray[str]]) -> dict:"
            }
        }
    },
    "reverse_argparse": {
        "generated code": "'''\nThis file contains the implementation of the ReverseArgumentParser class, which is responsible for generating the command-line invocation that produced the parsed arguments.\n'''\nimport argparse\nfrom argparse import ArgumentParser, Namespace, Action\nfrom typing import List, Sequence\ndef quote_arg_if_necessary(arg: str) -> str:\n    '''\n    This function quotes the argument if necessary, by adding double quotes around it.\n    '''\n    if ' ' in arg:\n        return f'\"{arg}\"'\n    return arg\nclass ReverseArgumentParser:\n    '''\n    This class takes parsed arguments and generates the corresponding command-line invocation that produced them.\n    '''\n    def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):\n        '''\n        Initializes the ReverseArgumentParser object with the parser, namespace, and indent level.\n        '''\n        self.parser = parser\n        self.namespace = namespace\n        self.indent = indent\n        self.command_line_invocation = []\n    def _unparse_args(self) -> None:\n        '''\n        Unparses the arguments and generates the command-line invocation.\n        '''\n        for action in self.parser._actions:\n            self._unparse_action(action)\n    def _unparse_action(self, action: Action) -> None:\n        '''\n        Unparses a single action and adds it to the command-line invocation.\n        '''\n        if self._arg_is_default_and_help_is_suppressed(action):\n            return\n        if action.option_strings:\n            option_string = self._get_option_string(action)\n            self._append_arg(option_string)\n        if action.nargs == 0:\n            self._unparse_store_action(action)\n        elif action.nargs == 1:\n            self._unparse_store_action(action)\n        elif action.nargs == '+':\n            self._unparse_append_action(action)\n        elif action.nargs == '*':\n            self._unparse_append_action(action)\n        elif action.nargs == '?':\n            self._unparse_boolean_optional_action(action)\n        elif action.nargs is argparse.REMAINDER:\n            self._unparse_boolean_optional_action(action)\n        elif isinstance(action.nargs, int):\n            self._unparse_count_action(action)\n        elif isinstance(action.nargs, str):\n            self._unparse_sub_parsers_action(action)\n        else:\n            raise ValueError(f'Unsupported nargs value: {action.nargs}')\n    def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:\n        '''\n        Checks if the argument is default and help is suppressed.\n        '''\n        return action.default == action.dest and action.help == argparse.SUPPRESS and getattr(self.namespace, action.dest) is not None\n    def _get_effective_command_line_invocation(self) -> str:\n        '''\n        Returns the effective command-line invocation as a string.\n        '''\n        self._unparse_args()\n        return ' '.join(self.command_line_invocation)\n    def _get_pretty_command_line_invocation(self) -> str:\n        '''\n        Returns the pretty command-line invocation as a string with indentation.\n        '''\n        self._unparse_args()\n        indent_str = self._indent_str()\n        return '\\n'.join([f'{indent_str}{arg}' for arg in self.command_line_invocation])\n    def _get_long_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n        '''\n        Returns the long option strings from the given option strings.\n        '''\n        return [opt for opt in option_strings if opt.startswith('--')]\n    def _get_short_option_strings(self, option_strings: Sequence[str]) -> List[str]:\n        '''\n        Returns the short option strings from the given option strings.\n        '''\n        return [opt for opt in option_strings if opt.startswith('-') and len(opt) == 2]\n    def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:\n        '''\n        Returns the option string for the given action.\n        '''\n        option_strings = action.option_strings\n        if prefer_short:\n            short_option_strings = self._get_short_option_strings(option_strings)\n            if short_option_strings:\n                return short_option_strings[0]\n        long_option_strings = self._get_long_option_strings(option_strings)\n        if long_option_strings:\n            return long_option_strings[0]\n        return option_strings[0]\n    def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:\n        '''\n        Appends a list of list of arguments to the command-line invocation.\n        '''\n        for arg_list in args:\n            self._append_list_of_args(arg_list)\n    def _append_list_of_args(self, args: List[str]) -> None:\n        '''\n        Appends a list of arguments to the command-line invocation.\n        '''\n        for arg in args:\n            self._append_arg(arg)\n    def _append_arg(self, arg: str) -> None:\n        '''\n        Appends a single argument to the command-line invocation.\n        '''\n        self.command_line_invocation.append(quote_arg_if_necessary(arg))\n    def _indent_str(self) -> str:\n        '''\n        Returns the indentation string based on the indent level.\n        '''\n        return ' ' * self.indent\n    def _unparse_store_action(self, action: Action) -> None:\n        '''\n        Unparses a store action and adds it to the command-line invocation.\n        '''\n        value = getattr(self.namespace, action.dest)\n        if value is not None:\n            self._append_arg(str(value))\n    def _unparse_store_const_action(self, action: Action) -> None:\n        '''\n        Unparses a store const action and adds it to the command-line invocation.\n        '''\n        value = getattr(self.namespace, action.dest)\n        if value == action.const:\n            self._append_arg(self._get_option_string(action))\n    def _unparse_store_true_action(self, action: Action) -> None:\n        '''\n        Unparses a store true action and adds it to the command-line invocation.\n        '''\n        value = getattr(self.namespace, action.dest)\n        if value:\n            self._append_arg(self._get_option_string(action))\n    def _unparse_store_false_action(self, action: Action) -> None:\n        '''\n        Unparses a store false action and adds it to the command-line invocation.\n        '''\n        value = getattr(self.namespace, action.dest)\n        if not value:\n            self._append_arg(self._get_option_string(action))\n    def _unparse_append_action(self, action: Action) -> None:\n        '''\n        Unparses an append action and adds it to the command-line invocation.\n        '''\n        values = getattr(self.namespace, action.dest)\n        if values:\n            self._append_list_of_args(values)\n    def _unparse_append_const_action(self, action: Action) -> None:\n        '''\n        Unparses an append const action and adds it to the command-line invocation.\n        '''\n        values = getattr(self.namespace, action.dest)\n        if action.const in values:\n            self._append_list_of_args(values)\n    def _unparse_count_action(self, action: Action) -> None:\n        '''\n        Unparses a count action and adds it to the command-line invocation.\n        '''\n        count = getattr(self.namespace, action.dest)\n        if count > 0:\n            self._append_list_of_args([self._get_option_string(action)] * count)\n    def _unparse_sub_parsers_action(self, action: Action) -> None:\n        '''\n        Unparses a sub-parsers action and adds it to the command-line invocation.\n        '''\n        sub_parser = getattr(self.namespace, action.dest)\n        if sub_parser:\n            self._append_arg(sub_parser.prog)\n    def _unparse_extend_action(self, action: Action) -> None:\n        '''\n        Unparses an extend action and adds it to the command-line invocation.\n        '''\n        values = getattr(self.namespace, action.dest)\n        if values:\n            self._append_list_of_list_of_args(values)\n    def _unparse_boolean_optional_action(self, action: Action) -> None:\n        '''\n        Unparses a boolean optional action and adds it to the command-line invocation.\n        '''\n        value = getattr(self.namespace, action.dest)\n        if value:\n            self._append_arg(self._get_option_string(action))\n    def get_effective_command_line_invocation(self) -> str:\n        '''\n        Returns the effective command-line invocation as a string.\n        '''\n        return self._get_effective_command_line_invocation()\n    def get_pretty_command_line_invocation(self) -> str:\n        '''\n        Returns the pretty command-line invocation as a string with indentation.\n        '''\n        return self._get_pretty_command_line_invocation()\n",
        "design": {
            "0": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/__init__",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def __init__(self, parser: ArgumentParser, namespace: Namespace, indent: int = 4):"
            },
            "1": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_args",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_args(self) -> None:"
            },
            "2": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_action(self, action: Action) -> None:"
            },
            "3": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_arg_is_default_and_help_is_suppressed",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _arg_is_default_and_help_is_suppressed(self, action: Action) -> bool:"
            },
            "4": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_effective_command_line_invocation",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def get_effective_command_line_invocation(self) -> str:"
            },
            "5": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/get_pretty_command_line_invocation",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def get_pretty_command_line_invocation(self) -> str:"
            },
            "6": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_long_option_strings",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _get_long_option_strings(self, option_strings: Sequence[str]) -> List[str]:"
            },
            "7": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_short_option_strings",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _get_short_option_strings(self, option_strings: Sequence[str]) -> List[str]:"
            },
            "8": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_get_option_string",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _get_option_string(self, action: Action, prefer_short: bool = False) -> str:"
            },
            "9": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_list_of_args",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _append_list_of_list_of_args(self, args: List[List[str]]) -> None:"
            },
            "10": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_list_of_args",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _append_list_of_args(self, args: List[str]) -> None:"
            },
            "11": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_append_arg",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _append_arg(self, arg: str) -> None:"
            },
            "12": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_indent_str",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _indent_str(self) -> str:"
            },
            "13": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_store_action(self, action: Action) -> None:"
            },
            "14": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_const_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_store_const_action(self, action: Action) -> None:"
            },
            "15": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_true_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_store_true_action(self, action: Action) -> None:"
            },
            "16": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_store_false_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_store_false_action(self, action: Action) -> None:"
            },
            "17": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_append_action(self, action: Action) -> None:"
            },
            "18": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_append_const_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_append_const_action(self, action: Action) -> None:"
            },
            "19": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_count_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_count_action(self, action: Action) -> None:"
            },
            "20": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_sub_parsers_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_sub_parsers_action(self, action: Action) -> None:"
            },
            "21": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_extend_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_extend_action(self, action: Action) -> None:"
            },
            "22": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/ReverseArgumentParser/_unparse_boolean_optional_action",
                "class": "reverse_argparse/reverse_argparse.py.ReverseArgumentParser",
                "signature": "def _unparse_boolean_optional_action(self, action: Action) -> None:"
            },
            "23": {
                "relative_path": "reverse_argparse/reverse_argparse.py",
                "fqn_list": "reverse_argparse/reverse_argparse.py/quote_arg_if_necessary",
                "class": null,
                "signature": "def quote_arg_if_necessary(arg: str) -> str:"
            }
        }
    },
    "alembic-postgresql-enum": {
        "generated code": "'''\nThis module provides classes for representing column types and table references.\n'''\nclass ColumnType:\n    '''\n    A class representing a column type.\n    '''\n    def __init__(self, name):\n        '''\n        Initializes the ColumnType object.\n        '''\n        self.name = name\n    def __repr__(self):\n        '''\n        Returns a string representation of the object.\n        '''\n        return f\"ColumnType({self.name})\"\nclass TableReference:\n    '''\n    A class representing a table reference.\n    '''\n    def __init__(self, schema, table_name):\n        '''\n        Initializes the TableReference object.\n        '''\n        self.schema = schema\n        self.table_name = table_name\n    def __repr__(self):\n        '''\n        Returns a string representation of the object.\n        '''\n        return f\"TableReference({self.schema}, {self.table_name})\"\n    def is_column_type_import_needed(self):\n        '''\n        Checks if the column type import is needed.\n        '''\n        return True\n    def table_name_with_schema(self):\n        '''\n        Returns the table name with schema.\n        '''\n        return f\"{self.schema}.{self.table_name}\"\n'''\nThis is the main file that serves as the entry point for the application.\n'''\nimport tkinter as tk\nfrom tkinter import messagebox\nfrom alembic_postgresql_enum.connection import get_connection\nfrom alembic_postgresql_enum.compare_dispatch import compare_enums\nfrom alembic_postgresql_enum.add_create_type_false import add_create_type_false\nfrom alembic_postgresql_enum.add_postgres_using_to_text import add_postgres_using_to_text\nfrom alembic_postgresql_enum.sql_commands.enum_type import (\n    cast_old_array_enum_type_to_new,\n    cast_old_enum_type_to_new,\n    drop_type,\n    rename_type,\n    create_type,\n    get_all_enums\n)\nfrom alembic_postgresql_enum.sql_commands.column_default import (\n    get_column_default,\n    drop_default,\n    set_default,\n    rename_default_if_required\n)\nfrom alembic_postgresql_enum.sql_commands.comparison_operators import (\n    _create_comparison_operator,\n    create_comparison_operators,\n    _drop_comparison_operator,\n    drop_comparison_operators\n)\nfrom alembic_postgresql_enum.get_enum_data.types import ColumnType, TableReference\nfrom alembic_postgresql_enum.get_enum_data.defined_enums import _remove_schema_prefix, get_defined_enums\nfrom alembic_postgresql_enum.get_enum_data.declared_enums import get_enum_values, column_type_is_enum, get_declared_enums\nfrom alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import (\n    _get_default_from_add_column_op,\n    _get_default_from_alter_column_op,\n    _get_default_from_column,\n    get_just_added_defaults\n)\nfrom alembic_postgresql_enum.detection_of_changes.enum_creation import create_new_enums\nfrom alembic_postgresql_enum.detection_of_changes.enum_alteration import sync_changed_enums\nfrom alembic_postgresql_enum.detection_of_changes.enum_deletion import drop_unused_enums\nfrom alembic_postgresql_enum.operations.sync_enum_values import (\n    SyncEnumValuesOp,\n    render_sync_enum_value_op\n)\nfrom alembic_postgresql_enum.operations.enum_lifecycle_base import EnumLifecycleOp\nfrom alembic_postgresql_enum.operations.create_enum import CreateEnumOp, render_create_enum_op\nfrom alembic_postgresql_enum.operations.drop_enum import DropEnumOp, render_drop_enum_op\n# Create the main application window\nwindow = tk.Tk()\nwindow.title(\"Alembic PostgreSQL Enum Tool\")\n# Add GUI elements and functionality here\n# Start the main event loop\nwindow.mainloop()\n'''\nThis module provides functions for retrieving defined enums from the database.\n'''\nfrom typing import List, Dict\nfrom sqlalchemy import MetaData, Table, Column\nfrom alembic_postgresql_enum.get_enum_data.types import ColumnType\nfrom alembic_postgresql_enum.get_enum_data.defined_enums import _remove_schema_prefix\ndef get_defined_enums(metadata: MetaData, schema: str) -> Dict[str, List[str]]:\n    '''\n    Retrieves defined enums from the database.\n    '''\n    defined_enums = {}\n    for table in metadata.tables.values():\n        for column in table.columns:\n            if column_type_is_enum(column.type):\n                enum_name = _remove_schema_prefix(column.type.name, schema)\n                if enum_name not in defined_enums:\n                    defined_enums[enum_name] = get_enum_values(column.type)\n    return defined_enums\ndef column_type_is_enum(column_type: ColumnType) -> bool:\n    '''\n    Checks if a column type is an enum type.\n    '''\n    return isinstance(column_type, ColumnType)\ndef get_enum_values(enum_type: ColumnType) -> List[str]:\n    '''\n    Retrieves the values of an enum type.\n    '''\n    return enum_type.enum_values\n'''\nThis module provides classes and functions for synchronizing enum values during database migrations.\n'''\nfrom alembic_postgresql_enum import AutogenContext, ops\nfrom typing import List, Tuple\nfrom alembic_postgresql_enum.get_enum_data.types import TableReference\nfrom alembic_postgresql_enum.get_enum_data.declared_enums import get_enum_values\nfrom alembic_postgresql_enum.sql_commands.enum_type import cast_old_enum_type_to_new\nfrom alembic_postgresql_enum.sql_commands.column_default import get_column_default, set_default, drop_default, rename_default_if_required\nfrom alembic_postgresql_enum.sql_commands.comparison_operators import create_comparison_operators, drop_comparison_operators\nfrom alembic_postgresql_enum.sql_commands.enum_type import create_type, drop_type, rename_type, get_all_enums\nfrom alembic_postgresql_enum.sql_commands.enum_type import cast_old_array_enum_type_to_new\nfrom alembic_postgresql_enum.get_enum_data.defined_enums import get_defined_enums\nfrom alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import get_just_added_defaults\nfrom alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import _get_default_from_column, _get_default_from_alter_column_op, _get_default_from_add_column_op\nfrom alembic_postgresql_enum.detection_of_changes.enum_creation import create_new_enums\nfrom alembic_postgresql_enum.detection_of_changes.enum_alteration import sync_changed_enums\nfrom alembic_postgresql_enum.detection_of_changes.enum_deletion import drop_unused_enums\nfrom alembic_postgresql_enum.operations.enum_lifecycle_base import EnumLifecycleOp\nfrom alembic_postgresql_enum.operations.create_enum import CreateEnumOp, render_create_enum_op\nfrom alembic_postgresql_enum.operations.drop_enum import DropEnumOp, render_drop_enum_op\nclass SyncEnumValuesOp:\n    '''\n    A class representing an operation to synchronize enum values.\n    '''\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        '''\n        Initializes the SyncEnumValuesOp object.\n        '''\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n    def reverse(self):\n        '''\n        Reverses the operation.\n        '''\n        return SyncEnumValuesOp(self.schema, self.name, self.new_values, self.old_values, self.affected_columns)\n    @classmethod\n    def _set_enum_values(cls, connection: \"Connection\", enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[TableReference], enum_values_to_rename: List[Tuple[str, str]]):\n        '''\n        Sets the enum values in the database.\n        '''\n        cast_old_enum_type_to_new(connection, TableReference(enum_schema, enum_name), enum_name, enum_values_to_rename)\n        for column in affected_columns:\n            column_default = get_column_default(connection, column.schema, column.table_name, column.column_name)\n            if column_default is not None:\n                default_value = _get_default_from_column(column_default, enum_schema)\n                if default_value is not None:\n                    set_default(connection, column.table_name_with_schema(), column.column_name, default_value)\n        create_comparison_operators(connection, enum_schema, enum_name, enum_name, enum_values_to_rename)\n    @classmethod\n    def sync_enum_values(cls, operations, enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[Tuple[str, str]], enum_values_to_rename: Iterable[Tuple[str, str]] = tuple()):\n        '''\n        Synchronizes enum values in the database.\n        '''\n        for op in operations:\n            if isinstance(op, ops.AddEnumValueOp):\n                if op.enum_name == enum_name:\n                    new_values.append(op.new_value)\n            elif isinstance(op, ops.DropEnumValueOp):\n                if op.enum_name == enum_name:\n                    new_values.remove(op.drop_value)\n        old_values = get_enum_values(enum_name)\n        sync_op = SyncEnumValuesOp(enum_schema, enum_name, old_values, new_values, affected_columns)\n        sync_op._set_enum_values(connection, enum_schema, enum_name, new_values, affected_columns, enum_values_to_rename)\n        return sync_op\n    def to_diff_tuple(self) -> Tuple[Any, ...]:\n        '''\n        Returns a tuple representation of the operation.\n        '''\n        return (self.schema, self.name, self.old_values, self.new_values, self.affected_columns)\n    def is_column_type_import_needed(self) -> bool:\n        '''\n        Checks if the column type import is needed.\n        '''\n        return any(column.is_column_type_import_needed() for column in self.affected_columns)\ndef render_sync_enum_value_op(autogen_context: AutogenContext, op: SyncEnumValuesOp):\n    '''\n    Renders the sync_enum_value operation.\n    '''\n    autogen_context.imports.add(\"alembic_postgresql_enum.operations.sync_enum_values.SyncEnumValuesOp\")\n    autogen_context.imports.add(\"alembic_postgresql_enum.operations.sync_enum_values.render_sync_enum_value_op\")\n    return render_sync_enum_value_op(autogen_context, op)\n'''\nThis module provides functions for establishing a connection to the database.\n'''\nfrom typing import Iterator\nimport sqlalchemy.engine\ndef get_connection(operations) -> Iterator[sqlalchemy.engine.Connection]:\n    '''\n    Returns a connection to the database.\n    '''\n    # Establish a connection to the database\n    connection = sqlalchemy.create_engine('postgresql://username:password@localhost:5432/database').connect()\n    yield connection\n    # Close the connection\n    connection.close()\n'''\nThis module provides functions for comparing enums during database migrations.\n'''\nfrom alembic_postgresql_enum import AutogenContext, UpgradeOps\nfrom typing import Iterable, Union\ndef compare_enums(autogen_context: AutogenContext, upgrade_ops: UpgradeOps, schema_names: Iterable[Union[str, None]]):\n    '''\n    Compares enums during database migrations.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for executing SQL commands related to enum types.\n'''\nfrom alembic_postgresql_enum import Connection, TableReference\nfrom typing import List, Tuple\ndef cast_old_array_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    '''\n    Casts the old array enum type to the new type.\n    '''\n    # Implementation details here\n    pass\ndef cast_old_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    '''\n    Casts the old enum type to the new type.\n    '''\n    # Implementation details here\n    pass\ndef drop_type(connection: \"Connection\", schema: str, type_name: str):\n    '''\n    Drops an enum type from the database.\n    '''\n    # Implementation details here\n    pass\ndef rename_type(connection: \"Connection\", schema: str, type_name: str, new_type_name: str):\n    '''\n    Renames an enum type in the database.\n    '''\n    # Implementation details here\n    pass\ndef create_type(connection: \"Connection\", schema: str, type_name: str, enum_values: List[str]):\n    '''\n    Creates a new enum type in the database.\n    '''\n    # Implementation details here\n    pass\ndef get_all_enums(connection: \"Connection\", schema: str):\n    '''\n    Retrieves all enum types from the database.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for retrieving declared enums from the database.\n'''\nfrom sqlalchemy import Enum\nfrom typing import Tuple\ndef get_enum_values(enum_type: Enum) -> Tuple[str, ...]:\n    '''\n    Retrieves the values of an enum type.\n    '''\n    # Implementation details here\n    pass\ndef column_type_is_enum(column_type: Any) -> bool:\n    '''\n    Checks if a column type is an enum type.\n    '''\n    # Implementation details here\n    pass\ndef get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection: \"Connection\", upgrade_ops: Optional[UpgradeOps] = None) -> DeclaredEnumValues:\n    '''\n    Retrieves declared enums from the database.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for adding the create_type=False flag to Alembic upgrade operations.\n'''\nfrom alembic_postgresql_enum import UpgradeOps\nfrom sqlalchemy.sql.schema import Column\nclass ReprWorkaround:\n    '''\n    A workaround class for handling the __repr__ method.\n    '''\n    def __repr__(self):\n        '''\n        Returns a string representation of the object.\n        '''\n        return \"ReprWorkaround()\"\ndef get_replacement_type(column_type):\n    '''\n    Returns the replacement type for a column.\n    '''\n    return column_type\ndef inject_repr_into_enums(column: Column):\n    '''\n    Injects the __repr__ method into enums.\n    '''\n    column.type.__class__.__repr__ = ReprWorkaround.__repr__\ndef add_create_type_false(upgrade_ops: UpgradeOps):\n    '''\n    Adds the create_type=False flag to upgrade operations.\n    '''\n    for op in upgrade_ops.ops:\n        if isinstance(op, ops.CreateTableOp):\n            for column in op.columns:\n                inject_repr_into_enums(column)\n'''\nThis module provides a base class for enum lifecycle operations.\n'''\nclass EnumLifecycleOp:\n    '''\n    A base class for enum lifecycle operations.\n    '''\n    def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n        '''\n        Initializes the EnumLifecycleOp object.\n        '''\n        # Implementation details here\n        pass\n    def operation_name(self) -> str:\n        '''\n        Returns the name of the operation.\n        '''\n        # Implementation details here\n        pass\n    def to_diff_tuple(self) -> Tuple[Any, ...]:\n        '''\n        Returns a tuple representation of the operation.\n        '''\n        # Implementation details here\n        pass\n'''\nThis module provides functions for detecting and creating new enums during database migrations.\n'''\nfrom alembic_postgresql_enum import EnumNamesToValues, UpgradeOps\ndef create_new_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    '''\n    Creates new enums during database migrations.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for detecting and synchronizing changes in enums during database migrations.\n'''\nfrom alembic_postgresql_enum import EnumNamesToValues, EnumNamesToTableReferences, UpgradeOps\ndef sync_changed_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, table_references: EnumNamesToTableReferences, schema: str, upgrade_ops: UpgradeOps):\n    '''\n    Synchronizes changes in enums during database migrations.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides a class for creating enum operations.\n'''\nclass CreateEnumOp:\n    '''\n    A class representing a create enum operation.\n    '''\n    def reverse(self):\n        '''\n        Reverses the operation.\n        '''\n        # Implementation details here\n        pass\ndef render_create_enum_op(autogen_context: AutogenContext, op: CreateEnumOp):\n    '''\n    Renders the create_enum operation.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for executing SQL commands related to column defaults.\n'''\nfrom alembic_postgresql_enum import Connection\nfrom typing import Union\ndef get_column_default(connection: \"Connection\", table_schema: str, table_name: str, column_name: str) -> Union[str, None]:\n    '''\n    Retrieves the default value of a column.\n    '''\n    pass\ndef drop_default(connection: \"Connection\", table_name_with_schema: str, column_name: str):\n    '''\n    Drops the default value of a column.\n    '''\n    pass\ndef set_default(connection: \"Connection\", table_name_with_schema: str, column_name: str, default_value: str):\n    '''\n    Sets the default value of a column.\n    '''\n    pass\ndef rename_default_if_required(schema: str, default_value: str, enum_name: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    '''\n    Renames the default value if required.\n    '''\n    pass\ndef _replace_strings_in_quotes(old_default: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:\n    '''\n    Replaces strings in quotes in the default value.\n    '''\n    pass\n'''\nThis module provides a class for dropping enum operations.\n'''\nclass DropEnumOp:\n    '''\n    A class representing a drop enum operation.\n    '''\n    def reverse(self):\n        '''\n        Reverses the operation.\n        '''\n        # Implementation details here\n        pass\ndef render_drop_enum_op(autogen_context: AutogenContext, op: DropEnumOp):\n    '''\n    Renders the drop_enum operation.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for retrieving default values from Alembic operations.\n'''\nfrom alembic_postgresql_enum import AddColumnOp, AlterColumnOp\nfrom typing import Tuple\ndef _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    '''\n    Retrieves the default value from an AddColumnOp operation.\n    '''\n    # Implementation details here\n    pass\ndef _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    '''\n    Retrieves the default value from an AlterColumnOp operation.\n    '''\n    # Implementation details here\n    pass\ndef _get_default_from_column(column: Column, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:\n    '''\n    Retrieves the default value from a column.\n    '''\n    # Implementation details here\n    pass\ndef get_just_added_defaults(upgrade_ops: Optional[UpgradeOps], default_schema: str) -> Dict[ColumnLocation, Optional[str]]:\n    '''\n    Retrieves the just added default values from upgrade operations.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for adding the USING TO TEXT clause to ALTER COLUMN operations.\n'''\nfrom alembic_postgresql_enum import AutogenContext, ops\nclass PostgresUsingAlterColumnOp:\n    '''\n    A class representing a PostgreSQL ALTER COLUMN operation.\n    '''\n    def reverse(self):\n        '''\n        Reverses the operation.\n        '''\n        pass\ndef _postgres_using_alter_column(autogen_context: AutogenContext, op: ops.AlterColumnOp) -> str:\n    '''\n    Returns the SQL statement for a PostgreSQL ALTER COLUMN operation.\n    '''\n    pass\ndef add_postgres_using_to_alter_operation(op: ops.AlterColumnOp):\n    '''\n    Adds the USING TO TEXT clause to an ALTER COLUMN operation.\n    '''\n    pass\ndef add_postgres_using_to_text(upgrade_ops: UpgradeOps):\n    '''\n    Adds the USING TO TEXT clause to upgrade operations.\n    '''\n    pass\n'''\nThis module provides functions for executing SQL commands related to comparison operators.\n'''\nfrom alembic_postgresql_enum import Connection\nfrom typing import List, Tuple\ndef _create_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]], operator: str, comparison_function_name: str):\n    '''\n    Creates a comparison operator for an enum type.\n    '''\n    # Implementation details here\n    pass\ndef create_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]]):\n    '''\n    Creates comparison operators for an enum type.\n    '''\n    # Implementation details here\n    pass\ndef _drop_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, comparison_function_name: str):\n    '''\n    Drops a comparison operator for an enum type.\n    '''\n    # Implementation details here\n    pass\ndef drop_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str):\n    '''\n    Drops comparison operators for an enum type.\n    '''\n    # Implementation details here\n    pass\n'''\nThis module provides functions for detecting and dropping unused enums during database migrations.\n'''\nfrom alembic_postgresql_enum import EnumNamesToValues, UpgradeOps\ndef drop_unused_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):\n    '''\n    Drops unused enums during database migrations.\n    '''\n    # Implementation details here\n    pass\n",
        "design": {
            "0": {
                "relative_path": "alembic_postgresql_enum/connection.py",
                "fqn_list": "alembic_postgresql_enum/connection.py/get_connection",
                "class": null,
                "signature": "def get_connection(operations) -> Iterator[sqlalchemy.engine.Connection]:"
            },
            "1": {
                "relative_path": "alembic_postgresql_enum/compare_dispatch.py",
                "fqn_list": "alembic_postgresql_enum/compare_dispatch.py/compare_enums",
                "class": null,
                "signature": "def compare_enums(autogen_context: AutogenContext, upgrade_ops: UpgradeOps, schema_names: Iterable[Union[str, None]]):"
            },
            "2": {
                "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
                "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/ReprWorkaround/__repr__",
                "class": "alembic_postgresql_enum/add_create_type_false.py.ReprWorkaround",
                "signature": "def __repr__(self):"
            },
            "3": {
                "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
                "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/get_replacement_type",
                "class": null,
                "signature": "def get_replacement_type(column_type):"
            },
            "4": {
                "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
                "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/inject_repr_into_enums",
                "class": null,
                "signature": "def inject_repr_into_enums(column: Column):"
            },
            "5": {
                "relative_path": "alembic_postgresql_enum/add_create_type_false.py",
                "fqn_list": "alembic_postgresql_enum/add_create_type_false.py/add_create_type_false",
                "class": null,
                "signature": "def add_create_type_false(upgrade_ops: UpgradeOps):"
            },
            "6": {
                "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
                "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/PostgresUsingAlterColumnOp/reverse",
                "class": "alembic_postgresql_enum/add_postgres_using_to_text.py.PostgresUsingAlterColumnOp",
                "signature": "def reverse(self):"
            },
            "7": {
                "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
                "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/_postgres_using_alter_column",
                "class": null,
                "signature": "def _postgres_using_alter_column(autogen_context: AutogenContext, op: ops.AlterColumnOp) -> str:"
            },
            "8": {
                "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
                "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_alter_operation",
                "class": null,
                "signature": "def add_postgres_using_to_alter_operation(op: AlterColumnOp):"
            },
            "9": {
                "relative_path": "alembic_postgresql_enum/add_postgres_using_to_text.py",
                "fqn_list": "alembic_postgresql_enum/add_postgres_using_to_text.py/add_postgres_using_to_text",
                "class": null,
                "signature": "def add_postgres_using_to_text(upgrade_ops: UpgradeOps):"
            },
            "10": {
                "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_array_enum_type_to_new",
                "class": null,
                "signature": "def cast_old_array_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):"
            },
            "11": {
                "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_enum_type_to_new",
                "class": null,
                "signature": "def cast_old_enum_type_to_new(connection: \"Connection\", table_reference: TableReference, enum_type_name: str, enum_values_to_rename: List[Tuple[str, str]]):"
            },
            "12": {
                "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/drop_type",
                "class": null,
                "signature": "def drop_type(connection: \"Connection\", schema: str, type_name: str):"
            },
            "13": {
                "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/rename_type",
                "class": null,
                "signature": "def rename_type(connection: \"Connection\", schema: str, type_name: str, new_type_name: str):"
            },
            "14": {
                "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/create_type",
                "class": null,
                "signature": "def create_type(connection: \"Connection\", schema: str, type_name: str, enum_values: List[str]):"
            },
            "15": {
                "relative_path": "alembic_postgresql_enum/sql_commands/enum_type.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/enum_type.py/get_all_enums",
                "class": null,
                "signature": "def get_all_enums(connection: \"Connection\", schema: str):"
            },
            "16": {
                "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/get_column_default",
                "class": null,
                "signature": "def get_column_default(connection: \"Connection\", table_schema: str, table_name: str, column_name: str) -> Union[str, None]:"
            },
            "17": {
                "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/drop_default",
                "class": null,
                "signature": "def drop_default(connection: \"Connection\", table_name_with_schema: str, column_name: str):"
            },
            "18": {
                "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/set_default",
                "class": null,
                "signature": "def set_default(connection: \"Connection\", table_name_with_schema: str, column_name: str, default_value: str):"
            },
            "19": {
                "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/rename_default_if_required",
                "class": null,
                "signature": "def rename_default_if_required(schema: str, default_value: str, enum_name: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:"
            },
            "20": {
                "relative_path": "alembic_postgresql_enum/sql_commands/column_default.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/column_default.py/_replace_strings_in_quotes",
                "class": null,
                "signature": "def _replace_strings_in_quotes(old_default: str, enum_values_to_rename: List[Tuple[str, str]]) -> str:"
            },
            "21": {
                "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_create_comparison_operator",
                "class": null,
                "signature": "def _create_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]], operator: str, comparison_function_name: str):"
            },
            "22": {
                "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/create_comparison_operators",
                "class": null,
                "signature": "def create_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, enum_values_to_rename: List[Tuple[str, str]]):"
            },
            "23": {
                "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_drop_comparison_operator",
                "class": null,
                "signature": "def _drop_comparison_operator(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str, comparison_function_name: str):"
            },
            "24": {
                "relative_path": "alembic_postgresql_enum/sql_commands/comparison_operators.py",
                "fqn_list": "alembic_postgresql_enum/sql_commands/comparison_operators.py/drop_comparison_operators",
                "class": null,
                "signature": "def drop_comparison_operators(connection: \"Connection\", schema: str, enum_name: str, old_enum_name: str):"
            },
            "25": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/ColumnType/__repr__",
                "class": "alembic_postgresql_enum/get_enum_data/types.py.ColumnType",
                "signature": "def __repr__(self):"
            },
            "26": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/__repr__",
                "class": "alembic_postgresql_enum/get_enum_data/types.py.TableReference",
                "signature": "def __repr__(self):"
            },
            "27": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/is_column_type_import_needed",
                "class": "alembic_postgresql_enum/get_enum_data/types.py.TableReference",
                "signature": "def is_column_type_import_needed(self):"
            },
            "28": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/types.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/table_name_with_schema",
                "class": "alembic_postgresql_enum/get_enum_data/types.py.TableReference",
                "signature": "def table_name_with_schema(self):"
            },
            "29": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/defined_enums.py/_remove_schema_prefix",
                "class": null,
                "signature": "def _remove_schema_prefix(enum_name: str, schema: str) -> str:"
            },
            "30": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/defined_enums.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/defined_enums.py/get_defined_enums",
                "class": null,
                "signature": "def get_defined_enums(connection: \"Connection\", schema: str) -> EnumNamesToValues:"
            },
            "31": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_enum_values",
                "class": null,
                "signature": "def get_enum_values(enum_type: sqlalchemy.Enum) -> \"Tuple[str, ...]\":"
            },
            "32": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/declared_enums.py/column_type_is_enum",
                "class": null,
                "signature": "def column_type_is_enum(column_type: Any) -> bool:"
            },
            "33": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/declared_enums.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_declared_enums",
                "class": null,
                "signature": "def get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection: \"Connection\", upgrade_ops: Optional[UpgradeOps] = None) -> DeclaredEnumValues:"
            },
            "34": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_add_column_op",
                "class": null,
                "signature": "def _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:"
            },
            "35": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_alter_column_op",
                "class": null,
                "signature": "def _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:"
            },
            "36": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_column",
                "class": null,
                "signature": "def _get_default_from_column(column: Column, default_schema: str) -> Tuple[ColumnLocation, Optional[str]]:"
            },
            "37": {
                "relative_path": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py",
                "fqn_list": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/get_just_added_defaults",
                "class": null,
                "signature": "def get_just_added_defaults(upgrade_ops: Optional[UpgradeOps], default_schema: str) -> Dict[ColumnLocation, Optional[str]]:"
            },
            "38": {
                "relative_path": "alembic_postgresql_enum/detection_of_changes/enum_creation.py",
                "fqn_list": "alembic_postgresql_enum/detection_of_changes/enum_creation.py/create_new_enums",
                "class": null,
                "signature": "def create_new_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):"
            },
            "39": {
                "relative_path": "alembic_postgresql_enum/detection_of_changes/enum_alteration.py",
                "fqn_list": "alembic_postgresql_enum/detection_of_changes/enum_alteration.py/sync_changed_enums",
                "class": null,
                "signature": "def sync_changed_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, table_references: EnumNamesToTableReferences, schema: str, upgrade_ops: UpgradeOps):"
            },
            "40": {
                "relative_path": "alembic_postgresql_enum/detection_of_changes/enum_deletion.py",
                "fqn_list": "alembic_postgresql_enum/detection_of_changes/enum_deletion.py/drop_unused_enums",
                "class": null,
                "signature": "def drop_unused_enums(defined_enums: EnumNamesToValues, declared_enums: EnumNamesToValues, schema: str, upgrade_ops: UpgradeOps):"
            },
            "41": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/__init__",
                "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
                "signature": "def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):"
            },
            "42": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/reverse",
                "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
                "signature": "def reverse(self):"
            },
            "43": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/_set_enum_values",
                "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
                "signature": "def _set_enum_values(cls, connection: \"Connection\", enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[TableReference], enum_values_to_rename: List[Tuple[str, str]]):"
            },
            "44": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/sync_enum_values",
                "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
                "signature": "def sync_enum_values(cls, operations, enum_schema: str, enum_name: str, new_values: List[str], affected_columns: List[Tuple[str, str]], enum_values_to_rename: Iterable[Tuple[str, str]] = tuple()):"
            },
            "45": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/to_diff_tuple",
                "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
                "signature": "def to_diff_tuple(self) -> Tuple[Any, ...]:"
            },
            "46": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/is_column_type_import_needed",
                "class": "alembic_postgresql_enum/operations/sync_enum_values.py.SyncEnumValuesOp",
                "signature": "def is_column_type_import_needed(self) -> bool:"
            },
            "47": {
                "relative_path": "alembic_postgresql_enum/operations/sync_enum_values.py",
                "fqn_list": "alembic_postgresql_enum/operations/sync_enum_values.py/render_sync_enum_value_op",
                "class": null,
                "signature": "def render_sync_enum_value_op(autogen_context: AutogenContext, op: SyncEnumValuesOp):"
            },
            "48": {
                "relative_path": "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                "fqn_list": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/__init__",
                "class": "alembic_postgresql_enum/operations/enum_lifecycle_base.py.EnumLifecycleOp",
                "signature": "def __init__(self, schema: str, name: str, enum_values: Iterable[str]):"
            },
            "49": {
                "relative_path": "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                "fqn_list": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/operation_name",
                "class": "alembic_postgresql_enum/operations/enum_lifecycle_base.py.EnumLifecycleOp",
                "signature": "def operation_name(self) -> str:"
            },
            "50": {
                "relative_path": "alembic_postgresql_enum/operations/enum_lifecycle_base.py",
                "fqn_list": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/to_diff_tuple",
                "class": "alembic_postgresql_enum/operations/enum_lifecycle_base.py.EnumLifecycleOp",
                "signature": "def to_diff_tuple(self) -> Tuple[Any, ...]:"
            },
            "51": {
                "relative_path": "alembic_postgresql_enum/operations/create_enum.py",
                "fqn_list": "alembic_postgresql_enum/operations/create_enum.py/CreateEnumOp/reverse",
                "class": "alembic_postgresql_enum/operations/create_enum.py.CreateEnumOp",
                "signature": "def reverse(self):"
            },
            "52": {
                "relative_path": "alembic_postgresql_enum/operations/create_enum.py",
                "fqn_list": "alembic_postgresql_enum/operations/create_enum.py/render_create_enum_op",
                "class": null,
                "signature": "def render_create_enum_op(autogen_context: AutogenContext, op: CreateEnumOp):"
            },
            "53": {
                "relative_path": "alembic_postgresql_enum/operations/drop_enum.py",
                "fqn_list": "alembic_postgresql_enum/operations/drop_enum.py/DropEnumOp/reverse",
                "class": "alembic_postgresql_enum/operations/drop_enum.py.DropEnumOp",
                "signature": "def reverse(self):"
            },
            "54": {
                "relative_path": "alembic_postgresql_enum/operations/drop_enum.py",
                "fqn_list": "alembic_postgresql_enum/operations/drop_enum.py/render_drop_enum_op",
                "class": null,
                "signature": "def render_drop_enum_op(autogen_context: AutogenContext, op: DropEnumOp):"
            }
        }
    },
    "sphecerix": {
        "generated code": "'''\nThis is the main file of the Sphecerix project. It contains the code to perform the rotation of spherical harmonics using Wigner-D matrices.\n'''\nimport tkinter as tk\nfrom tkinter import filedialog\nfrom rotation import rotate_spherical_harmonic\ndef open_file():\n    file_path = filedialog.askopenfilename(filetypes=[(\"Text files\", \"*.txt\")])\n    if file_path:\n        result = rotate_spherical_harmonic(file_path)\n        # Display the result in a GUI window or save it to a file\ndef main():\n    root = tk.Tk()\n    root.title(\"Sphecerix\")\n    open_button = tk.Button(root, text=\"Open File\", command=open_file)\n    open_button.pack()\n    root.mainloop()\nif __name__ == \"__main__\":\n    main()\nThis will ensure that the `tkinter` module is imported and available for use in the code.\nOnce you have made this change, the code should be able to create the GUI window without any errors.\n</Comment>\n'''\nThis file contains the code for rotating spherical harmonics using Wigner-D matrices.\n'''\nimport numpy as np\nfrom scipy.special import sph_harm, wigner_d\ndef rotate_spherical_harmonic(file_path):\n    # Load the spherical harmonic from the file\n    # Assuming the file contains the coefficients of the spherical harmonic\n    coefficients = np.loadtxt(file_path)\n    # Perform the rotation using Wigner-D matrices\n    rotation_axis = np.array([1, 1, 1])\n    rotation_angle = np.pi\n    rotated_coefficients = np.zeros_like(coefficients)\n    for coefficient in coefficients:\n        l, m = coefficient[0], coefficient[1]\n        for l_prime in range(abs(l - 2), l + 3):\n            for m_prime in range(-l_prime, l_prime + 1):\n                wigner_d_matrix = wigner_d(l_prime, l, m_prime, m, rotation_angle)\n                index = (l_prime * (l_prime + 1)) + m_prime\n                rotated_coefficients[index] += coefficient[2] * wigner_d_matrix\n    # Return the result\n    return rotated_coefficients\n",
        "design": {
            "0": {
                "relative_path": "sphecerix/matrixplot.py",
                "fqn_list": "sphecerix/matrixplot.py/visualize_matrices",
                "class": null,
                "signature": "def visualize_matrices(symops, numcols = 3, highlight_groups = None, filename = None, figsize = (7,5), xlabelrot = 0):"
            },
            "1": {
                "relative_path": "sphecerix/matrixplot.py",
                "fqn_list": "sphecerix/matrixplot.py/plot_highlight_groups",
                "class": null,
                "signature": "def plot_highlight_groups(axh, groups, mat):"
            },
            "2": {
                "relative_path": "sphecerix/matrixplot.py",
                "fqn_list": "sphecerix/matrixplot.py/plot_matrix",
                "class": null,
                "signature": "def plot_matrix(ax, mat, bfs, title = None, xlabelrot = 0):"
            },
            "3": {
                "relative_path": "sphecerix/molecule.py",
                "fqn_list": "sphecerix/molecule.py/Molecule/__init__",
                "class": "sphecerix/molecule.py.Molecule",
                "signature": "def __init__(self, _name = 'unknown'):"
            },
            "4": {
                "relative_path": "sphecerix/molecule.py",
                "fqn_list": "sphecerix/molecule.py/Molecule/__str__",
                "class": "sphecerix/molecule.py.Molecule",
                "signature": "def __str__(self):"
            },
            "5": {
                "relative_path": "sphecerix/molecule.py",
                "fqn_list": "sphecerix/molecule.py/Molecule/add_atom",
                "class": "sphecerix/molecule.py.Molecule",
                "signature": "def add_atom(self, atom, x, y, z, unit = 'bohr'):"
            },
            "6": {
                "relative_path": "sphecerix/molecule.py",
                "fqn_list": "sphecerix/molecule.py/Molecule/build_basis",
                "class": "sphecerix/molecule.py.Molecule",
                "signature": "def build_basis(self, molset):"
            },
            "7": {
                "relative_path": "sphecerix/atomic_wave_functions.py",
                "fqn_list": "sphecerix/atomic_wave_functions.py/wffield",
                "class": null,
                "signature": "def wffield(n, l, m, d, npts):"
            },
            "8": {
                "relative_path": "sphecerix/atomic_wave_functions.py",
                "fqn_list": "sphecerix/atomic_wave_functions.py/wffield_l",
                "class": null,
                "signature": "def wffield_l(n, l, d, npts):"
            },
            "9": {
                "relative_path": "sphecerix/atomic_wave_functions.py",
                "fqn_list": "sphecerix/atomic_wave_functions.py/wfcart",
                "class": null,
                "signature": "def wfcart(n, l, m, x, y, z):"
            },
            "10": {
                "relative_path": "sphecerix/atomic_wave_functions.py",
                "fqn_list": "sphecerix/atomic_wave_functions.py/wf",
                "class": null,
                "signature": "def wf(n, l, m, r, theta, phi):"
            },
            "11": {
                "relative_path": "sphecerix/atomic_wave_functions.py",
                "fqn_list": "sphecerix/atomic_wave_functions.py/angular",
                "class": null,
                "signature": "def angular(l, m, theta, phi):"
            },
            "12": {
                "relative_path": "sphecerix/atomic_wave_functions.py",
                "fqn_list": "sphecerix/atomic_wave_functions.py/radial",
                "class": null,
                "signature": "def radial(n, l, r):"
            },
            "13": {
                "relative_path": "sphecerix/wignerd.py",
                "fqn_list": "sphecerix/wignerd.py/tesseral_wigner_D",
                "class": null,
                "signature": "def tesseral_wigner_D(l, Robj):"
            },
            "14": {
                "relative_path": "sphecerix/wignerd.py",
                "fqn_list": "sphecerix/wignerd.py/tesseral_wigner_D_mirror",
                "class": null,
                "signature": "def tesseral_wigner_D_mirror(l, normal):"
            },
            "15": {
                "relative_path": "sphecerix/wignerd.py",
                "fqn_list": "sphecerix/wignerd.py/tesseral_wigner_D_improper",
                "class": null,
                "signature": "def tesseral_wigner_D_improper(l, Robj):"
            },
            "16": {
                "relative_path": "sphecerix/wignerd.py",
                "fqn_list": "sphecerix/wignerd.py/wigner_D",
                "class": null,
                "signature": "def wigner_D(l, Robj):"
            },
            "17": {
                "relative_path": "sphecerix/wignerd.py",
                "fqn_list": "sphecerix/wignerd.py/wigner_d",
                "class": null,
                "signature": "def wigner_d(l, beta):"
            },
            "18": {
                "relative_path": "sphecerix/wignerd.py",
                "fqn_list": "sphecerix/wignerd.py/wigner_d_element_euler_angles",
                "class": null,
                "signature": "def wigner_d_element_euler_angles(l, m1, m2, beta):"
            },
            "19": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/SymmetryOperations/__init__",
                "class": "sphecerix/symmetry_operations.py.SymmetryOperations",
                "signature": "def __init__(self, mol):"
            },
            "20": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/SymmetryOperations/add",
                "class": "sphecerix/symmetry_operations.py.SymmetryOperations",
                "signature": "def add(self, name, label = None, vec = None, angle = None):"
            },
            "21": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/SymmetryOperations/run",
                "class": "sphecerix/symmetry_operations.py.SymmetryOperations",
                "signature": "def run(self):"
            },
            "22": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Operation/__init__",
                "class": "sphecerix/symmetry_operations.py.Operation",
                "signature": "def __init__(self, name):"
            },
            "23": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Operation/set_atomic_id",
                "class": "sphecerix/symmetry_operations.py.Operation",
                "signature": "def set_atomic_id(self, idx):"
            },
            "24": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Identity/__init__",
                "class": "sphecerix/symmetry_operations.py.Identity",
                "signature": "def __init__(self):"
            },
            "25": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Identity/get_matrix",
                "class": "sphecerix/symmetry_operations.py.Identity",
                "signature": "def get_matrix(self):"
            },
            "26": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Identity/get_wigner_matrix",
                "class": "sphecerix/symmetry_operations.py.Identity",
                "signature": "def get_wigner_matrix(self, l):"
            },
            "27": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Inversion/__init__",
                "class": "sphecerix/symmetry_operations.py.Inversion",
                "signature": "def __init__(self):"
            },
            "28": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Inversion/get_matrix",
                "class": "sphecerix/symmetry_operations.py.Inversion",
                "signature": "def get_matrix(self):"
            },
            "29": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Inversion/get_wigner_matrix",
                "class": "sphecerix/symmetry_operations.py.Inversion",
                "signature": "def get_wigner_matrix(self, l):"
            },
            "30": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Rotation/__init__",
                "class": "sphecerix/symmetry_operations.py.Rotation",
                "signature": "def __init__(self, label, axis, angle):"
            },
            "31": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Rotation/get_matrix",
                "class": "sphecerix/symmetry_operations.py.Rotation",
                "signature": "def get_matrix(self):"
            },
            "32": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Rotation/get_wigner_matrix",
                "class": "sphecerix/symmetry_operations.py.Rotation",
                "signature": "def get_wigner_matrix(self, l):"
            },
            "33": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Mirror/__init__",
                "class": "sphecerix/symmetry_operations.py.Mirror",
                "signature": "def __init__(self, label, normal):"
            },
            "34": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Mirror/get_matrix",
                "class": "sphecerix/symmetry_operations.py.Mirror",
                "signature": "def get_matrix(self):"
            },
            "35": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/Mirror/get_wigner_matrix",
                "class": "sphecerix/symmetry_operations.py.Mirror",
                "signature": "def get_wigner_matrix(self, l):"
            },
            "36": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/ImproperRotation/__init__",
                "class": "sphecerix/symmetry_operations.py.ImproperRotation",
                "signature": "def __init__(self, label, axis, angle):"
            },
            "37": {
                "relative_path": "sphecerix/symmetry_operations.py",
                "fqn_list": "sphecerix/symmetry_operations.py/ImproperRotation/get_matrix",
                "class": "sphecerix/symmetry_operations.py.ImproperRotation",
                "signature": "def get_matrix(self):"
            },
            "38": {
                "relative_path": "sphecerix/tesseral.py",
                "fqn_list": "sphecerix/tesseral.py/tesseral_transformation",
                "class": null,
                "signature": "def tesseral_transformation(l):"
            },
            "39": {
                "relative_path": "sphecerix/tesseral.py",
                "fqn_list": "sphecerix/tesseral.py/permutation_sh_car",
                "class": null,
                "signature": "def permutation_sh_car():"
            },
            "40": {
                "relative_path": "sphecerix/basis_functions.py",
                "fqn_list": "sphecerix/basis_functions.py/BasisFunction/__init__",
                "class": "sphecerix/basis_functions.py.BasisFunction",
                "signature": "def __init__(self, n, l, m):"
            },
            "41": {
                "relative_path": "sphecerix/basis_functions.py",
                "fqn_list": "sphecerix/basis_functions.py/BasisFunction/__get_name",
                "class": "sphecerix/basis_functions.py.BasisFunction",
                "signature": "def __get_name(self):"
            },
            "42": {
                "relative_path": "sphecerix/basis_functions.py",
                "fqn_list": "sphecerix/basis_functions.py/BasisFunction/__get_type",
                "class": "sphecerix/basis_functions.py.BasisFunction",
                "signature": "def __get_type(self):"
            },
            "43": {
                "relative_path": "docs/conf.py",
                "fqn_list": "docs/conf.py/setup",
                "class": null,
                "signature": "def setup(app):"
            },
            "44": {
                "relative_path": "examples/fz3_rotation.py",
                "fqn_list": "examples/fz3_rotation.py/main",
                "class": null,
                "signature": "def main():"
            },
            "45": {
                "relative_path": "examples/ethylene.py",
                "fqn_list": "examples/ethylene.py/main",
                "class": null,
                "signature": "def main():"
            },
            "46": {
                "relative_path": "examples/dz2_rotation.py",
                "fqn_list": "examples/dz2_rotation.py/main",
                "class": null,
                "signature": "def main():"
            },
            "47": {
                "relative_path": "examples/nh3.py",
                "fqn_list": "examples/nh3.py/main",
                "class": null,
                "signature": "def main():"
            }
        }
    }
}