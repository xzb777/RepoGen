{
    "implementation": [
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/run.py",
            "relative_path": "src/run.py",
            "fqn_list": "src/run.py/write_to_input",
            "class": null,
            "signature": "def write_to_input():",
            "comment": null,
            "comment_free_code": "def write_to_input():\n    return [0, 0, 0, 0, 0, 0, 0, 1]",
            "start_lineno": 9,
            "end_lineno": 10,
            "local_variables": {
                "module": [
                    "program = assemble_binary('program2.asm')",
                    "cpu = CPU(program)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/run.py",
                    "from hardware.cpu import CPU",
                    "hardware.cpu.CPU"
                ],
                [
                    "src/run.py",
                    "from assembler import assemble_binary",
                    "assembler.assemble_binary"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def write_to_input():\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/run.py",
            "relative_path": "src/run.py",
            "fqn_list": "src/run.py/read_from_output",
            "class": null,
            "signature": "def read_from_output(value):",
            "comment": null,
            "comment_free_code": "def read_from_output(value):\n    if value != [0, 0, 0, 0, 0, 0, 0, 0]:\n        print('--------------')\n        print('result:', value)\n        print('--------------')",
            "start_lineno": 11,
            "end_lineno": 15,
            "local_variables": {
                "module": [
                    "program = assemble_binary('program2.asm')",
                    "cpu = CPU(program)"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/run.py",
                    "from hardware.cpu import CPU",
                    "hardware.cpu.CPU"
                ],
                [
                    "src/run.py",
                    "from assembler import assemble_binary",
                    "assembler.assemble_binary"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def read_from_output(value):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/assembler.py",
            "relative_path": "src/assembler.py",
            "fqn_list": "src/assembler.py/get_labels",
            "class": null,
            "signature": "def get_labels(file) -> dict:",
            "comment": "Finds the positions of each label relative to the pc",
            "comment_free_code": "def get_labels(file) -> dict:\n    \n    pc = 0\n    labels = {}\n    for line in file:\n        if line.strip():\n            if pc > 63:\n                raise ValueError('Program too long, label must be within 64 lines')\n            line = line.strip()\n            if line.startswith('\n                continue\n            elif line.startswith('label'):\n                label = line.split(' ')[1]\n                if label.isdigit():\n                    raise ValueError(f'Invalid label: {label} is an int')\n                if label in labels:\n                    raise ValueError(f'Duplicate label definition: {label}')\n                labels[label] = pc\n            else:\n                pc += 1\n    return labels",
            "start_lineno": 2,
            "end_lineno": 28,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def get_labels(file) -> dict:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/assembler.py",
            "relative_path": "src/assembler.py",
            "fqn_list": "src/assembler.py/immediate_values",
            "class": null,
            "signature": "def immediate_values(line, labels):",
            "comment": "For each line determine if it is an immediate value",
            "comment_free_code": "def immediate_values(line, labels):\n    \n    line = line.split('\n    if not line:\n        return None\n    if line.startswith('label'):\n        return None\n    if line in labels:\n        value = labels[line]\n        byte_value = [int(bit) for bit in format(value, '08b')]\n        return byte_value\n    if line.isdigit():\n        value = int(line)\n        if value < 0 or value > 63:\n            raise ValueError(f'Invalid immediate value: {value}')\n        byte_value = [int(bit) for bit in format(value, '08b')]\n        return byte_value",
            "start_lineno": 31,
            "end_lineno": 54,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def immediate_values(line, labels):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/assembler.py",
            "relative_path": "src/assembler.py",
            "fqn_list": "src/assembler.py/copy_instructions",
            "class": null,
            "signature": "def copy_instructions(line):",
            "comment": "For each line determine if it is a copy instruction",
            "comment_free_code": "def copy_instructions(line):\n    \n    line = line.split('\n    if not line:\n        return None\n    if line.startswith('label'):\n        return None\n    if line.startswith('copy'):\n        cp = [1, 0]\n        parts = line.split(' ')\n        src = [int(bit) for bit in format(int(parts[1]), '03b')]\n        dst = [int(bit) for bit in format(int(parts[2]), '03b')]\n        return cp + src + dst",
            "start_lineno": 57,
            "end_lineno": 69,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def copy_instructions(line):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/assembler.py",
            "relative_path": "src/assembler.py",
            "fqn_list": "src/assembler.py/operate_instructions",
            "class": null,
            "signature": "def operate_instructions(line):",
            "comment": "For each line determine if it is an operate instruction",
            "comment_free_code": "def operate_instructions(line):\n    \n    line = line.split('\n    if not line:\n        return None\n    if line.startswith('label'):\n        return None\n    if line in ['add', 'or', 'sub', 'and']:\n        if line == 'add':\n            return [0, 1, 0, 0, 0, 0, 0, 0]\n        elif line == 'or':\n            return [0, 1, 0, 0, 0, 0, 0, 1]\n        elif line == 'sub':\n            return [0, 1, 0, 0, 0, 0, 1, 0]\n        elif line == 'and':\n            return [0, 1, 0, 0, 0, 0, 1, 1]",
            "start_lineno": 72,
            "end_lineno": 87,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def operate_instructions(line):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/assembler.py",
            "relative_path": "src/assembler.py",
            "fqn_list": "src/assembler.py/jump_instructions",
            "class": null,
            "signature": "def jump_instructions(line):",
            "comment": "For each line determine if it is a jump instruction",
            "comment_free_code": "def jump_instructions(line):\n    \n    line = line.split('\n    if not line:\n        return None\n    if line.startswith('label'):\n        return None\n    if line.startswith('eval'):\n        symbol = line.split(' ')[1]\n        if symbol == 'never':\n            value = 0\n        elif symbol == '=':\n            value = 1\n        elif symbol == '<':\n            value = 2\n        elif symbol == '<=':\n            value = 3\n        elif symbol == 'always':\n            value = 4\n        elif symbol == '!=':\n            value = 5\n        elif symbol == '>=':\n            value = 6\n        elif symbol == '>':\n            value = 7\n        else:\n            raise ValueError(f'Unknown opcode: {symbol}')\n        return [1, 1, 0, 0, 0] + [int(bit) for bit in format(value, '03b')]",
            "start_lineno": 90,
            "end_lineno": 119,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def jump_instructions(line):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/assembler.py",
            "relative_path": "src/assembler.py",
            "fqn_list": "src/assembler.py/assemble_binary",
            "class": null,
            "signature": "def assemble_binary(filename: str):",
            "comment": "takes in an assembly file and returns binary program",
            "comment_free_code": "def assemble_binary(filename: str):\n    \n    program = []\n    with open(filename, 'r') as f:\n        'start by finding all the labels'\n        labels = get_labels(f)\n        f.close()\n    with open(filename, 'r') as f:\n        for line in f:\n            a = immediate_values(line, labels)\n            b = copy_instructions(line)\n            c = operate_instructions(line)\n            d = jump_instructions(line)\n            if a:\n                program.append(a)\n            elif b:\n                program.append(b)\n            elif c:\n                program.append(c)\n            elif d:\n                program.append(d)\n        f.close()\n    return program",
            "start_lineno": 122,
            "end_lineno": 146,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                2,
                3,
                4,
                5,
                6
            ],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/assembler.py/get_labels",
                    "src/assembler.py/immediate_values",
                    "src/assembler.py/copy_instructions",
                    "src/assembler.py/operate_instructions",
                    "src/assembler.py/jump_instructions"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def assemble_binary(filename: str):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/__init__",
            "class": "src/games/maze.py.Robot",
            "signature": "def __init__(self, initial_pos = [1,1], initial_dir = 'up', delay = 0):",
            "comment": null,
            "comment_free_code": "def __init__(self, initial_pos=[1, 1], initial_dir='up', delay=0):\n    pygame.init()\n    self.window = pygame.display.set_mode((len(maze[0]) * CELL_SIZE, len(maze) * CELL_SIZE))\n    self.pos = initial_pos\n    self.dir = initial_dir\n    self.delay = delay",
            "start_lineno": 34,
            "end_lineno": 39,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, initial_pos=[1, 1], initial_dir='up', delay=0):\n    self.initial_pos = initial_pos\n    self.initial_dir = initial_dir\n    self.delay = delay\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/event_check",
            "class": "src/games/maze.py.Robot",
            "signature": "def event_check(self):",
            "comment": null,
            "comment_free_code": "def event_check(self):\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()",
            "start_lineno": 41,
            "end_lineno": 45,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def event_check(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/move_forward",
            "class": "src/games/maze.py.Robot",
            "signature": "def move_forward(self):",
            "comment": null,
            "comment_free_code": "def move_forward(self):\n    ahead = self.get_front_cell()\n    if ahead == 1:\n        return\n    elif ahead == 2:\n        pygame.quit()\n        quit()\n    if self.dir == 'up':\n        self.pos[1] -= 1\n    elif self.dir == 'right':\n        self.pos[0] += 1\n    elif self.dir == 'down':\n        self.pos[1] += 1\n    elif self.dir == 'left':\n        self.pos[0] -= 1",
            "start_lineno": 47,
            "end_lineno": 61,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                12
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "src/games/maze.py/Robot/get_front_cell"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def move_forward(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/turn_left",
            "class": "src/games/maze.py.Robot",
            "signature": "def turn_left(self):",
            "comment": null,
            "comment_free_code": "def turn_left(self):\n    self.dir = directions[(directions.index(self.dir) - 1) % 4]",
            "start_lineno": 63,
            "end_lineno": 64,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def turn_left(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/turn_right",
            "class": "src/games/maze.py.Robot",
            "signature": "def turn_right(self):",
            "comment": null,
            "comment_free_code": "def turn_right(self):\n    self.dir = directions[(directions.index(self.dir) + 1) % 4]",
            "start_lineno": 66,
            "end_lineno": 67,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def turn_right(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/move",
            "class": "src/games/maze.py.Robot",
            "signature": "def move(self, instruction):",
            "comment": "this function takes the cpu output and moves the robot accordingly",
            "comment_free_code": "def move(self, instruction):\n    \n    self.event_check()\n    if instruction == [0, 0, 0, 0, 0, 0, 1, 1]:\n        self.move_forward()\n    elif instruction == [0, 0, 0, 0, 0, 0, 0, 1]:\n        self.turn_left()\n    elif instruction == [0, 0, 0, 0, 0, 0, 1, 0]:\n        self.turn_right()\n    draw(self)",
            "start_lineno": 69,
            "end_lineno": 78,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                9,
                10,
                11,
                13,
                15
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "src/games/maze.py/Robot/event_check",
                    "src/games/maze.py/Robot/turn_left",
                    "src/games/maze.py/Robot/turn_right",
                    "src/games/maze.py/Robot/move_forward"
                ],
                "Intra-file Dependency": [
                    "src/games/maze.py/draw"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def move(self, instruction):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/get_front_cell",
            "class": "src/games/maze.py.Robot",
            "signature": "def get_front_cell(self):",
            "comment": null,
            "comment_free_code": "def get_front_cell(self):\n    if self.dir == 'up':\n        return maze[self.pos[1] - 1][self.pos[0]]\n    elif self.dir == 'right':\n        return maze[self.pos[1]][self.pos[0] + 1]\n    elif self.dir == 'down':\n        return maze[self.pos[1] + 1][self.pos[0]]\n    elif self.dir == 'left':\n        return maze[self.pos[1]][self.pos[0] - 1]",
            "start_lineno": 82,
            "end_lineno": 90,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def get_front_cell(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/Robot/get_front_cell_bit",
            "class": "src/games/maze.py.Robot",
            "signature": "def get_front_cell_bit(self):",
            "comment": "This functions reads the front cell and passes it to the cpu input",
            "comment_free_code": "def get_front_cell_bit(self):\n    \n    front = self.get_front_cell()\n    if front == 0:\n        return [0, 0, 0, 0, 0, 0, 0, 0]\n    elif front == 1:\n        return [0, 0, 0, 0, 0, 0, 0, 1]\n    elif front == 2:\n        pygame.quit()\n        sys.exit('Robot reached the end of the maze!')",
            "start_lineno": 92,
            "end_lineno": 102,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [
                12
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "src/games/maze.py/Robot/get_front_cell"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def get_front_cell_bit(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/games/maze.py",
            "relative_path": "src/games/maze.py",
            "fqn_list": "src/games/maze.py/draw",
            "class": null,
            "signature": "def draw(robot):",
            "comment": null,
            "comment_free_code": "def draw(robot):\n    window = robot.window\n    'Pass in a robot object and draw the maze and robot'\n    for y in range(len(maze)):\n        for x in range(len(maze[y])):\n            rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n            if maze[y][x] == 1:\n                pygame.draw.rect(window, BLACK, rect)\n            elif maze[y][x] == 2:\n                pygame.draw.rect(window, BLUE, rect)\n            else:\n                pygame.draw.rect(window, WHITE, rect)\n    if robot.dir == 'up' and robot.pos[1] > 0:\n        rect = pygame.Rect(robot.pos[0] * CELL_SIZE, (robot.pos[1] - 1) * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    elif robot.dir == 'right' and robot.pos[0] < len(maze[0]) - 1:\n        rect = pygame.Rect((robot.pos[0] + 1) * CELL_SIZE, robot.pos[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    elif robot.dir == 'down' and robot.pos[1] < len(maze) - 1:\n        rect = pygame.Rect(robot.pos[0] * CELL_SIZE, (robot.pos[1] + 1) * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    elif robot.dir == 'left' and robot.pos[0] > 0:\n        rect = pygame.Rect((robot.pos[0] - 1) * CELL_SIZE, robot.pos[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    pygame.draw.rect(window, GREEN, rect)\n    rect = pygame.Rect(robot.pos[0] * CELL_SIZE, robot.pos[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)\n    pygame.draw.rect(window, RED, rect)\n    pygame.display.update()\n    time.sleep(robot.delay)",
            "start_lineno": 106,
            "end_lineno": 134,
            "local_variables": {
                "module": [
                    "CELL_SIZE = 50",
                    "WHITE = (255, 255, 255)",
                    "RED = (255, 0, 0)",
                    "GREEN = (0, 255, 0)",
                    "BLACK = (0,0,0)",
                    "BLUE = (0,0,255) # speed of the animation",
                    "directions = ['up', 'right', 'down', 'left']",
                    "maze = [",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],",
                    "[1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2],",
                    "[1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],",
                    "[1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1],",
                    "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]"
                ]
            },
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/games/maze.py",
                    "import pygame",
                    "pygame"
                ],
                [
                    "src/games/maze.py",
                    "import sys",
                    "sys"
                ],
                [
                    "src/games/maze.py",
                    "import time",
                    "time"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def draw(robot):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/HalfAdder/__init__",
            "class": "src/hardware/basic_components.py.HalfAdder",
            "signature": "def __init__(self, input1: bool, input2: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: bool, input2: bool):\n    self.input1 = input1\n    self.input2 = input2",
            "start_lineno": 5,
            "end_lineno": 7,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: bool, input2: bool):\n    self.input1 = input1\n    self.input2 = input2\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/HalfAdder/sum",
            "class": "src/hardware/basic_components.py.HalfAdder",
            "signature": "def sum(self) -> bool:",
            "comment": null,
            "comment_free_code": "def sum(self) -> bool:\n    return xor(self.input1, self.input2)",
            "start_lineno": 9,
            "end_lineno": 10,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                56
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/xor"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def sum(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/HalfAdder/carry",
            "class": "src/hardware/basic_components.py.HalfAdder",
            "signature": "def carry(self) -> bool:",
            "comment": null,
            "comment_free_code": "def carry(self) -> bool:\n    return and_(self.input1, self.input2)",
            "start_lineno": 12,
            "end_lineno": 13,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/and_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def carry(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/FullAdder/__init__",
            "class": "src/hardware/basic_components.py.FullAdder",
            "signature": "def __init__(self, input1: bool, input2: bool, carry_in: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: bool, input2: bool, carry_in: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.carry_in = carry_in\n    self.half_adder1 = HalfAdder(input1, input2)\n    self.half_adder2 = HalfAdder(self.half_adder1.sum(), carry_in)",
            "start_lineno": 17,
            "end_lineno": 22,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                64,
                57
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/HalfAdder/sum"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/hardware/basic_components.py/HalfAdder"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: bool, input2: bool, carry_in: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.carry_in = carry_in\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/FullAdder/sum",
            "class": "src/hardware/basic_components.py.FullAdder",
            "signature": "def sum(self):",
            "comment": null,
            "comment_free_code": "def sum(self):\n    return self.half_adder2.sum()",
            "start_lineno": 24,
            "end_lineno": 25,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def sum(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/FullAdder/carry",
            "class": "src/hardware/basic_components.py.FullAdder",
            "signature": "def carry(self):",
            "comment": null,
            "comment_free_code": "def carry(self):\n    return or_(self.half_adder1.carry(), self.half_adder2.carry())",
            "start_lineno": 27,
            "end_lineno": 28,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                36
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/or_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def carry(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Adder/__init__",
            "class": "src/hardware/basic_components.py.Adder",
            "signature": "def __init__(self, input1: list[bool], input2: list[bool], carry_in: bool = False):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: list[bool], input2: list[bool], carry_in: bool=False):\n    if len(input1) != 8 or len(input2) != 8:\n        raise ValueError('Both inputs must be 8 bits long.')\n    self.input1 = input1\n    self.input2 = input2\n    self.full_adders = []\n    for (bit1, bit2) in zip(reversed(self.input1), reversed(self.input2)):\n        full_adder = FullAdder(bit1, bit2, carry_in)\n        self.full_adders.append(full_adder)\n        carry_in = full_adder.carry()",
            "start_lineno": 32,
            "end_lineno": 44,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                67,
                37
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/FullAdder/carry"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/hardware/basic_components.py/FullAdder"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: list[bool], input2: list[bool], carry_in: bool = False):\n    self.input1 = input1\n    self.input2 = input2\n    self.carry_in = carry_in\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Adder/sum",
            "class": "src/hardware/basic_components.py.Adder",
            "signature": "def sum(self) -> list[bool]:",
            "comment": null,
            "comment_free_code": "def sum(self) -> list[bool]:\n    return list(reversed([full_adder.sum() for full_adder in self.full_adders]))",
            "start_lineno": 46,
            "end_lineno": 48,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def sum(self) -> list[bool]:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Adder/carry_out",
            "class": "src/hardware/basic_components.py.Adder",
            "signature": "def carry_out(self) -> bool:",
            "comment": null,
            "comment_free_code": "def carry_out(self) -> bool:\n    return self.full_adders[-1].carry()",
            "start_lineno": 50,
            "end_lineno": 51,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                37
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/FullAdder/carry"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def carry_out(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/HalfSubtractor/__init__",
            "class": "src/hardware/basic_components.py.HalfSubtractor",
            "signature": "def __init__(self, input1: bool, input2: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: bool, input2: bool):\n    self.input1 = input1\n    self.input2 = input2",
            "start_lineno": 56,
            "end_lineno": 58,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: bool, input2: bool):\n    self.input1 = input1\n    self.input2 = input2\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/HalfSubtractor/diff",
            "class": "src/hardware/basic_components.py.HalfSubtractor",
            "signature": "def diff(self) -> bool:",
            "comment": null,
            "comment_free_code": "def diff(self) -> bool:\n    return xor(self.input1, self.input2)",
            "start_lineno": 60,
            "end_lineno": 61,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                56
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/xor"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def diff(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/HalfSubtractor/borrow",
            "class": "src/hardware/basic_components.py.HalfSubtractor",
            "signature": "def borrow(self) -> bool:",
            "comment": null,
            "comment_free_code": "def borrow(self) -> bool:\n    return and_(not_(self.input1), self.input2)",
            "start_lineno": 63,
            "end_lineno": 64,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                43
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/and_",
                    "src/hardware/gates.py/not_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def borrow(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/FullSubtractor/__init__",
            "class": "src/hardware/basic_components.py.FullSubtractor",
            "signature": "def __init__(self, input1: bool, input2: bool, borrow_in: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: bool, input2: bool, borrow_in: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.borrow_in = borrow_in\n    self.half_subtractor1 = HalfSubtractor(input1, input2)\n    self.half_subtractor2 = HalfSubtractor(self.half_subtractor1.diff(), borrow_in)",
            "start_lineno": 69,
            "end_lineno": 74,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                58,
                75
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/HalfSubtractor/diff"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/hardware/basic_components.py/HalfSubtractor"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: bool, input2: bool, borrow_in: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.borrow_in = borrow_in\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/FullSubtractor/diff",
            "class": "src/hardware/basic_components.py.FullSubtractor",
            "signature": "def diff(self):",
            "comment": null,
            "comment_free_code": "def diff(self):\n    return self.half_subtractor2.diff()",
            "start_lineno": 76,
            "end_lineno": 77,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def diff(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/FullSubtractor/borrow",
            "class": "src/hardware/basic_components.py.FullSubtractor",
            "signature": "def borrow(self):",
            "comment": null,
            "comment_free_code": "def borrow(self):\n    return or_(self.half_subtractor1.borrow(), self.half_subtractor2.borrow())",
            "start_lineno": 79,
            "end_lineno": 80,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                36
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/or_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def borrow(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Subtractor/__init__",
            "class": "src/hardware/basic_components.py.Subtractor",
            "signature": "def __init__(self, input1: list[bool], input2: list[bool], borrow_in: bool = False):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: list[bool], input2: list[bool], borrow_in: bool=False):\n    if len(input1) != 8 or len(input2) != 8:\n        raise ValueError('Both inputs must be 8 bits long.')\n    self.input1 = input1\n    self.input2 = [not_(x) for x in input2]\n    self.carry_in = not_(borrow_in)\n    self.adder = Adder(self.input1, self.input2, self.carry_in)",
            "start_lineno": 84,
            "end_lineno": 92,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                43,
                70
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/not_"
                ],
                "Class Dependency": [
                    "src/hardware/basic_components.py/Adder"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: list[bool], input2: list[bool], borrow_in: bool = False):\n    self.input1 = input1\n    self.input2 = input2\n    self.borrow_in = borrow_in\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Subtractor/diff",
            "class": "src/hardware/basic_components.py.Subtractor",
            "signature": "def diff(self) -> list[bool]:",
            "comment": null,
            "comment_free_code": "def diff(self) -> list[bool]:\n    return self.adder.sum()",
            "start_lineno": 94,
            "end_lineno": 95,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                19
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/Adder/sum"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def diff(self) -> list[bool]:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Subtractor/borrow_out",
            "class": "src/hardware/basic_components.py.Subtractor",
            "signature": "def borrow_out(self) -> bool:",
            "comment": null,
            "comment_free_code": "def borrow_out(self) -> bool:\n    return not self.adder.carry_out()",
            "start_lineno": 97,
            "end_lineno": 98,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                38
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/Adder/carry_out"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def borrow_out(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Mux/__init__",
            "class": "src/hardware/basic_components.py.Mux",
            "signature": "def __init__(self, input1: bool, input2: bool, sel: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: bool, input2: bool, sel: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.sel = sel",
            "start_lineno": 103,
            "end_lineno": 106,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: bool, input2: bool, sel: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.sel = sel\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Mux/output",
            "class": "src/hardware/basic_components.py.Mux",
            "signature": "def output(self) -> bool:",
            "comment": null,
            "comment_free_code": "def output(self) -> bool:\n    nand_central = nand(self.sel, self.sel)\n    nand1 = nand(self.input1, self.sel)\n    nand2 = nand(self.input2, nand_central)\n    output = nand(nand1, nand2)\n    return output",
            "start_lineno": 108,
            "end_lineno": 113,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                50
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/nand"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def output(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Mux8Bit/__init__",
            "class": "src/hardware/basic_components.py.Mux8Bit",
            "signature": "def __init__(self, input1: list[bool], input2: list[bool], sel: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: list[bool], input2: list[bool], sel: bool):\n    assert len(input1) == 8 and len(input2) == 8, 'Inputs should be 8 bits.'\n    self.input1 = input1\n    self.input2 = input2\n    self.sel = sel",
            "start_lineno": 118,
            "end_lineno": 122,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: list[bool], input2: list[bool], sel: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.sel = sel\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Mux8Bit/output",
            "class": "src/hardware/basic_components.py.Mux8Bit",
            "signature": "def output(self) -> list[bool]:",
            "comment": null,
            "comment_free_code": "def output(self) -> list[bool]:\n    output = []\n    for (bit1, bit2) in zip(self.input1, self.input2):\n        nand_central = nand(self.sel, self.sel)\n        nand1 = nand(bit1, self.sel)\n        nand2 = nand(bit2, nand_central)\n        output_bit = nand(nand1, nand2)\n        output.append(output_bit)\n    return output",
            "start_lineno": 124,
            "end_lineno": 132,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                50
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/nand"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def output(self) -> list[bool]:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/AddSub/__init__",
            "class": "src/hardware/basic_components.py.AddSub",
            "signature": "def __init__(self, input1: list[bool], input2: list[bool], operation: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: list[bool], input2: list[bool], operation: bool):\n    self.input1 = input1\n    self.input2 = [xor(x, operation) for x in input2]\n    self.operation = operation\n    self.adder = Adder(self.input1, self.input2, self.operation)",
            "start_lineno": 141,
            "end_lineno": 147,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                56,
                70
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/xor"
                ],
                "Class Dependency": [
                    "src/hardware/basic_components.py/Adder"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: list[bool], input2: list[bool], operation: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.operation = operation\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/AddSub/output",
            "class": "src/hardware/basic_components.py.AddSub",
            "signature": "def output(self) -> list[bool]:",
            "comment": null,
            "comment_free_code": "def output(self) -> list[bool]:\n    return self.adder.sum()",
            "start_lineno": 149,
            "end_lineno": 150,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                19
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/Adder/sum"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def output(self) -> list[bool]:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/AddSub/overflow",
            "class": "src/hardware/basic_components.py.AddSub",
            "signature": "def overflow(self) -> bool:",
            "comment": "used when doing addition",
            "comment_free_code": "def overflow(self) -> bool:\n    \n    return self.adder.carry_out()",
            "start_lineno": 151,
            "end_lineno": 153,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                38
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/Adder/carry_out"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def overflow(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/AddSub/borrow_out",
            "class": "src/hardware/basic_components.py.AddSub",
            "signature": "def borrow_out(self) -> bool:",
            "comment": "used when doing subtraction",
            "comment_free_code": "def borrow_out(self) -> bool:\n    \n    return not_(self.adder.carry_out())",
            "start_lineno": 154,
            "end_lineno": 156,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                43,
                38
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/basic_components.py/Adder/carry_out"
                ],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/not_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def borrow_out(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Decoder/__init__",
            "class": "src/hardware/basic_components.py.Decoder",
            "signature": "def __init__(self, input: list[bool]):",
            "comment": null,
            "comment_free_code": "def __init__(self, input: list[bool]):\n    self.input = input[:3]\n    self.output_list = [0] * 8\n    self.output_list[0] = and_(not_(self.input[0]), not_(self.input[1]), not_(self.input[2]))\n    self.output_list[1] = and_(not_(self.input[0]), not_(self.input[1]), self.input[2])\n    self.output_list[2] = and_(not_(self.input[0]), self.input[1], not_(self.input[2]))\n    self.output_list[3] = and_(not_(self.input[0]), self.input[1], self.input[2])\n    self.output_list[4] = and_(self.input[0], not_(self.input[1]), not_(self.input[2]))\n    self.output_list[5] = and_(self.input[0], not_(self.input[1]), self.input[2])\n    self.output_list[6] = and_(self.input[0], self.input[1], not_(self.input[2]))\n    self.output_list[7] = and_(self.input[0], self.input[1], self.input[2])",
            "start_lineno": 163,
            "end_lineno": 173,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                43
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/and_",
                    "src/hardware/gates.py/not_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input: list[bool]):\n    self.input = input\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Decoder/output",
            "class": "src/hardware/basic_components.py.Decoder",
            "signature": "def output(self) -> list[bool]:",
            "comment": null,
            "comment_free_code": "@property\ndef output(self) -> list[bool]:\n    return self.output_list",
            "start_lineno": 176,
            "end_lineno": 177,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def output(self) -> list[bool]:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Control/__init__",
            "class": "src/hardware/basic_components.py.Control",
            "signature": "def __init__(self, input: list[bool]):",
            "comment": null,
            "comment_free_code": "def __init__(self, input: list[bool]):\n    self.input = input[:2]\n    self.output_list = [0] * 4\n    self.output_list[0] = and_(not_(self.input[0]), not_(self.input[1]))\n    self.output_list[1] = and_(not_(self.input[0]), self.input[1])\n    self.output_list[2] = and_(self.input[0], not_(self.input[1]))\n    self.output_list[3] = and_(self.input[0], self.input[1])",
            "start_lineno": 195,
            "end_lineno": 201,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                43
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/and_",
                    "src/hardware/gates.py/not_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input: list[bool]):\n    self.input = input\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Control/output",
            "class": "src/hardware/basic_components.py.Control",
            "signature": "def output(self) -> list[bool]:",
            "comment": null,
            "comment_free_code": "@property\ndef output(self) -> list[bool]:\n    return self.output_list",
            "start_lineno": 204,
            "end_lineno": 205,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def output(self) -> list[bool]:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Comparison/__init__",
            "class": "src/hardware/basic_components.py.Comparison",
            "signature": "def __init__(self, control: list[bool], byte: list[bool]):",
            "comment": "check docs to understand design,\nbyte[0] is MSB, control[0] is MSB",
            "comment_free_code": "def __init__(self, control: list[bool], byte: list[bool]):\n    \n    self.control = control[-3:]\n    self.byte = byte\n    self.nor = nor(*byte)\n    self.switch1 = and_(self.control[1], self.byte[0])\n    self.switch2 = and_(self.control[2], self.nor)\n    self.or1 = or_(self.switch1, self.switch2)\n    self.xor = xor(self.control[0], self.or1)",
            "start_lineno": 223,
            "end_lineno": 232,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                56,
                49,
                34,
                36
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/xor",
                    "src/hardware/gates.py/nor",
                    "src/hardware/gates.py/and_",
                    "src/hardware/gates.py/or_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, control: list[bool], byte: list[bool]):\n    self.control = control\n    self.byte = byte\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/basic_components.py",
            "relative_path": "src/hardware/basic_components.py",
            "fqn_list": "src/hardware/basic_components.py/Comparison/out",
            "class": "src/hardware/basic_components.py.Comparison",
            "signature": "def out(self) -> bool:",
            "comment": null,
            "comment_free_code": "@property\ndef out(self) -> bool:\n    return self.xor",
            "start_lineno": 236,
            "end_lineno": 237,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/basic_components.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nand",
                    "gates.nand"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import nor",
                    "gates.nor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xor",
                    "gates.xor"
                ],
                [
                    "src/hardware/basic_components.py",
                    "from gates import xnor",
                    "gates.xnor"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def out(self) -> bool:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/registers.py",
            "relative_path": "src/hardware/registers.py",
            "fqn_list": "src/hardware/registers.py/Registers/__init__",
            "class": "src/hardware/registers.py.Registers",
            "signature": "def __init__(self):",
            "comment": null,
            "comment_free_code": "def __init__(self):\n    self.registers = [[0] * 8 for _ in range(6)]\n    self.save = [0] * 6\n    self.load = [0] * 6\n    self.input = [0] * 8\n    self.input_load = 0\n    self.output = [0] * 8\n    self.output_save = 0",
            "start_lineno": 5,
            "end_lineno": 13,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/registers.py",
                    "from gates import or_",
                    "gates.or_"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/registers.py",
            "relative_path": "src/hardware/registers.py",
            "fqn_list": "src/hardware/registers.py/Registers/read",
            "class": "src/hardware/registers.py.Registers",
            "signature": "def read(self):",
            "comment": null,
            "comment_free_code": "def read(self):\n    return_bytes = [0] * 8\n    for i in range(8):\n        for j in range(6):\n            if self.load[j]:\n                return_bytes[i] = or_(return_bytes[i], self.registers[j][i])\n        if self.input_load:\n            return_bytes[i] = or_(return_bytes[i], self.input[i])\n    return return_bytes",
            "start_lineno": 15,
            "end_lineno": 24,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                36
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/registers.py",
                    "from gates import or_",
                    "gates.or_"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/or_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def read(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/registers.py",
            "relative_path": "src/hardware/registers.py",
            "fqn_list": "src/hardware/registers.py/Registers/write",
            "class": "src/hardware/registers.py.Registers",
            "signature": "def write(self, data):",
            "comment": null,
            "comment_free_code": "def write(self, data):\n    for i in range(6):\n        if self.save[i]:\n            self.registers[i] = data\n    if self.output_save:\n        self.output = data",
            "start_lineno": 26,
            "end_lineno": 33,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/registers.py",
                    "from gates import or_",
                    "gates.or_"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def write(self, data):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/registers.py",
            "relative_path": "src/hardware/registers.py",
            "fqn_list": "src/hardware/registers.py/Registers/write_to_register",
            "class": "src/hardware/registers.py.Registers",
            "signature": "def write_to_register(self, register, data):",
            "comment": null,
            "comment_free_code": "def write_to_register(self, register, data):\n    if self.save[register]:\n        self.registers[register] = data",
            "start_lineno": 35,
            "end_lineno": 37,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/registers.py",
                    "from gates import or_",
                    "gates.or_"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def write_to_register(self, register, data):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/alu.py",
            "relative_path": "src/hardware/alu.py",
            "fqn_list": "src/hardware/alu.py/ALU/__init__",
            "class": "src/hardware/alu.py.ALU",
            "signature": "def __init__(self, input1: list[bool], input2: list[bool], control1: bool, control2: bool):",
            "comment": null,
            "comment_free_code": "def __init__(self, input1: list[bool], input2: list[bool], control1: bool, control2: bool):\n    if len(input1) != 8 or len(input2) != 8:\n        raise ValueError('Both inputs must be 8 bits long.')\n    self.input1 = input1\n    self.input2 = input2\n    self.control1 = control1\n    self.control2 = control2\n    add_sub = AddSub(self.input1, self.input2, self.control1)\n    add_sub_out = add_sub.output()\n    self.add_sub_overflow = add_sub.overflow()\n    self.add_sub_borrow_out = add_sub.borrow_out()\n    and_out = [and_(in1, in2) for (in1, in2) in zip(self.input1, self.input2)]\n    or_out = [or_(in1, in2) for (in1, in2) in zip(self.input1, self.input2)]\n    and_or_mux = Mux8Bit(and_out, or_out, self.control1)\n    and_or_mux_out = and_or_mux.output()\n    self.and_or_add_sub_mux = Mux8Bit(and_or_mux_out, add_sub_out, self.control2)",
            "start_lineno": 21,
            "end_lineno": 46,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                36,
                41,
                46,
                52,
                85,
                87,
                25
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/alu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import AddSub",
                    "basic_components.AddSub"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import Mux8Bit",
                    "basic_components.Mux8Bit"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/and_",
                    "src/hardware/gates.py/or_",
                    "src/hardware/basic_components.py/AddSub/overflow",
                    "src/hardware/basic_components.py/AddSub/borrow_out",
                    "src/hardware/basic_components.py/Mux8Bit/output",
                    "src/hardware/basic_components.py/AddSub/output"
                ],
                "Class Dependency": [
                    "src/hardware/basic_components.py/Mux8Bit",
                    "src/hardware/basic_components.py/AddSub"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, input1: list[bool], input2: list[bool], control1: bool, control2: bool):\n    self.input1 = input1\n    self.input2 = input2\n    self.control1 = control1\n    self.control2 = control2\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/alu.py",
            "relative_path": "src/hardware/alu.py",
            "fqn_list": "src/hardware/alu.py/ALU/out",
            "class": "src/hardware/alu.py.ALU",
            "signature": "def out(self):",
            "comment": "returns the output of the ALU",
            "comment_free_code": "@property\ndef out(self):\n    \n    return self.and_or_add_sub_mux.output()",
            "start_lineno": 49,
            "end_lineno": 51,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                52
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/alu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import AddSub",
                    "basic_components.AddSub"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import Mux8Bit",
                    "basic_components.Mux8Bit"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/basic_components.py/Mux8Bit/output"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def out(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/alu.py",
            "relative_path": "src/hardware/alu.py",
            "fqn_list": "src/hardware/alu.py/ALU/zero",
            "class": "src/hardware/alu.py.ALU",
            "signature": "def zero(self):",
            "comment": "returns True if all the output is False",
            "comment_free_code": "def zero(self):\n    \n    return not_(or_(*self.out()))",
            "start_lineno": 53,
            "end_lineno": 58,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                43,
                36,
                53
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/alu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import AddSub",
                    "basic_components.AddSub"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import Mux8Bit",
                    "basic_components.Mux8Bit"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "src/hardware/alu.py/ALU/out"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [
                    "src/hardware/gates.py/not_",
                    "src/hardware/gates.py/or_"
                ],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def zero(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/alu.py",
            "relative_path": "src/hardware/alu.py",
            "fqn_list": "src/hardware/alu.py/ALU/negative",
            "class": "src/hardware/alu.py.ALU",
            "signature": "def negative(self):",
            "comment": "returns True if the number is negative",
            "comment_free_code": "def negative(self):\n    \n    return self.out()[0]",
            "start_lineno": 60,
            "end_lineno": 62,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                53
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/alu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import AddSub",
                    "basic_components.AddSub"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import Mux8Bit",
                    "basic_components.Mux8Bit"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [
                    "src/hardware/alu.py/ALU/out"
                ],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def negative(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/alu.py",
            "relative_path": "src/hardware/alu.py",
            "fqn_list": "src/hardware/alu.py/ALU/overflow",
            "class": "src/hardware/alu.py.ALU",
            "signature": "def overflow(self):",
            "comment": "returns True if the number is overflowed when doing addition",
            "comment_free_code": "def overflow(self):\n    \n    return self.add_sub_overflow",
            "start_lineno": 64,
            "end_lineno": 66,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/alu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import AddSub",
                    "basic_components.AddSub"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import Mux8Bit",
                    "basic_components.Mux8Bit"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def overflow(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/alu.py",
            "relative_path": "src/hardware/alu.py",
            "fqn_list": "src/hardware/alu.py/ALU/carry_out",
            "class": "src/hardware/alu.py.ALU",
            "signature": "def carry_out(self):",
            "comment": "\"returns True if the number is overflowed when doing subtraction (in2 > in1)",
            "comment_free_code": "def carry_out(self):\n    \n    return self.add_sub_borrow_out",
            "start_lineno": 68,
            "end_lineno": 70,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/alu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import or_",
                    "gates.or_"
                ],
                [
                    "src/hardware/alu.py",
                    "from gates import not_",
                    "gates.not_"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import AddSub",
                    "basic_components.AddSub"
                ],
                [
                    "src/hardware/alu.py",
                    "from basic_components import Mux8Bit",
                    "basic_components.Mux8Bit"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def carry_out(self):\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/and_",
            "class": null,
            "signature": "def and_(*args) -> int:",
            "comment": null,
            "comment_free_code": "def and_(*args: bool) -> int:\n    return int(all(args))",
            "start_lineno": 2,
            "end_lineno": 3,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def and_(*args) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/or_",
            "class": null,
            "signature": "def or_(*args) -> int:",
            "comment": null,
            "comment_free_code": "def or_(*args: bool) -> int:\n    return int(any(args))",
            "start_lineno": 6,
            "end_lineno": 7,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def or_(*args) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/not_",
            "class": null,
            "signature": "def not_(*args) -> int:",
            "comment": null,
            "comment_free_code": "def not_(*args: bool) -> int:\n    return int(not all(args))",
            "start_lineno": 9,
            "end_lineno": 10,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def not_(*args) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/nor",
            "class": null,
            "signature": "def nor(*args) -> int:",
            "comment": null,
            "comment_free_code": "def nor(*args: bool) -> int:\n    return int(not_(or_(*args)))",
            "start_lineno": 12,
            "end_lineno": 13,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                43,
                36
            ],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/gates.py/not_",
                    "src/hardware/gates.py/or_"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def nor(*args) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/nand",
            "class": null,
            "signature": "def nand(*args) -> int:",
            "comment": null,
            "comment_free_code": "def nand(*args: bool) -> int:\n    return int(not_(and_(*args)))",
            "start_lineno": 15,
            "end_lineno": 16,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                34,
                43
            ],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/gates.py/and_",
                    "src/hardware/gates.py/not_"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def nand(*args) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/xor",
            "class": null,
            "signature": "def xor(a: bool, b: bool) -> int:",
            "comment": null,
            "comment_free_code": "def xor(a: bool, b: bool) -> int:\n    return int(a ^ b)",
            "start_lineno": 18,
            "end_lineno": 19,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def xor(a: bool, b: bool) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/gates.py",
            "relative_path": "src/hardware/gates.py",
            "fqn_list": "src/hardware/gates.py/xnor",
            "class": null,
            "signature": "def xnor(a: bool, b: bool) -> int:",
            "comment": null,
            "comment_free_code": "def xnor(a: bool, b: bool) -> int:\n    return int(not xor(a, b))",
            "start_lineno": 21,
            "end_lineno": 22,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                56
            ],
            "local_import": [],
            "third_import": [],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [
                    "src/hardware/gates.py/xor"
                ],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def xnor(a: bool, b: bool) -> int:\n    pass\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/cpu.py",
            "relative_path": "src/hardware/cpu.py",
            "fqn_list": "src/hardware/cpu.py/CPU/__init__",
            "class": "src/hardware/cpu.py.CPU",
            "signature": "def __init__(self, program, verbose = True):",
            "comment": null,
            "comment_free_code": "def __init__(self, program, verbose=True):\n    self.registers = Registers()\n    self.program = program\n    self.pc = 0\n    self.verbose = verbose",
            "start_lineno": 119,
            "end_lineno": 123,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                94
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/cpu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Decoder",
                    "basic_components.Decoder"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Control",
                    "basic_components.Control"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Comparison",
                    "basic_components.Comparison"
                ],
                [
                    "src/hardware/cpu.py",
                    "from alu import ALU",
                    "alu.ALU"
                ],
                [
                    "src/hardware/cpu.py",
                    "from registers import Registers",
                    "registers.Registers"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/hardware/registers.py/Registers"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, program, verbose=True):\n    self.program = program\n    self.verbose = verbose\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/cpu.py",
            "relative_path": "src/hardware/cpu.py",
            "fqn_list": "src/hardware/cpu.py/CPU/run",
            "class": "src/hardware/cpu.py.CPU",
            "signature": "def run(self, write_to_input: callable = None, read_from_output: callable = None):",
            "comment": "You can pass in a function to write to input and read from output.\nRead from output must take an argument that will be the cpu's output",
            "comment_free_code": "def run(self, write_to_input: callable=None, read_from_output: callable=None):\n    \n    while self.pc < len(self.program):\n        self.registers.input = [0] * 8\n        self.registers.output = [0] * 8\n        self.pc += 1\n        if write_to_input:\n            self.registers.input = write_to_input()\n        self.Cycle(self, self.program[self.pc - 1])\n        if read_from_output:\n            read_from_output(self.registers.output)\n        print()\n        print('pc:', self.pc)",
            "start_lineno": 126,
            "end_lineno": 145,
            "local_variables": {},
            "Type": "FunctionDef",
            "Dependencies": [
                101
            ],
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/cpu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Decoder",
                    "basic_components.Decoder"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Control",
                    "basic_components.Control"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Comparison",
                    "basic_components.Comparison"
                ],
                [
                    "src/hardware/cpu.py",
                    "from alu import ALU",
                    "alu.ALU"
                ],
                [
                    "src/hardware/cpu.py",
                    "from registers import Registers",
                    "registers.Registers"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": [
                    "src/hardware/cpu.py/CPU/Cycle"
                ]
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def run(self, write_to_input=None, read_from_output=None):\n    for instruction in self.program:\n        cycle = Cycle(self, instruction)\n        cycle.execute()\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/cpu.py",
            "relative_path": "src/hardware/cpu.py",
            "fqn_list": "src/hardware/cpu.py/Cycle/__init__",
            "class": "src/hardware/cpu.py.Cycle",
            "signature": "def __init__(self, cpu, program_instruction_byte):",
            "comment": null,
            "comment_free_code": "def __init__(self, cpu, program_instruction_byte):\n    self.cpu = cpu\n    self.program_instruction_byte = program_instruction_byte\n    self.control = Control(self.program_instruction_byte)\n    self.decoder1 = Decoder(self.program_instruction_byte[2:5])\n    self.decoder2 = Decoder(self.program_instruction_byte[5:8])\n    self.execute()",
            "start_lineno": 47,
            "end_lineno": 54,
            "local_variables": {},
            "Type": null,
            "Dependencies": null,
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/cpu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Decoder",
                    "basic_components.Decoder"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Control",
                    "basic_components.Control"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Comparison",
                    "basic_components.Comparison"
                ],
                [
                    "src/hardware/cpu.py",
                    "from alu import ALU",
                    "alu.ALU"
                ],
                [
                    "src/hardware/cpu.py",
                    "from registers import Registers",
                    "registers.Registers"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def __init__(self, cpu, program_instruction_byte):\n    self.cpu = cpu\n    self.program_instruction_byte = program_instruction_byte\n"
        },
        {
            "path": "/home/gudako/repo/repogen/data/cpu_simulator/src/hardware/cpu.py",
            "relative_path": "src/hardware/cpu.py",
            "fqn_list": "src/hardware/cpu.py/Cycle/execute",
            "class": "src/hardware/cpu.py.Cycle",
            "signature": "def execute(self):",
            "comment": null,
            "comment_free_code": "def execute(self):\n    if self.cpu.verbose:\n        print('--------------')\n        print()\n        print('pc:', self.cpu.pc - 1)\n        if self.control.output[0]:\n            print('Immediate ', self.program_instruction_byte)\n        elif self.control.output[1]:\n            print('Operate ', self.program_instruction_byte)\n        elif self.control.output[2]:\n            print('Copy', self.program_instruction_byte)\n        elif self.control.output[3]:\n            print('Update ', self.program_instruction_byte)\n        print()\n    self.cpu.registers.load = [0] * 6\n    self.cpu.registers.save = [0] * 6\n    self.cpu.registers.input_load = 0\n    self.cpu.registers.output_save = 0\n    self.cpu.registers.save[0] = self.control.output[0]\n    self.cpu.registers.write(self.program_instruction_byte)\n    alu = ALU(self.cpu.registers.registers[1], self.cpu.registers.registers[2], self.program_instruction_byte[6], self.program_instruction_byte[7])\n    self.cpu.registers.save[3] = self.control.output[1]\n    self.cpu.registers.write_to_register(3, alu.out)\n    self.cpu.registers.load = [and_(self.control.output[2], x) for x in self.decoder1.output[:6]]\n    self.cpu.registers.save = [and_(self.control.output[2], x) for x in self.decoder2.output[:6]]\n    self.cpu.registers.input_load = and_(self.decoder1.output[6], self.control.output[2])\n    self.cpu.registers.output_save = and_(self.decoder2.output[6], self.control.output[2])\n    data = self.cpu.registers.read()\n    self.cpu.registers.write(data)\n    self.cpu.registers.load[3] = self.control.output[3]\n    compare = Comparison(control=self.program_instruction_byte, byte=self.cpu.registers.read())\n    if and_(self.control.output[3], compare.out):\n        'PC has not yet been implemented logically'\n        reg0 = int(''.join((str(x) for x in self.cpu.registers.registers[0])), 2)\n        self.cpu.pc = reg0\n    if self.cpu.verbose:\n        for i in range(6):\n            print('reg' + str(i) + ':', self.cpu.registers.registers[i], 'load:', self.cpu.registers.load[i], 'save:', self.cpu.registers.save[i])\n        if self.cpu.registers.input_load:\n            print('input:', self.cpu.registers.input, 'input_load:', self.cpu.registers.input_load)\n        if self.cpu.registers.output_save:\n            print('output:', self.cpu.registers.output, 'output_save:', self.cpu.registers.output_save)",
            "start_lineno": 56,
            "end_lineno": 116,
            "local_variables": {},
            "Type": null,
            "Dependencies": null,
            "local_import": [],
            "third_import": [
                [
                    "src/hardware/cpu.py",
                    "from gates import and_",
                    "gates.and_"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Decoder",
                    "basic_components.Decoder"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Control",
                    "basic_components.Control"
                ],
                [
                    "src/hardware/cpu.py",
                    "from basic_components import Comparison",
                    "basic_components.Comparison"
                ],
                [
                    "src/hardware/cpu.py",
                    "from alu import ALU",
                    "alu.ALU"
                ],
                [
                    "src/hardware/cpu.py",
                    "from registers import Registers",
                    "registers.Registers"
                ]
            ],
            "categorized_dependencies": {
                "Intra-class Dependency": [],
                "Intra-file Dependency": [],
                "Cross-file Dependency": [],
                "Class Dependency": []
            },
            "cov": true,
            "syn": false,
            "keyid": 69,
            "gen_code": "def execute(self):\n    if self.cpu.verbose:\n        print(f\"Executing instruction: {self.program_instruction_byte}\")\n    pass\n"
        }
    ]
}