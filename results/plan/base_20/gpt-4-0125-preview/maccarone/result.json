{
    "implementation": [
        {
            "key_id": 14,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/__init__",
            "imports": [
                "from typing import Optional",
                "from parsimonious.grammar import Grammar",
                "import logging"
            ],
            "code": "class RawSourceVisitor:\n    def __init__(self, raw_source: str, block_at_line: Optional[int] = None):\n        self.raw_source = raw_source\n        self.block_at_line = block_at_line\n        self.logger = logging.getLogger(__name__)\n        self.grammar = Grammar(\n            r\"\"\"\n            maccarone = human_source maccarone_chunk*\n            maccarone_chunk = snippet human_source?\n\n            snippet = snippet_open (ai_source snippet_close)?\n            snippet_open = snippet_open_single / snippet_open_multi\n            snippet_open_single = guidance_open guidance_inner \">>\" nl\n            snippet_open_multi = guidance_open nl guidance_lines guidance_close\n            snippet_close = ws \"#<</>>\" nl\n\n            guidance_open = ws \"#<<\"\n            guidance_close = ws \"#>>\" nl\n            guidance_line = ws \"#\" guidance_inner nl\n            guidance_lines = guidance_line+\n            guidance_inner = ~\"((?!>>).)*\"\n\n            human_source = source_line*\n            ai_source = source_line*\n            source_line = !(guidance_open / guidance_close / snippet_close) ws ~\".*\" nl?\n\n            ws = ~\"[ \\t]*\"\n            nl = ws ~\"[\\r\\n]\"\n            \"\"\"\n        )"
        },
        {
            "key_id": 3,
            "fqn": "examples/todo.py/Todo/__init__",
            "imports": [
                "from typing import Optional",
                "from examples.todo import load_todos"
            ],
            "code": "class Todo:\n    def __init__(self, description: str, status: str = 'not done', id: Optional[int] = None):\n        self.description = description\n        self.status = status\n        self.id = id\n\n        todos = load_todos()\n        todos.append(self)\n        print(f'Todo added: {self.description}')"
        },
        {
            "key_id": 11,
            "fqn": "src/maccarone/preprocessor.py/MissingPiece/get_line_pos",
            "imports": [
                "from typing import Tuple"
            ],
            "code": "def get_line_pos(self, raw_source: str) -> Tuple[int, int]:\n    start_pos = raw_source.find('#<<')\n    end_pos = raw_source.find('#<</>>', start_pos)\n    if start_pos == -1 or end_pos == -1:\n        return (-1, -1)\n    return (start_pos, end_pos + len('#<</>>'))"
        },
        {
            "key_id": 12,
            "fqn": "src/maccarone/preprocessor.py/MissingPiece/complete",
            "imports": [
                "from typing import Optional"
            ],
            "code": "def complete(self, replacement: Optional[str]) -> str:\n    if replacement is None:\n        return 'Completion not provided.'\n    return replacement"
        },
        {
            "key_id": 13,
            "fqn": "src/maccarone/preprocessor.py/find_line_number",
            "imports": [
                "import re"
            ],
            "code": "def find_line_number(text: str, pos: int):\n    lines = text[:pos].split('\\n')\n    return len(lines)"
        },
        {
            "key_id": 15,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/generic_visit",
            "imports": [
                "from parsimonious.nodes import Node",
                "from typing import List"
            ],
            "code": "def generic_visit(self, node: Node, visited_children: List[Node]):\n    self.logger.debug(f'Visiting node: {node.expr_name}')\n    return visited_children or node"
        },
        {
            "key_id": 16,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone",
            "imports": [],
            "code": "def visit_maccarone(self, node: Node, visited_children: list):\n    self.logger.info('Processing maccarone block')\n    return visited_children"
        },
        {
            "key_id": 17,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_maccarone_chunk",
            "imports": [],
            "code": "def visit_maccarone_chunk(self, node: Node, visited_children: list):\n    self.logger.info('Processing maccarone chunk')\n    return visited_children"
        },
        {
            "key_id": 18,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet",
            "imports": [],
            "code": "def visit_snippet(self, node: Node, visited_children: list):\n    self.logger.info('Processing snippet')\n    return visited_children"
        },
        {
            "key_id": 19,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open",
            "imports": [],
            "code": "def visit_snippet_open(self, node: Node, visited_children: list):\n    self.logger.info('Opening snippet')\n    return visited_children"
        },
        {
            "key_id": 20,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_single",
            "imports": [],
            "code": "def visit_snippet_open_single(self, node: Node, visited_children: list):\n    self.logger.info('Opening single line snippet')\n    return visited_children"
        },
        {
            "key_id": 21,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_snippet_open_multi",
            "imports": [],
            "code": "def visit_snippet_open_multi(self, node: Node, visited_children: list):\n    self.logger.info('Opening multi-line snippet')\n    return visited_children"
        },
        {
            "key_id": 22,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_open",
            "imports": [],
            "code": "def visit_guidance_open(self, node: Node, visited_children: list):\n    self.logger.info('Opening guidance')\n    return visited_children"
        },
        {
            "key_id": 23,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_line",
            "imports": [],
            "code": "def visit_guidance_line(self, node: Node, visited_children: list):\n    self.logger.info('Processing guidance line')\n    return visited_children"
        },
        {
            "key_id": 24,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_lines",
            "imports": [],
            "code": "def visit_guidance_lines(self, node: Node, visited_children: list):\n    self.logger.info('Processing multiple guidance lines')\n    return visited_children"
        },
        {
            "key_id": 25,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_guidance_inner",
            "imports": [],
            "code": "def visit_guidance_inner(self, node: Node, visited_children: list):\n    self.logger.info('Processing inner guidance content')\n    return visited_children"
        },
        {
            "key_id": 26,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_human_source",
            "imports": [],
            "code": "def visit_human_source(self, node: Node, visited_children: list):\n    self.logger.info('Processing human source content')\n    return visited_children"
        },
        {
            "key_id": 27,
            "fqn": "src/maccarone/preprocessor.py/RawSourceVisitor/visit_ai_source",
            "imports": [],
            "code": "def visit_ai_source(self, node: Node, visited_children: list):\n    self.logger.info('Processing AI source content')\n    return visited_children"
        },
        {
            "key_id": 28,
            "fqn": "src/maccarone/preprocessor.py/raw_source_to_pieces",
            "imports": [
                "from typing import List",
                "from src.maccarone.preprocessor import Piece"
            ],
            "code": "def raw_source_to_pieces(input: str, block_at_line: Optional[int] = None) -> List[Piece]:\n    pieces = []\n    # Logic to split the source into pieces based on maccarone syntax\n    return pieces"
        },
        {
            "key_id": 29,
            "fqn": "src/maccarone/preprocessor.py/raw_pieces_to_tagged_input",
            "imports": [
                "from typing import List",
                "from src.maccarone.preprocessor import Piece"
            ],
            "code": "def raw_pieces_to_tagged_input(raw_pieces: List[Piece]) -> str:\n    tagged_input = ''\n    # Logic to convert raw pieces to a tagged input format for processing\n    return tagged_input"
        },
        {
            "key_id": 30,
            "fqn": "src/maccarone/preprocessor.py/tagged_input_to_tagged_output",
            "imports": [
                "from src.maccarone.openai import ChatAPI"
            ],
            "code": "def tagged_input_to_tagged_output(tagged_input: str, chat_api: ChatAPI) -> str:\n    tagged_output = chat_api.complete_chat(tagged_input)\n    # Logic to process tagged input and generate tagged output\n    return tagged_output"
        },
        {
            "key_id": 31,
            "fqn": "src/maccarone/preprocessor.py/tagged_output_to_completed_pieces",
            "imports": [
                "from typing import Dict"
            ],
            "code": "def tagged_output_to_completed_pieces(tagged_output: str) -> Dict[int, str]:\n    completed_pieces = {}\n    # Logic to convert tagged output back into completed source pieces\n    return completed_pieces"
        },
        {
            "key_id": 32,
            "fqn": "src/maccarone/preprocessor.py/pieces_to_final_source",
            "imports": [
                "from typing import List, Dict"
            ],
            "code": "def pieces_to_final_source(raw_pieces: List[Piece], completed_pieces: Dict[int, str]) -> str:\n    final_source = ''\n    for piece in raw_pieces:\n        if piece.line_number in completed_pieces:\n            final_source += completed_pieces[piece.line_number]\n        else:\n            final_source += piece.content\n    return final_source"
        },
        {
            "key_id": 33,
            "fqn": "src/maccarone/preprocessor.py/preprocess_maccarone",
            "imports": [
                "from typing import Optional"
            ],
            "code": "def preprocess_maccarone(raw_source: str, chat_api: ChatAPI, block_at_line: Optional[int] = None) -> str:\n    pieces = raw_source_to_pieces(raw_source, block_at_line)\n    raw_pieces = [piece for piece in pieces if not piece.is_completed]\n    tagged_input = raw_pieces_to_tagged_input(raw_pieces)\n    tagged_output = tagged_input_to_tagged_output(tagged_input, chat_api)\n    completed_pieces = tagged_output_to_completed_pieces(tagged_output)\n    final_source = pieces_to_final_source(pieces, completed_pieces)\n    return final_source"
        },
        {
            "key_id": 34,
            "fqn": "src/maccarone/openai.py/complete_chat",
            "imports": [
                "from typing import List, Dict, Callable"
            ],
            "code": "def complete_chat(messages: List[Dict[str, str]], model = 'gpt-4', on_token: Callable[[int], None] = lambda p: None) -> str:\n    # Simulated API call to OpenAI's GPT\n    response = 'Simulated response from GPT-4 based on the input messages.'\n    return response"
        },
        {
            "key_id": 35,
            "fqn": "src/maccarone/openai.py/ChatAPI/complete_chat",
            "imports": [
                "from typing import List, Dict"
            ],
            "code": "class ChatAPI:\n    def complete_chat(self, chat_name: str, messages: List[Dict[str, str]], model = 'gpt-4') -> str:\n        # Simulate chat completion using the OpenAI API\n        response = 'Simulated chat completion response.'\n        return response"
        },
        {
            "key_id": 38,
            "fqn": "src/maccarone/scripts/preprocess.py/parse_args",
            "imports": [
                "from argparse import ArgumentParser, Namespace"
            ],
            "code": "def parse_args() -> Namespace:\n    parser = ArgumentParser(description='Process some integers.')\n    parser.add_argument('path', type=str, help='Path to the file or directory to preprocess.')\n    parser.add_argument('--print', action='store_true', help='Print the output instead of saving it.')\n    parser.add_argument('--rewrite', action='store_true', help='Rewrite the original files with the processed output.')\n    parser.add_argument('--suffix', type=str, default='.py', help='Suffix for the files to process.')\n    parser.add_argument('--block-at-line', type=int, help='Process a specific block at the given line number.')\n    return parser.parse_args()"
        },
        {
            "key_id": 37,
            "fqn": "src/maccarone/scripts/preprocess.py/main",
            "imports": [
                "import sys"
            ],
            "code": "def main(path: str, print_: bool, rewrite: bool, suffix: str, block_at_line: Optional[int] = None) -> None:\n    try:\n        preprocess(path, print_, rewrite, block_at_line)\n    except Exception as e:\n        print(f'Error during preprocessing: {e}', file=sys.stderr)\n        sys.exit(1)"
        },
        {
            "key_id": 36,
            "fqn": "src/maccarone/scripts/preprocess.py/preprocess",
            "imports": [
                "from src.maccarone.preprocessor import preprocess_maccarone"
            ],
            "code": "def preprocess(mn_path: str, print_: bool, rewrite: bool, block_at_line: Optional[int]) -> None:\n    # This function would call the preprocess_maccarone function\n    # and handle the printing or rewriting of files based on the flags\n    print('Preprocessing', mn_path)"
        },
        {
            "key_id": 39,
            "fqn": "src/maccarone/scripts/preprocess.py/script_main",
            "imports": [],
            "code": "def script_main():\n    args = parse_args()\n    main(args.path, args.print, args.rewrite, args.suffix, args.block_at_line)"
        },
        {
            "key_id": 4,
            "fqn": "examples/todo.py/load_todos",
            "imports": [
                "import json",
                "from examples.todo import Todo"
            ],
            "code": "def load_todos() -> list[Todo]:\n    try:\n        with open('todos.json', 'r') as file:\n            todos_data = json.load(file)\n            return [Todo(**data) for data in todos_data]\n    except FileNotFoundError:\n        return []"
        },
        {
            "key_id": 5,
            "fqn": "examples/todo.py/save_todos",
            "imports": [
                "import json"
            ],
            "code": "def save_todos(todos: list[Todo]) -> None:\n    with open('todos.json', 'w') as file:\n        json.dump([todo.to_dict() for todo in todos], file)"
        },
        {
            "key_id": 6,
            "fqn": "examples/todo.py/add_todo",
            "imports": [],
            "code": "def add_todo(description: str) -> None:\n    todos = load_todos()\n    todos.append(Todo(description=description))\n    save_todos(todos)"
        },
        {
            "key_id": 7,
            "fqn": "examples/todo.py/remove_todo",
            "imports": [],
            "code": "def remove_todo(id: int) -> None:\n    todos = load_todos()\n    todos = [todo for todo in todos if todo.id != id]\n    save_todos(todos)"
        },
        {
            "key_id": 8,
            "fqn": "examples/todo.py/print_todos",
            "imports": [],
            "code": "def print_todos() -> None:\n    todos = load_todos()\n    for todo in todos:\n        print(f'{todo.id}: {todo.description} - {todo.status}')"
        },
        {
            "key_id": 9,
            "fqn": "examples/todo.py/main",
            "imports": [
                "import argparse"
            ],
            "code": "def main() -> None:\n    parser = argparse.ArgumentParser(description='Manage your todos.')\n    parser.add_argument('--add', type=str, help='Add a new todo.')\n    parser.add_argument('--remove', type=int, help='Remove a todo by its ID.')\n    parser.add_argument('--list', action='store_true', help='List all todos.')\n    args = parser.parse_args()\n    if args.add:\n        add_todo(args.add)\n    elif args.remove:\n        remove_todo(args.remove)\n    elif args.list:\n        print_todos()"
        },
        {
            "key_id": 0,
            "fqn": "examples/file_sizes_ext.py/main",
            "imports": [
                "import argparse",
                "import os"
            ],
            "code": "def main(path: str, extension: str | None = None) -> None:\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    if extension:\n        filenames = [f for f in filenames if f.endswith(extension)]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(f'{fn}: {size} bytes')"
        },
        {
            "key_id": 10,
            "fqn": "examples/file_sizes.py/main",
            "imports": [
                "import argparse",
                "import os"
            ],
            "code": "def main(path: str) -> None:\n    filenames = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    for fn in filenames:\n        size = os.path.getsize(os.path.join(path, fn))\n        print(f'{fn}: {size} bytes')"
        },
        {
            "key_id": 1,
            "fqn": "examples/add.py/add_two_numbers",
            "imports": [],
            "code": "def add_two_numbers(x: int, y: int) -> int:\n    return x + y"
        },
        {
            "key_id": 2,
            "fqn": "examples/fizzbuzz.py/main",
            "imports": [
                "import argparse"
            ],
            "code": "def main(n: int) -> None:\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)"
        }
    ]
}