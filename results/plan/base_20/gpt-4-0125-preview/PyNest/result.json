{
    "implementation": [
        {
            "key_id": 3,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/__init__",
            "imports": [
                "from typing import Union, Type",
                "from nest.core.pynest_container import PyNestContainer",
                "from nest.core.module import Module",
                "from nest.core.module_compiler import ModuleCompiler"
            ],
            "code": "def __init__(self, container: PyNestContainer, context_module: Union[Module, None] = None):\n    self._is_initialized = False\n    self._module_compiler = ModuleCompiler()\n    self.container = container\n    self.context_module = context_module\n    if context_module is not None:\n        self.init()"
        },
        {
            "key_id": 9,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/__init__",
            "imports": [
                "from typing import Dict, Type"
            ],
            "code": "def __init__(self):\n    self._instance = None\n    self._dependencies: Dict[str, Type] = {}"
        },
        {
            "key_id": 30,
            "fqn": "nest/core/pynest_application.py/PyNestApp/__init__",
            "imports": [
                "from fastapi import FastAPI",
                "from nest.core.pynest_container import PyNestContainer"
            ],
            "code": "def __init__(self, container: PyNestContainer, http_server: FastAPI):\n    self._is_listening = False\n    self.container = container\n    self.http_server = http_server"
        },
        {
            "key_id": 55,
            "fqn": "nest/core/decorators/module.py/Module/__init__",
            "imports": [
                "from typing import Optional, List, Type"
            ],
            "code": "def __init__(self, imports = None, controllers = None, providers = None, exports = None, is_global: bool = False):\n    self.imports = imports if imports is not None else []\n    self.controllers = controllers if controllers is not None else []\n    self.providers = providers if providers is not None else []\n    self.exports = exports if exports is not None else []\n    self.is_global = is_global"
        },
        {
            "key_id": 63,
            "fqn": "nest/core/database/base_config.py/ConfigFactoryBase/__init__",
            "imports": [],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type"
        },
        {
            "key_id": 66,
            "fqn": "nest/core/database/base_config.py/BaseProvider/__init__",
            "imports": [],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port"
        },
        {
            "key_id": 68,
            "fqn": "nest/core/database/odm_provider.py/OdmProvider/__init__",
            "imports": [
                "from motor.motor_asyncio import AsyncIOMotorClient",
                "from typing import List, Optional, Dict",
                "from beanie import Document"
            ],
            "code": "def __init__(self, db_type = \"mongodb\", config_params: Dict = None, document_models: List[Document] = None):\n    self.config_url = self.get_engine_url()\n    self.client = AsyncIOMotorClient(self.config_url)\n    self.document_models = document_models if document_models is not None else []\n    self.check_document_models()"
        },
        {
            "key_id": 70,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Optional, Dict"
            ],
            "code": "def __init__(self, db_type: str = \"postgresql\", config_params: Dict = None, async_mode: bool = False, **kwargs):\n    self.engine = create_async_engine(self.get_engine_url(), **kwargs)\n    self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)"
        },
        {
            "key_id": 74,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/__init__",
            "imports": [
                "from sqlalchemy import create_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ],
            "code": "def __init__(self, db_type: str = \"postgresql\", config_params: Dict = None):\n    self.engine = create_engine(self.get_engine_url())\n    self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)"
        },
        {
            "key_id": 78,
            "fqn": "nest/core/database/orm_provider.py/AsyncOrmProvider/__init__",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine",
                "from sqlalchemy.orm import sessionmaker",
                "from typing import Dict"
            ],
            "code": "def __init__(self, db_type: str = \"postgresql\", config_params: Dict = None, **kwargs):\n    self.engine = create_async_engine(self.get_engine_url(), **kwargs)\n    self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine, class_=AsyncSession)"
        },
        {
            "key_id": 79,
            "fqn": "nest/core/database/odm_config.py/MongoDBConfig/__init__",
            "imports": [],
            "code": "def __init__(self, host: str, db_name: str, user: str = None, password: str = None, port: int = 27017, srv: bool = False):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port\n    self.srv = srv"
        },
        {
            "key_id": 81,
            "fqn": "nest/core/database/odm_config.py/ConfigFactory/__init__",
            "imports": [],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type"
        },
        {
            "key_id": 83,
            "fqn": "nest/core/database/orm_config.py/PostgresConfig/__init__",
            "imports": [],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port"
        },
        {
            "key_id": 85,
            "fqn": "nest/core/database/orm_config.py/MySQLConfig/__init__",
            "imports": [],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port"
        },
        {
            "key_id": 87,
            "fqn": "nest/core/database/orm_config.py/SQLiteConfig/__init__",
            "imports": [],
            "code": "def __init__(self, db_name: str):\n    self.db_name = db_name"
        },
        {
            "key_id": 89,
            "fqn": "nest/core/database/orm_config.py/AsyncSQLiteConfig/__init__",
            "imports": [],
            "code": "def __init__(self, db_name: str):\n    self.db_name = db_name"
        },
        {
            "key_id": 91,
            "fqn": "nest/core/database/orm_config.py/AsyncPostgresConfig/__init__",
            "imports": [],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port"
        },
        {
            "key_id": 93,
            "fqn": "nest/core/database/orm_config.py/AsyncMySQLConfig/__init__",
            "imports": [],
            "code": "def __init__(self, host: str, db_name: str, user: str, password: str, port: int):\n    self.host = host\n    self.db_name = db_name\n    self.user = user\n    self.password = password\n    self.port = port"
        },
        {
            "key_id": 95,
            "fqn": "nest/core/database/orm_config.py/ConfigFactory/__init__",
            "imports": [],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type"
        },
        {
            "key_id": 97,
            "fqn": "nest/core/database/orm_config.py/AsyncConfigFactory/__init__",
            "imports": [],
            "code": "def __init__(self, db_type: str):\n    self.db_type = db_type"
        },
        {
            "key_id": 2,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/init",
            "imports": [
                "from nest.core.pynest_container import PyNestContainer",
                "from typing import Union, Type",
                "from nest.core.module_compiler import ModuleCompiler"
            ],
            "code": "def __init__(self, container: PyNestContainer, context_module: Union[Type, None] = None):\n    self._is_initialized = False\n    self._module_compiler = ModuleCompiler()\n    self.container = container\n    self.context_module = context_module\n    if context_module is not None:\n        self.init()"
        },
        {
            "key_id": 4,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/select_context_module",
            "imports": [],
            "code": "def select_context_module(self):\n    if self.context_module:\n        return self.context_module\n    raise ValueError('Context module not set')"
        },
        {
            "key_id": 5,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/select",
            "imports": [
                "from typing import TypeVar, Type"
            ],
            "code": "T = TypeVar('T')\ndef select(self, module: Type[T]) -> T:\n    try:\n        selected_module = self.container.get_module_by_key(module.__name__)\n        return selected_module\n    except KeyError:\n        raise ValueError(f'Module {module.__name__} not found')"
        },
        {
            "key_id": 0,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "imports": [],
            "code": "def is_initialized(self) -> bool:\n    return self._is_initialized"
        },
        {
            "key_id": 1,
            "fqn": "nest/core/pynest_app_context.py/PyNestApplicationContext/is_initialized",
            "imports": [],
            "code": "def is_initialized(self, value: bool):\n    self._is_initialized = value"
        },
        {
            "key_id": 6,
            "fqn": "nest/core/pynest_factory.py/PyNestFactory/create",
            "imports": [
                "from typing import Type, Any, Dict",
                "from nest.core.pynest_application import PyNestApp",
                "from nest.core.pynest_container import PyNestContainer"
            ],
            "code": "def create(main_module: Type[Any], **kwargs) -> PyNestApp:\n    container = PyNestContainer()\n    app_context = PyNestApp(container)\n    app_context.register_module(main_module, **kwargs)\n    return app_context"
        },
        {
            "key_id": 7,
            "fqn": "nest/core/pynest_factory.py/PyNestFactory/_create_server",
            "imports": [
                "from fastapi import FastAPI"
            ],
            "code": "def _create_server(**kwargs) -> FastAPI:\n    app = FastAPI(**kwargs)\n    return app"
        },
        {
            "key_id": 8,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/__new__",
            "imports": [
                "from typing import Dict, Type"
            ],
            "code": "def __new__(cls):\n    if not hasattr(cls, '_instance'):\n        cls._instance = super(PyNestContainer, cls).__new__(cls)\n        cls._dependencies: Dict[str, Type] = {}\n    return cls._instance"
        },
        {
            "key_id": 10,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/modules",
            "imports": [],
            "code": "def modules(self):\n    return self._dependencies.keys()"
        },
        {
            "key_id": 11,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/module_token_factory",
            "imports": [],
            "code": "def module_token_factory(self):\n    # Example implementation, needs to be adapted based on actual use case\n    return {module_name: hash(module_name) for module_name in self._dependencies.keys()}"
        },
        {
            "key_id": 12,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/modules_metadata",
            "imports": [],
            "code": "def modules_metadata(self):\n    # Example metadata retrieval, needs to be adapted based on actual use case\n    return {module_name: {'metadata': 'data'} for module_name in self._dependencies.keys()}"
        },
        {
            "key_id": 13,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/module_compiler",
            "imports": [],
            "code": "def module_compiler(self):\n    # Placeholder for module compilation logic\n    pass"
        },
        {
            "key_id": 14,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/get_instance",
            "imports": [
                "from typing import Type, Optional, Union"
            ],
            "code": "def get_instance(self, dependency: Type, provider: Optional[Union[Type, None]] = None):\n    # Example instance retrieval, needs to be adapted based on actual use case\n    if dependency.__name__ in self._dependencies:\n        return self._dependencies[dependency.__name__]()\n    raise ValueError(f'Dependency {dependency.__name__} not found')"
        },
        {
            "key_id": 22,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_get_providers",
            "imports": [
                "from typing import List, Type"
            ],
            "code": "def _get_providers(self, token: str) -> List[Type]:\n    return self._dependencies.get(token, [])"
        },
        {
            "key_id": 23,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_controllers",
            "imports": [
                "from typing import List, Type"
            ],
            "code": "def add_controllers(self, controllers: List[Type], module_token: str) -> None:\n    if module_token not in self._dependencies:\n        self._dependencies[module_token] = []\n    self._dependencies[module_token].extend(controllers)"
        },
        {
            "key_id": 24,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_add_controller",
            "imports": [],
            "code": "def _add_controller(self, token: str, controller: Type) -> None:\n    if token not in self._dependencies:\n        self._dependencies[token] = []\n    self._dependencies[token].append(controller)"
        },
        {
            "key_id": 25,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/_get_controllers",
            "imports": [
                "from typing import List, Type"
            ],
            "code": "def _get_controllers(self, token: str) -> List[Type]:\n    return self._dependencies.get(token, [])"
        },
        {
            "key_id": 26,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/clear",
            "imports": [],
            "code": "def clear(self):\n    self._dependencies.clear()"
        },
        {
            "key_id": 27,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/add_related_module",
            "imports": [],
            "code": "def add_related_module(self, related_module, token: str) -> None:\n    if token not in self._dependencies:\n        self._dependencies[token] = []\n    self._dependencies[token].append(related_module)"
        },
        {
            "key_id": 28,
            "fqn": "nest/core/pynest_container.py/PyNestContainer/get_module_by_key",
            "imports": [
                "from typing import Optional, Type"
            ],
            "code": "def get_module_by_key(self, module_key: str) -> Optional[Type]:\n    return self._dependencies.get(module_key)"
        },
        {
            "key_id": 29,
            "fqn": "nest/core/pynest_application.py/PyNestApp/is_listening",
            "imports": [],
            "code": "def is_listening(self) -> bool:\n    return self._is_listening"
        },
        {
            "key_id": 31,
            "fqn": "nest/core/pynest_application.py/PyNestApp/use",
            "imports": [],
            "code": "def use(self, middleware: type, **options) -> 'PyNestApp':\n    self.http_server.middleware('http')(middleware)\n    return self"
        },
        {
            "key_id": 32,
            "fqn": "nest/core/pynest_application.py/PyNestApp/get_server",
            "imports": [],
            "code": "def get_server(self) -> FastAPI:\n    return self.http_server"
        },
        {
            "key_id": 33,
            "fqn": "nest/core/pynest_application.py/PyNestApp/register_routes",
            "imports": [],
            "code": "def register_routes(self):\n    # This method would be responsible for registering routes\n    # The actual implementation would depend on the structure of your application\n    pass"
        },
        {
            "key_id": 34,
            "fqn": "nest/core/decorators/injectable.py/Injectable",
            "imports": [
                "from typing import Callable, Optional, Type"
            ],
            "code": "def Injectable(target_class: Optional[Type] = None, *args, **kwargs) -> Callable:\n    def decorator(cls):\n        # Logic to make class injectable\n        return cls\n    if target_class is not None:\n        return decorator(target_class)\n    return decorator"
        },
        {
            "key_id": 35,
            "fqn": "nest/core/decorators/controller.py/Controller",
            "imports": [
                "from typing import Optional"
            ],
            "code": "def Controller(prefix: Optional[str] = None, tag: Optional[str] = None):\n    def decorator(cls):\n        # Logic to define a controller\n        cls._prefix = prefix\n        cls._tag = tag\n        return cls\n    return decorator"
        },
        {
            "key_id": 36,
            "fqn": "nest/core/decorators/controller.py/process_prefix",
            "imports": [],
            "code": "def process_prefix(route_prefix: Optional[str], tag_name: Optional[str]) -> str:\n    # Logic to process prefix\n    return route_prefix if route_prefix else tag_name"
        },
        {
            "key_id": 37,
            "fqn": "nest/core/decorators/controller.py/process_dependencies",
            "imports": [],
            "code": "def process_dependencies(cls: Type) -> None:\n    # Logic to process dependencies\n    pass"
        },
        {
            "key_id": 38,
            "fqn": "nest/core/decorators/controller.py/set_instance_variables",
            "imports": [],
            "code": "def set_instance_variables(cls: Type) -> None:\n    # Logic to set instance variables\n    pass"
        },
        {
            "key_id": 39,
            "fqn": "nest/core/decorators/controller.py/ensure_init_method",
            "imports": [],
            "code": "def ensure_init_method(cls: Type) -> None:\n    # Ensure class has an __init__ method\n    if '__init__' not in cls.__dict__:\n        def __init__(self, *args, **kwargs):\n            super(cls, self).__init__(*args, **kwargs)\n        cls.__init__ = __init__"
        },
        {
            "key_id": 40,
            "fqn": "nest/core/decorators/controller.py/add_routes",
            "imports": [
                "from fastapi import APIRouter"
            ],
            "code": "def add_routes(cls: Type, router: APIRouter, route_prefix: str) -> None:\n    # Logic to add routes to the router\n    pass"
        },
        {
            "key_id": 41,
            "fqn": "nest/core/decorators/controller.py/validate_method_decorator",
            "imports": [],
            "code": "def validate_method_decorator(method_function: callable, method_name: str) -> None:\n    # Validate method decorator\n    pass"
        },
        {
            "key_id": 42,
            "fqn": "nest/core/decorators/controller.py/configure_method_route",
            "imports": [],
            "code": "def configure_method_route(method_function: callable, route_prefix: str) -> None:\n    # Configure method route\n    pass"
        },
        {
            "key_id": 43,
            "fqn": "nest/core/decorators/controller.py/add_route_to_router",
            "imports": [
                "from fastapi import APIRouter"
            ],
            "code": "def add_route_to_router(router: APIRouter, method_function: callable) -> None:\n    try:\n        router.add_api_route(method_function.__route__, method_function, methods=[method_function.__method__])\n    except AttributeError as e:\n        raise ValueError('Method function must have __route__ and __method__ attributes') from e"
        },
        {
            "key_id": 44,
            "fqn": "nest/core/decorators/http_method.py/route",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def route(http_method: str, route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    def decorator(func: Callable) -> Callable:\n        if isinstance(route_path, list):\n            func.__route__ = route_path[0]\n        else:\n            func.__route__ = route_path\n        func.__method__ = http_method\n        return func\n    return decorator"
        },
        {
            "key_id": 45,
            "fqn": "nest/core/decorators/http_method.py/Get",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Get(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('GET', route_path, **kwargs)"
        },
        {
            "key_id": 46,
            "fqn": "nest/core/decorators/http_method.py/Post",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Post(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('POST', route_path, **kwargs)"
        },
        {
            "key_id": 47,
            "fqn": "nest/core/decorators/http_method.py/Delete",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Delete(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('DELETE', route_path, **kwargs)"
        },
        {
            "key_id": 48,
            "fqn": "nest/core/decorators/http_method.py/Put",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Put(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('PUT', route_path, **kwargs)"
        },
        {
            "key_id": 49,
            "fqn": "nest/core/decorators/http_method.py/Patch",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Patch(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('PATCH', route_path, **kwargs)"
        },
        {
            "key_id": 50,
            "fqn": "nest/core/decorators/http_method.py/Head",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Head(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('HEAD', route_path, **kwargs)"
        },
        {
            "key_id": 51,
            "fqn": "nest/core/decorators/http_method.py/Options",
            "imports": [
                "from typing import Union, List, Callable, Any"
            ],
            "code": "def Options(route_path: Union[str, List[str]] = '/', **kwargs) -> Callable[..., Any]:\n    return route('OPTIONS', route_path, **kwargs)"
        },
        {
            "key_id": 52,
            "fqn": "nest/core/decorators/database.py/db_request_handler",
            "imports": [
                "import logging"
            ],
            "code": "def db_request_handler(func):\n    logger = logging.getLogger(__name__)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.error(f'Database request failed: {e}')\n            raise\n    return wrapper"
        },
        {
            "key_id": 53,
            "fqn": "nest/core/decorators/database.py/async_db_request_handler",
            "imports": [
                "import logging",
                "from functools import wraps"
            ],
            "code": "def async_db_request_handler(func):\n    logger = logging.getLogger(__name__)\n    @wraps(func)\n    async def wrapper(*args, **kwargs):\n        try:\n            return await func(*args, **kwargs)\n        except Exception as e:\n            logger.error(f'Async database request failed: {e}')\n            raise\n    return wrapper"
        },
        {
            "key_id": 54,
            "fqn": "nest/core/decorators/http_code.py/HttpCode",
            "imports": [],
            "code": "def HttpCode(status_code: int):\n    def decorator(func):\n        func.__status_code__ = status_code\n        return func\n    return decorator"
        },
        {
            "key_id": 56,
            "fqn": "nest/core/decorators/module.py/Module/__call__",
            "imports": [],
            "code": "class Module:\n    def __init__(self, imports=None, controllers=None, providers=None, exports=None, is_global: bool = False):\n        self.imports = imports if imports is not None else []\n        self.controllers = controllers if controllers is not None else []\n        self.providers = providers if providers is not None else []\n        self.exports = exports if exports is not None else []\n        self.is_global = is_global\n\n    def __call__(self, cls):\n        cls.__module_imports__ = self.imports\n        cls.__module_controllers__ = self.controllers\n        cls.__module_providers__ = self.providers\n        cls.__module_exports__ = self.exports\n        cls.__module_is_global__ = self.is_global\n        return cls"
        },
        {
            "key_id": 57,
            "fqn": "nest/core/decorators/utils.py/get_instance_variables",
            "imports": [
                "from typing import Type"
            ],
            "code": "def get_instance_variables(cls: Type):\n    return [var for var in vars(cls) if not var.startswith('__') and not callable(getattr(cls, var))]"
        },
        {
            "key_id": 58,
            "fqn": "nest/core/decorators/utils.py/get_non_dependencies_params",
            "imports": [
                "from typing import Type"
            ],
            "code": "def get_non_dependencies_params(cls: Type):\n    return [param for param in cls.__annotations__.keys() if param not in cls.__dependencies__]"
        },
        {
            "key_id": 59,
            "fqn": "nest/core/decorators/utils.py/parse_dependencies",
            "imports": [
                "from typing import Type"
            ],
            "code": "def parse_dependencies(cls: Type):\n    if hasattr(cls, '__annotations__'):\n        cls.__dependencies__ = {key: value for key, value in cls.__annotations__.items() if key in cls.__dict__}\n    else:\n        cls.__dependencies__ = {}"
        },
        {
            "key_id": 60,
            "fqn": "nest/core/decorators/class_based_view.py/class_based_view",
            "imports": [
                "from fastapi import APIRouter",
                "from typing import Type, TypeVar"
            ],
            "code": "T = TypeVar('T')\n\ndef class_based_view(router: APIRouter, cls: Type[T]) -> Type[T]:\n    _init_cbv(cls)\n    for route in cls.__routes__:\n        router.add_api_route(route.path, getattr(cls, route.handler), methods=[route.method], name=route.name)\n    return cls"
        },
        {
            "key_id": 61,
            "fqn": "nest/core/decorators/class_based_view.py/_init_cbv",
            "imports": [
                "from typing import Type"
            ],
            "code": "def _init_cbv(cls: Type):\n    if not hasattr(cls, '__routes__'):\n        raise ValueError(f'{cls.__name__} must have __routes__ attribute')"
        },
        {
            "key_id": 62,
            "fqn": "nest/core/decorators/class_based_view.py/_update_cbv_route_endpoint_signature",
            "imports": [
                "from typing import Type, Union",
                "from fastapi.routing import Route, WebSocketRoute"
            ],
            "code": "def _update_cbv_route_endpoint_signature(cls: Type, route: Union[Route, WebSocketRoute]) -> None:\n    if isinstance(route, Route):\n        original_endpoint = route.endpoint\n        route.endpoint = lambda *args, **kwargs: original_endpoint(cls(), *args, **kwargs)"
        },
        {
            "key_id": 64,
            "fqn": "nest/core/database/base_config.py/ConfigFactoryBase/get_config",
            "imports": [],
            "code": "class ConfigFactoryBase:\n    def __init__(self, db_type: str):\n        self.db_type = db_type\n\n    def get_config(self):\n        if self.db_type == 'postgresql':\n            return PostgresConfig()\n        elif self.db_type == 'mysql':\n            return MySQLConfig()\n        elif self.db_type == 'sqlite':\n            return SQLiteConfig()\n        else:\n            raise ValueError(f'Unsupported database type: {self.db_type}')"
        },
        {
            "key_id": 65,
            "fqn": "nest/core/database/base_config.py/BaseConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    raise NotImplementedError('Subclasses must implement this method.')"
        },
        {
            "key_id": 67,
            "fqn": "nest/core/database/base_config.py/BaseProvider/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 69,
            "fqn": "nest/core/database/odm_provider.py/OdmProvider/check_document_models",
            "imports": [
                "from motor.motor_asyncio import AsyncIOMotorClient"
            ],
            "code": "def check_document_models(self):\n    if not self.document_models:\n        raise ValueError('No document models provided')\n    for model in self.document_models:\n        if not model.__collection__:\n            raise ValueError(f'Model {model.__name__} does not have a collection name')"
        },
        {
            "key_id": 71,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/create_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def create_all(self):\n    async with create_async_engine(self.get_engine_url()) as engine:\n        async with engine.begin() as conn:\n            await conn.run_sync(Base.metadata.create_all)"
        },
        {
            "key_id": 72,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/drop_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def drop_all(self):\n    async with create_async_engine(self.get_engine_url()) as engine:\n        async with engine.begin() as conn:\n            await conn.run_sync(Base.metadata.drop_all)"
        },
        {
            "key_id": 73,
            "fqn": "nest/core/database/orm_provider.py/BaseOrmProvider/get_db",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from contextlib import asynccontextmanager"
            ],
            "code": "def get_db(self):\n    async with AsyncSession(self.engine) as session:\n        yield session"
        },
        {
            "key_id": 75,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/create_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def create_all(self):\n    async with create_async_engine(self.get_engine_url()) as engine:\n        async with engine.begin() as conn:\n            await conn.run_sync(Base.metadata.create_all)"
        },
        {
            "key_id": 76,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/drop_all",
            "imports": [
                "from sqlalchemy.ext.asyncio import create_async_engine",
                "from sqlalchemy.orm import sessionmaker"
            ],
            "code": "def drop_all(self):\n    async with create_async_engine(self.get_engine_url()) as engine:\n        async with engine.begin() as conn:\n            await conn.run_sync(Base.metadata.drop_all)"
        },
        {
            "key_id": 77,
            "fqn": "nest/core/database/orm_provider.py/OrmProvider/get_db",
            "imports": [
                "from sqlalchemy.ext.asyncio import AsyncSession",
                "from contextlib import asynccontextmanager"
            ],
            "code": "def get_db(self) -> AsyncSession:\n    async with AsyncSession(self.engine) as session:\n        yield session"
        },
        {
            "key_id": 80,
            "fqn": "nest/core/database/odm_config.py/MongoDBConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    if self.srv:\n        return f'mongodb+srv://{self.user}:{self.password}@{self.host}/{self.db_name}'\n    else:\n        return f'mongodb://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 82,
            "fqn": "nest/core/database/odm_config.py/ConfigFactory/get_config",
            "imports": [],
            "code": "def get_config(self):\n    if self.db_type == 'mongodb':\n        return MongoDBConfig()\n    else:\n        raise ValueError('Unsupported database type')"
        },
        {
            "key_id": 84,
            "fqn": "nest/core/database/orm_config.py/PostgresConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 86,
            "fqn": "nest/core/database/orm_config.py/MySQLConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'mysql+pymysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 88,
            "fqn": "nest/core/database/orm_config.py/SQLiteConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'sqlite:///{self.db_name}'"
        },
        {
            "key_id": 90,
            "fqn": "nest/core/database/orm_config.py/AsyncSQLiteConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'sqlite+aiosqlite:///{self.db_name}'"
        },
        {
            "key_id": 92,
            "fqn": "nest/core/database/orm_config.py/AsyncPostgresConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 94,
            "fqn": "nest/core/database/orm_config.py/AsyncMySQLConfig/get_engine_url",
            "imports": [],
            "code": "def get_engine_url(self) -> str:\n    return f'mysql+aiomysql://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'"
        },
        {
            "key_id": 96,
            "fqn": "nest/core/database/orm_config.py/ConfigFactory/get_config",
            "imports": [],
            "code": "def get_config(self):\n    if self.db_type == 'postgresql':\n        return PostgresConfig()\n    elif self.db_type == 'mysql':\n        return MySQLConfig()\n    elif self.db_type == 'sqlite':\n        return SQLiteConfig()\n    else:\n        raise ValueError('Unsupported database type')"
        },
        {
            "key_id": 98,
            "fqn": "nest/core/database/orm_config.py/AsyncConfigFactory/get_config",
            "imports": [],
            "code": "def get_config(self):\n    if self.db_type == 'postgresql':\n        return AsyncPostgresConfig()\n    elif self.db_type == 'mysql':\n        return AsyncMySQLConfig()\n    elif self.db_type == 'sqlite':\n        return AsyncSQLiteConfig()\n    else:\n        raise ValueError('Unsupported database type')"
        }
    ]
}