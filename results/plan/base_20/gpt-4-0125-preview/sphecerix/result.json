{
    "implementation": [
        {
            "key_id": 19,
            "fqn": "sphecerix/symmetry_operations.py/SymmetryOperations/__init__",
            "imports": [],
            "code": "class SymmetryOperations:\n    def __init__(self, mol):\n        self.mol = mol\n        self.operations = []"
        },
        {
            "key_id": 22,
            "fqn": "sphecerix/symmetry_operations.py/Operation/__init__",
            "imports": [],
            "code": "class Operation:\n    def __init__(self, name):\n        self.name = name"
        },
        {
            "key_id": 24,
            "fqn": "sphecerix/symmetry_operations.py/Identity/__init__",
            "imports": [],
            "code": "class Identity(Operation):\n    def __init__(self):\n        super().__init__('Identity')"
        },
        {
            "key_id": 27,
            "fqn": "sphecerix/symmetry_operations.py/Inversion/__init__",
            "imports": [],
            "code": "class Inversion(Operation):\n    def __init__(self):\n        super().__init__('Inversion')"
        },
        {
            "key_id": 30,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/__init__",
            "imports": [],
            "code": "class Rotation(Operation):\n    def __init__(self, label, axis, angle):\n        super().__init__(label)\n        self.axis = axis\n        self.angle = angle"
        },
        {
            "key_id": 33,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/__init__",
            "imports": [],
            "code": "class Mirror(Operation):\n    def __init__(self, label, normal):\n        super().__init__(label)\n        self.normal = normal"
        },
        {
            "key_id": 36,
            "fqn": "sphecerix/symmetry_operations.py/ImproperRotation/__init__",
            "imports": [],
            "code": "class ImproperRotation(Operation):\n    def __init__(self, label, axis, angle):\n        super().__init__(label)\n        self.axis = axis\n        self.angle = angle"
        },
        {
            "key_id": 3,
            "fqn": "sphecerix/molecule.py/Molecule/__init__",
            "imports": [],
            "code": "class Molecule:\n    def __init__(self, _name = 'unknown'):\n        self.name = _name\n        self.atoms = []\n        self.basis_functions = []"
        },
        {
            "key_id": 40,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__init__",
            "imports": [],
            "code": "class BasisFunction:\n    def __init__(self, n, l, m):\n        self.n = n\n        self.l = l\n        self.m = m"
        },
        {
            "key_id": 7,
            "fqn": "sphecerix/atomic_wave_functions.py/wffield",
            "imports": [
                "import numpy as np",
                "from scipy.special import sph_harm"
            ],
            "code": "def wffield(n, l, m, d, npts):\n    theta, phi = np.meshgrid(np.linspace(0, np.pi, npts), np.linspace(0, 2*np.pi, npts))\n    r = np.abs(sph_harm(m, l, phi, theta)) * np.exp(-d * r ** n)\n    return r"
        },
        {
            "key_id": 8,
            "fqn": "sphecerix/atomic_wave_functions.py/wffield_l",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wffield_l(n, l, d, npts):\n    # Assuming a simplified model for demonstration\n    return np.linspace(0, l, npts) * np.exp(-d * np.linspace(0, n, npts))"
        },
        {
            "key_id": 9,
            "fqn": "sphecerix/atomic_wave_functions.py/wfcart",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wfcart(n, l, m, x, y, z):\n    r = np.sqrt(x**2 + y**2 + z**2)\n    theta = np.arccos(z/r)\n    phi = np.arctan2(y, x)\n    # Placeholder for actual wave function calculation\n    return np.exp(-r) * (x**2 + y**2 + z**2)"
        },
        {
            "key_id": 10,
            "fqn": "sphecerix/atomic_wave_functions.py/wf",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wf(n, l, m, r, theta, phi):\n    # Placeholder for actual wave function calculation\n    return np.exp(-r) * np.sin(theta)**l * np.cos(phi)**m"
        },
        {
            "key_id": 11,
            "fqn": "sphecerix/atomic_wave_functions.py/angular",
            "imports": [
                "import numpy as np",
                "from scipy.special import sph_harm"
            ],
            "code": "def angular(l, m, theta, phi):\n    return sph_harm(m, l, phi, theta)"
        },
        {
            "key_id": 12,
            "fqn": "sphecerix/atomic_wave_functions.py/radial",
            "imports": [
                "import numpy as np"
            ],
            "code": "def radial(n, l, r):\n    # Placeholder for actual radial part calculation\n    return np.exp(-r) * r**l"
        },
        {
            "key_id": 13,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D",
            "imports": [
                "import numpy as np",
                "from scipy.spatial.transform import Rotation as R"
            ],
            "code": "def tesseral_wigner_D(l, Robj):\n    # Assuming a placeholder implementation for tesseral Wigner D-matrix\n    return np.eye(2*l + 1) * Robj.as_matrix()"
        },
        {
            "key_id": 14,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D_mirror",
            "imports": [
                "import numpy as np"
            ],
            "code": "def tesseral_wigner_D_mirror(l, normal):\n    # Placeholder for mirror operation on tesseral Wigner D-matrix\n    return np.eye(2*l + 1) * np.linalg.norm(normal)"
        },
        {
            "key_id": 15,
            "fqn": "sphecerix/wignerd.py/tesseral_wigner_D_improper",
            "imports": [
                "import numpy as np"
            ],
            "code": "def tesseral_wigner_D_improper(l, Robj):\n    # Placeholder for improper rotation operation on tesseral Wigner D-matrix\n    return np.eye(2*l + 1) * np.linalg.det(Robj.as_matrix())"
        },
        {
            "key_id": 16,
            "fqn": "sphecerix/wignerd.py/wigner_D",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wigner_D(l, Robj):\n    # Placeholder for Wigner D-matrix calculation\n    return np.eye(2*l + 1) * Robj.as_matrix()"
        },
        {
            "key_id": 17,
            "fqn": "sphecerix/wignerd.py/wigner_d",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wigner_d(l, beta):\n    # Placeholder for small d-matrix calculation\n    return np.eye(2*l + 1) * np.cos(beta)"
        },
        {
            "key_id": 18,
            "fqn": "sphecerix/wignerd.py/wigner_d_element_euler_angles",
            "imports": [
                "import numpy as np"
            ],
            "code": "def wigner_d_element_euler_angles(l, m1, m2, beta):\n    # Placeholder for specific element calculation in small d-matrix\n    return np.cos(beta) * (m1 == m2)"
        },
        {
            "key_id": 32,
            "fqn": "sphecerix/symmetry_operations.py/Rotation/get_wigner_matrix",
            "imports": [
                "import numpy as np",
                "from sphecerix.wignerd import tesseral_wigner_D"
            ],
            "code": "def get_wigner_matrix(self, l):\n    # Assuming self.axis and self.angle are already defined in the class\n    Robj = np.array([self.axis * self.angle])\n    return tesseral_wigner_D(l, Robj)"
        },
        {
            "key_id": 34,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/get_matrix",
            "imports": [
                "import numpy as np"
            ],
            "code": "def get_matrix(self):\n    # Assuming self.normal is a numpy array\n    n = self.normal / np.linalg.norm(self.normal)\n    # Constructing reflection matrix\n    M = np.eye(3) - 2 * np.outer(n, n)\n    return M"
        },
        {
            "key_id": 35,
            "fqn": "sphecerix/symmetry_operations.py/Mirror/get_wigner_matrix",
            "imports": [
                "import numpy as np",
                "from sphecerix.wignerd import tesseral_wigner_D_mirror"
            ],
            "code": "def get_wigner_matrix(self, l):\n    return tesseral_wigner_D_mirror(l, self.normal)"
        },
        {
            "key_id": 37,
            "fqn": "sphecerix/symmetry_operations.py/ImproperRotation/get_matrix",
            "imports": [
                "import numpy as np"
            ],
            "code": "def get_matrix(self):\n    # Assuming self.axis and self.angle are already defined in the class\n    Robj = np.array([self.axis * self.angle])\n    # Improper rotation matrix calculation can be specific to the system\n    # Placeholder for actual implementation\n    return np.eye(3)  # Placeholder"
        },
        {
            "key_id": 4,
            "fqn": "sphecerix/molecule.py/Molecule/__str__",
            "imports": [],
            "code": "def __str__(self):\n    atom_list = ', '.join([atom.symbol for atom in self.atoms])\n    return f'Molecule: {self.name}, Atoms: {atom_list}'"
        },
        {
            "key_id": 5,
            "fqn": "sphecerix/molecule.py/Molecule/add_atom",
            "imports": [
                "from sphecerix.atomic_elements import Element"
            ],
            "code": "def add_atom(self, atom, x, y, z, unit='bohr'):\n    # Assuming Element is a class that can interpret 'atom' as a chemical symbol or atomic number\n    element = Element(atom)\n    self.atoms.append({'element': element, 'position': (x, y, z), 'unit': unit})"
        },
        {
            "key_id": 6,
            "fqn": "sphecerix/molecule.py/Molecule/build_basis",
            "imports": [
                "from sphecerix.basis_functions import BasisFunction"
            ],
            "code": "def build_basis(self, molset):\n    # Assuming molset is a dictionary or similar structure containing basis set information\n    for atom in self.atoms:\n        for orbital in molset[atom['element'].symbol]:\n            self.basis_functions.append(BasisFunction(orbital['n'], orbital['l'], orbital['m']))"
        },
        {
            "key_id": 38,
            "fqn": "sphecerix/tesseral.py/tesseral_transformation",
            "imports": [
                "import numpy as np"
            ],
            "code": "def tesseral_transformation(l):\n    # Placeholder for tesseral transformation logic\n    # This function should return a transformation matrix for tesseral harmonics of order l\n    return np.eye(2 * l + 1)  # Placeholder"
        },
        {
            "key_id": 39,
            "fqn": "sphecerix/tesseral.py/permutation_sh_car",
            "imports": [],
            "code": "def permutation_sh_car():\n    # Placeholder for permutation of spherical harmonics to Cartesian coordinates\n    # This function should return a mapping or transformation\n    return {}  # Placeholder"
        },
        {
            "key_id": 41,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__get_name",
            "imports": [],
            "code": "def __get_name(self):\n    # Assuming n, l, m are orbital quantum numbers\n    return f'{self.n}{self.l}{self.m}'"
        },
        {
            "key_id": 42,
            "fqn": "sphecerix/basis_functions.py/BasisFunction/__get_type",
            "imports": [],
            "code": "def __get_type(self):\n    # Placeholder for determining the type of the basis function\n    # Could be s, p, d, f, etc. based on the value of l\n    types = ['s', 'p', 'd', 'f', 'g', 'h']\n    return types[self.l] if self.l < len(types) else 'unknown'"
        },
        {
            "key_id": 0,
            "fqn": "sphecerix/matrixplot.py/visualize_matrices",
            "imports": [
                "import matplotlib.pyplot as plt"
            ],
            "code": "def visualize_matrices(symops, numcols=3, highlight_groups=None, filename=None, figsize=(7,5), xlabelrot=0):\n    # Placeholder for visualization logic\n    # This function should create a plot of matrices\n    plt.figure(figsize=figsize)\n    plt.show()  # Placeholder"
        },
        {
            "key_id": 1,
            "fqn": "sphecerix/matrixplot.py/plot_highlight_groups",
            "imports": [
                "import matplotlib.pyplot as plt"
            ],
            "code": "def plot_highlight_groups(axh, groups, mat):\n    # Placeholder for plotting logic for highlighting groups in a matrix\n    pass  # Actual implementation needed"
        },
        {
            "key_id": 2,
            "fqn": "sphecerix/matrixplot.py/plot_matrix",
            "imports": [
                "import matplotlib.pyplot as plt"
            ],
            "code": "def plot_matrix(ax, mat, bfs, title=None, xlabelrot=0):\n    # Placeholder for matrix plotting logic\n    pass  # Actual implementation needed"
        },
        {
            "key_id": 43,
            "fqn": "docs/conf.py/setup",
            "imports": [],
            "code": "def setup(app):\n    # Configuration setup for Sphinx documentation\n    app.add_css_file('custom.css')  # Example of adding a custom CSS file"
        },
        {
            "key_id": 44,
            "fqn": "examples/fz3_rotation.py/main",
            "imports": [
                "from sphecerix import tesseral_wigner_D",
                "from scipy.spatial.transform import Rotation as R",
                "import numpy as np"
            ],
            "code": "def main():\n    axis = np.ones(3) / np.sqrt(3)\n    angle = np.pi\n    Robj = R.from_rotvec(axis * angle)\n    D = tesseral_wigner_D(3, Robj)\n    Y = np.zeros(7)\n    Y[3] = 1\n    Yp = D @ Y\n    print(Yp)"
        },
        {
            "key_id": 45,
            "fqn": "examples/ethylene.py/main",
            "imports": [
                "from sphecerix.molecule import Molecule"
            ],
            "code": "def main():\n    ethylene = Molecule('Ethylene')\n    ethylene.add_atom('C', 0, 0, 0)\n    ethylene.add_atom('C', 1.2, 0, 0)\n    # Add hydrogen atoms\n    ethylene.build_basis({'C': [{'n': 2, 'l': 1, 'm': 0}], 'H': [{'n': 1, 'l': 0, 'm': 0}]})\n    print(ethylene)"
        },
        {
            "key_id": 46,
            "fqn": "examples/dz2_rotation.py/main",
            "imports": [
                "from sphecerix import tesseral_wigner_D",
                "from scipy.spatial.transform import Rotation as R",
                "import numpy as np"
            ],
            "code": "def main():\n    axis = np.ones(3) / np.sqrt(3)\n    angle = np.pi\n    Robj = R.from_rotvec(axis * angle)\n    D = tesseral_wigner_D(2, Robj)\n    Y = np.zeros(5)\n    Y[2] = 1\n    Yp = D @ Y\n    print(Yp)"
        },
        {
            "key_id": 47,
            "fqn": "examples/nh3.py/main",
            "imports": [
                "from sphecerix.molecule import Molecule"
            ],
            "code": "def main():\n    nh3 = Molecule('Ammonia')\n    nh3.add_atom('N', 0, 0, 0)\n    nh3.add_atom('H', 0.94, 0.94, 0)\n    nh3.add_atom('H', -0.94, 0.94, 0)\n    nh3.add_atom('H', 0, -0.94, 0.94)\n    nh3.build_basis({'N': [{'n': 2, 'l': 1, 'm': 0}], 'H': [{'n': 1, 'l': 0, 'm': 0}]})\n    print(nh3)"
        }
    ]
}