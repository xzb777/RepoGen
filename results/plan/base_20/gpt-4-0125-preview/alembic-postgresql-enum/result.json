{
    "implementation": [
        {
            "key_id": 41,
            "fqn": "alembic_postgresql_enum/operations/sync_enum_values.py/SyncEnumValuesOp/__init__",
            "imports": [
                "from typing import List",
                "from alembic_postgresql_enum.get_enum_data.types import TableReference",
                "import logging"
            ],
            "code": "class SyncEnumValuesOp:\n    operation_name = \"change_enum_variants\"\n\n    def __init__(self, schema: str, name: str, old_values: List[str], new_values: List[str], affected_columns: List[TableReference]):\n        self.schema = schema\n        self.name = name\n        self.old_values = old_values\n        self.new_values = new_values\n        self.affected_columns = affected_columns\n        log = logging.getLogger(f\"alembic.{__name__}\")\n        log.info(f\"Initializing SyncEnumValuesOp for {name} with new values {new_values}\")"
        },
        {
            "key_id": 48,
            "fqn": "alembic_postgresql_enum/operations/enum_lifecycle_base.py/EnumLifecycleOp/__init__",
            "imports": [
                "from typing import Iterable"
            ],
            "code": "class EnumLifecycleOp:\n    def __init__(self, schema: str, name: str, enum_values: Iterable[str]):\n        self.schema = schema\n        self.name = name\n        self.enum_values = list(enum_values)\n\n    def operation_name(self) -> str:\n        raise NotImplementedError(\"Subclasses must implement an operation_name method\")\n\n    def to_diff_tuple(self) -> tuple:\n        return (self.operation_name(), self.schema, self.name, self.enum_values)"
        },
        {
            "key_id": 10,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_array_enum_type_to_new",
            "imports": [
                "from sqlalchemy import text",
                "from typing import List, Tuple"
            ],
            "code": "def cast_old_array_enum_type_to_new(connection, table_reference, enum_type_name, enum_values_to_rename: List[Tuple[str, str]]):\n    for old_value, new_value in enum_values_to_rename:\n        connection.execute(text(f\"UPDATE {table_reference.table_name_with_schema} SET {table_reference.column_name} = array_replace({table_reference.column_name}, :old_value, :new_value)\").bindparams(old_value=old_value, new_value=new_value))"
        },
        {
            "key_id": 11,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/cast_old_enum_type_to_new",
            "imports": [
                "from sqlalchemy import text",
                "from typing import List, Tuple"
            ],
            "code": "def cast_old_enum_type_to_new(connection, table_reference, enum_type_name, enum_values_to_rename: List[Tuple[str, str]]):\n    for old_value, new_value in enum_values_to_rename:\n        connection.execute(text(f\"UPDATE {table_reference.table_name_with_schema} SET {table_reference.column_name} = CASE WHEN {table_reference.column_name} = :old_value THEN :new_value ELSE {table_reference.column_name} END\").bindparams(old_value=old_value, new_value=new_value))"
        },
        {
            "key_id": 12,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/drop_type",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def drop_type(connection, schema, type_name):\n    connection.execute(text(f\"DROP TYPE IF EXISTS {schema}.{type_name}\"))"
        },
        {
            "key_id": 13,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/rename_type",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def rename_type(connection, schema, type_name, new_type_name):\n    connection.execute(text(f\"ALTER TYPE {schema}.{type_name} RENAME TO {new_type_name}\"))"
        },
        {
            "key_id": 14,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/create_type",
            "imports": [
                "from sqlalchemy import text",
                "from typing import List"
            ],
            "code": "def create_type(connection, schema, type_name, enum_values: List[str]):\n    enum_values_str = ', '.join(f\"'{value}'\" for value in enum_values)\n    connection.execute(text(f\"CREATE TYPE {schema}.{type_name} AS ENUM ({enum_values_str})\"))"
        },
        {
            "key_id": 15,
            "fqn": "alembic_postgresql_enum/sql_commands/enum_type.py/get_all_enums",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def get_all_enums(connection, schema):\n    result = connection.execute(text(f\"SELECT typname FROM pg_type WHERE typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = '{schema}') AND typtype = 'e'\"))\n    return [row[0] for row in result]"
        },
        {
            "key_id": 16,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/get_column_default",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def get_column_default(connection, table_schema, table_name, column_name):\n    result = connection.execute(text(f\"SELECT column_default FROM information_schema.columns WHERE table_schema = '{table_schema}' AND table_name = '{table_name}' AND column_name = '{column_name}'\"))\n    return result.scalar()"
        },
        {
            "key_id": 17,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/drop_default",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def drop_default(connection, table_name_with_schema, column_name):\n    connection.execute(text(f\"ALTER TABLE {table_name_with_schema} ALTER COLUMN {column_name} DROP DEFAULT\"))"
        },
        {
            "key_id": 18,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/set_default",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def set_default(connection, table_name_with_schema, column_name, default_value):\n    connection.execute(text(f\"ALTER TABLE {table_name_with_schema} ALTER COLUMN {column_name} SET DEFAULT {default_value}\"))"
        },
        {
            "key_id": 19,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/rename_default_if_required",
            "imports": [
                "from sqlalchemy import text",
                "from typing import List, Tuple"
            ],
            "code": "def rename_default_if_required(schema, default_value, enum_name, enum_values_to_rename: List[Tuple[str, str]]):\n    for old_value, new_value in enum_values_to_rename:\n        if old_value in default_value:\n            default_value = default_value.replace(old_value, new_value)\n    return default_value"
        },
        {
            "key_id": 20,
            "fqn": "alembic_postgresql_enum/sql_commands/column_default.py/_replace_strings_in_quotes",
            "imports": [],
            "code": "def _replace_strings_in_quotes(old_default, enum_values_to_rename):\n    for old_value, new_value in enum_values_to_rename:\n        old_default = old_default.replace(f\"'{old_value}'\", f\"'{new_value}'\")\n    return old_default"
        },
        {
            "key_id": 21,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_create_comparison_operator",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def _create_comparison_operator(connection, schema, enum_name, old_enum_name, enum_values_to_rename, operator, comparison_function_name):\n    connection.execute(text(f\"CREATE OR REPLACE FUNCTION {schema}.{comparison_function_name}(a {schema}.{enum_name}, b {schema}.{old_enum_name}) RETURNS boolean AS $$ BEGIN RETURN a {operator} b; END; $$ LANGUAGE plpgsql IMMUTABLE\"))"
        },
        {
            "key_id": 22,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/create_comparison_operators",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def create_comparison_operators(connection, schema, enum_name, old_enum_name, enum_values_to_rename):\n    operators_to_create = [('!=', 'new_old_not_equals'), ('=', 'new_old_equals')]\n    for operator, function_name in operators_to_create:\n        _create_comparison_operator(connection, schema, enum_name, old_enum_name, enum_values_to_rename, operator, function_name)"
        },
        {
            "key_id": 23,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/_drop_comparison_operator",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def _drop_comparison_operator(connection, schema, enum_name, old_enum_name, comparison_function_name):\n    connection.execute(text(f\"DROP FUNCTION IF EXISTS {schema}.{comparison_function_name}(a {schema}.{enum_name}, b {schema}.{old_enum_name})\"))"
        },
        {
            "key_id": 24,
            "fqn": "alembic_postgresql_enum/sql_commands/comparison_operators.py/drop_comparison_operators",
            "imports": [
                "from sqlalchemy import text"
            ],
            "code": "def drop_comparison_operators(connection, schema, enum_name, old_enum_name):\n    operators_to_drop = [('!=', 'new_old_not_equals'), ('=', 'new_old_equals')]\n    for operator, function_name in operators_to_drop:\n        _drop_comparison_operator(connection, schema, enum_name, old_enum_name, function_name)"
        },
        {
            "key_id": 25,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/ColumnType/__repr__",
            "imports": [],
            "code": "class ColumnType:\n    COMMON = 'Enum'\n    ARRAY = 'ARRAY'\n\n    def __repr__(self):\n        return f'<ColumnType {self.COMMON} or {self.ARRAY}>'"
        },
        {
            "key_id": 26,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/__repr__",
            "imports": [],
            "code": "class TableReference:\n    def __init__(self, table_name, column_name, schema='public'):\n        self.table_name = table_name\n        self.column_name = column_name\n        self.schema = schema\n\n    def __repr__(self):\n        return f'<TableReference {self.schema}.{self.table_name}.{self.column_name}>'"
        },
        {
            "key_id": 27,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/is_column_type_import_needed",
            "imports": [],
            "code": "def is_column_type_import_needed(self):\n    return self.column_type in [ColumnType.COMMON, ColumnType.ARRAY]"
        },
        {
            "key_id": 28,
            "fqn": "alembic_postgresql_enum/get_enum_data/types.py/TableReference/table_name_with_schema",
            "imports": [],
            "code": "def table_name_with_schema(self):\n    return f'{self.schema}.{self.table_name}'"
        },
        {
            "key_id": 29,
            "fqn": "alembic_postgresql_enum/get_enum_data/defined_enums.py/_remove_schema_prefix",
            "imports": [],
            "code": "def _remove_schema_prefix(enum_name, schema):\n    if enum_name.startswith(f'{schema}.'):\n        return enum_name[len(schema)+1:]\n    return enum_name"
        },
        {
            "key_id": 30,
            "fqn": "alembic_postgresql_enum/get_enum_data/defined_enums.py/get_defined_enums",
            "imports": [
                "from sqlalchemy import text",
                "from typing import Dict, List",
                "from alembic_postgresql_enum.sql_commands.enum_type import get_all_enums"
            ],
            "code": "def get_defined_enums(connection, schema: str) -> Dict[str, List[str]]:\n    return get_all_enums(connection, schema)"
        },
        {
            "key_id": 31,
            "fqn": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_enum_values",
            "imports": [
                "from sqlalchemy import Enum"
            ],
            "code": "def get_enum_values(enum_type: Enum) -> 'Tuple[str, ...]':\n    return enum_type.enums"
        },
        {
            "key_id": 32,
            "fqn": "alembic_postgresql_enum/get_enum_data/declared_enums.py/column_type_is_enum",
            "imports": [
                "from sqlalchemy import Enum"
            ],
            "code": "def column_type_is_enum(column_type: Any) -> bool:\n    return isinstance(column_type, Enum)"
        },
        {
            "key_id": 33,
            "fqn": "alembic_postgresql_enum/get_enum_data/declared_enums.py/get_declared_enums",
            "imports": [
                "from sqlalchemy import MetaData",
                "from typing import Union, List, Dict",
                "from alembic_postgresql_enum.get_enum_data.declared_enums import get_enum_values, column_type_is_enum"
            ],
            "code": "def get_declared_enums(metadata: Union[MetaData, List[MetaData]], schema: str, default_schema: str, connection, upgrade_ops=None) -> Dict[str, List[str]]:\n    declared_enums = {}\n    for meta in metadata if isinstance(metadata, list) else [metadata]:\n        for table in meta.tables.values():\n            if table.schema == schema or schema is None:\n                for column in table.columns:\n                    if column_type_is_enum(column.type):\n                        declared_enums[column.type.name] = get_enum_values(column.type)\n    return declared_enums"
        },
        {
            "key_id": 34,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_add_column_op",
            "imports": [
                "from alembic.operations import AddColumnOp",
                "from typing import Tuple, Optional"
            ],
            "code": "def _get_default_from_add_column_op(op: AddColumnOp, default_schema: str) -> Tuple[Tuple[str, str, str], Optional[str]]:\n    schema = op.table_name.split('.')[0] if '.' in op.table_name else default_schema\n    table_name = op.table_name.split('.')[-1]\n    column_name = op.column.name\n    default = op.column.default\n    return ((schema, table_name, column_name), default)"
        },
        {
            "key_id": 35,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_alter_column_op",
            "imports": [
                "from alembic.operations import AlterColumnOp",
                "from typing import Tuple, Optional"
            ],
            "code": "def _get_default_from_alter_column_op(op: AlterColumnOp, default_schema: str) -> Tuple[Tuple[str, str, str], Optional[str]]:\n    schema = op.table_name.split('.')[0] if '.' in op.table_name else default_schema\n    table_name = op.table_name.split('.')[-1]\n    column_name = op.column_name\n    default = op.existing_type.default if hasattr(op.existing_type, 'default') else None\n    return ((schema, table_name, column_name), default)"
        },
        {
            "key_id": 36,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/_get_default_from_column",
            "imports": [
                "from sqlalchemy import Column",
                "from typing import Tuple, Optional"
            ],
            "code": "def _get_default_from_column(column: Column, default_schema: str) -> Tuple[Tuple[str, str, str], Optional[str]]:\n    schema = column.table.schema or default_schema\n    table_name = column.table.name\n    column_name = column.name\n    default = column.default\n    return ((schema, table_name, column_name), default)"
        },
        {
            "key_id": 37,
            "fqn": "alembic_postgresql_enum/get_enum_data/get_default_from_alembic_ops.py/get_just_added_defaults",
            "imports": [
                "from typing import Dict, Tuple, Optional",
                "from alembic_postgresql_enum.get_enum_data.get_default_from_alembic_ops import _get_default_from_add_column_op, _get_default_from_alter_column_op"
            ],
            "code": "def get_just_added_defaults(upgrade_ops, default_schema: str) -> Dict[Tuple[str, str, str], Optional[str]]:\n    just_added_defaults = {}\n    for op in upgrade_ops.ops:\n        if isinstance(op, AddColumnOp):\n            key, default = _get_default_from_add_column_op(op, default_schema)\n            if default is not None:\n                just_added_defaults[key] = default\n        elif isinstance(op, AlterColumnOp) and op.modify_nullable:\n            key, default = _get_default_from_alter_column_op(op, default_schema)\n            if default is not None:\n                just_added_defaults[key] = default\n    return just_added_defaults"
        },
        {
            "key_id": 38,
            "fqn": "alembic_postgresql_enum/detection_of_changes/enum_creation.py/create_new_enums",
            "imports": [
                "from typing import Dict, List",
                "from alembic.operations import Operations",
                "from alembic_postgresql_enum.operations.create_enum import CreateEnumOp"
            ],
            "code": "def create_new_enums(defined_enums: Dict[str, List[str]], declared_enums: Dict[str, List[str]], schema: str, upgrade_ops: Operations):\n    for name, values in declared_enums.items():\n        if name not in defined_enums:\n            upgrade_ops.add_operation(CreateEnumOp(schema=schema, name=name, enum_values=values))"
        },
        {
            "key_id": 39,
            "fqn": "alembic_postgresql_enum/detection_of_changes/enum_alteration.py/sync_changed_enums",
            "imports": [
                "from typing import Dict, List",
                "from alembic.operations import Operations",
                "from alembic_postgresql_enum.operations.sync_enum_values import SyncEnumValuesOp"
            ],
            "code": "def sync_changed_enums(defined_enums: Dict[str, List[str]], declared_enums: Dict[str, List[str]], table_references: Dict[str, List[str]], schema: str, upgrade_ops: Operations):\n    for name, new_values in declared_enums.items():\n        if name in defined_enums and set(defined_enums[name]) != set(new_values):\n            upgrade_ops.add_operation(SyncEnumValuesOp(schema=schema, name=name, old_values=defined_enums[name], new_values=new_values, affected_columns=table_references.get(name, [])))"
        },
        {
            "key_id": 40,
            "fqn": "alembic_postgresql_enum/detection_of_changes/enum_deletion.py/drop_unused_enums",
            "imports": [
                "from typing import Dict, List",
                "from alembic.operations import Operations",
                "from alembic_postgresql_enum.operations.drop_enum import DropEnumOp"
            ],
            "code": "def drop_unused_enums(defined_enums: Dict[str, List[str]], declared_enums: Dict[str, List[str]], schema: str, upgrade_ops: Operations):\n    for name in defined_enums.keys():\n        if name not in declared_enums:\n            upgrade_ops.add_operation(DropEnumOp(schema=schema, name=name))"
        },
        {
            "key_id": 52,
            "fqn": "alembic_postgresql_enum/operations/create_enum.py/render_create_enum_op",
            "imports": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic.operations import ops"
            ],
            "code": "def render_create_enum_op(autogen_context: AutogenContext, op: ops.CreateEnumOp) -> str:\n    return f\"op.create_enum(name='{op.name}', values={op.enum_values})\""
        },
        {
            "key_id": 53,
            "fqn": "alembic_postgresql_enum/operations/drop_enum.py/DropEnumOp/reverse",
            "imports": [
                "from alembic.operations import ops"
            ],
            "code": "class DropEnumOp(ops.MigrateOperation):\n    operation_name = \"drop_enum\"\n\n    def reverse(self):\n        return ops.CreateEnumOp(enum_name=self.name, enum_values=self.enum_values)"
        },
        {
            "key_id": 54,
            "fqn": "alembic_postgresql_enum/operations/drop_enum.py/render_drop_enum_op",
            "imports": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic.operations import ops"
            ],
            "code": "def render_drop_enum_op(autogen_context: AutogenContext, op: ops.DropEnumOp) -> str:\n    return f\"op.drop_enum(name='{op.name}')\""
        },
        {
            "key_id": 0,
            "fqn": "alembic_postgresql_enum/connection.py/get_connection",
            "imports": [
                "from sqlalchemy.engine import Connection",
                "from contextlib import contextmanager"
            ],
            "code": "def get_connection(operations) -> Connection:\n    @contextmanager\n    def connection_context():\n        with operations.get_bind() as conn:\n            yield conn\n    return connection_context()"
        },
        {
            "key_id": 1,
            "fqn": "alembic_postgresql_enum/compare_dispatch.py/compare_enums",
            "imports": [
                "from alembic.autogenerate.api import AutogenContext",
                "from alembic.operations import ops",
                "from typing import Iterable, Union"
            ],
            "code": "def compare_enums(autogen_context: AutogenContext, upgrade_ops: ops.UpgradeOps, schema_names: Iterable[Union[str, None]]):\n    # Logic to compare enums across schema_names\n    pass"
        },
        {
            "key_id": 2,
            "fqn": "alembic_postgresql_enum/add_create_type_false.py/ReprWorkaround/__repr__",
            "imports": [
                "from sqlalchemy.dialects.postgresql import ENUM"
            ],
            "code": "class ReprWorkaround(ENUM):\n    __module__ = \"sqlalchemy.dialects.postgresql\"\n\n    def __repr__(self):\n        return super().__repr__() + ' with create_type=False'"
        },
        {
            "key_id": 6,
            "fqn": "alembic_postgresql_enum/add_postgres_using_to_text.py/PostgresUsingAlterColumnOp/reverse",
            "imports": [
                "from alembic.operations import ops",
                "from typing import List"
            ],
            "code": "class PostgresUsingAlterColumnOp(ops.AlterColumnOp):\n    def reverse(self):\n        return self.copy()"
        }
    ]
}